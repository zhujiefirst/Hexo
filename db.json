{"Asset":[{"_id":"source/img/2012-09-02-0.png","path":"img/2012-09-02-0.png","modified":false},{"_id":"source/img/2012-09-02-1.png","path":"img/2012-09-02-1.png","modified":false},{"_id":"source/img/2012-09-02-2.png","path":"img/2012-09-02-2.png","modified":false},{"_id":"source/img/2012-09-02-3.png","path":"img/2012-09-02-3.png","modified":false},{"_id":"source/img/2012-09-02-4.png","path":"img/2012-09-02-4.png","modified":false},{"_id":"source/img/2012-09-02-5.png","path":"img/2012-09-02-5.png","modified":false},{"_id":"source/img/2012-09-09-0.png","path":"img/2012-09-09-0.png","modified":false},{"_id":"source/img/2013-06-29-0.png","path":"img/2013-06-29-0.png","modified":false},{"_id":"source/img/2014-12-28-0.png","path":"img/2014-12-28-0.png","modified":false},{"_id":"themes/pacman/source/font/FontAwesome.otf","path":"font/FontAwesome.otf","modified":false},{"_id":"themes/pacman/source/font/coveredbyyourgrace-webfont.eot","path":"font/coveredbyyourgrace-webfont.eot","modified":false},{"_id":"themes/pacman/source/font/coveredbyyourgrace-webfont.svg","path":"font/coveredbyyourgrace-webfont.svg","modified":false},{"_id":"themes/pacman/source/font/coveredbyyourgrace-webfont.ttf","path":"font/coveredbyyourgrace-webfont.ttf","modified":false},{"_id":"themes/pacman/source/font/coveredbyyourgrace-webfont.woff","path":"font/coveredbyyourgrace-webfont.woff","modified":false},{"_id":"themes/pacman/source/font/fontawesome-webfont.eot","path":"font/fontawesome-webfont.eot","modified":false},{"_id":"themes/pacman/source/font/fontawesome-webfont.svg","path":"font/fontawesome-webfont.svg","modified":false},{"_id":"themes/pacman/source/font/fontawesome-webfont.ttf","path":"font/fontawesome-webfont.ttf","modified":false},{"_id":"themes/pacman/source/font/fontawesome-webfont.woff","path":"font/fontawesome-webfont.woff","modified":false},{"_id":"themes/pacman/source/img/author.jpg","path":"img/author.jpg","modified":false},{"_id":"themes/pacman/source/img/favicon.ico","path":"img/favicon.ico","modified":false},{"_id":"themes/pacman/source/img/pacman.jpg","path":"img/pacman.jpg","modified":false},{"_id":"themes/pacman/source/js/jquery-2.1.0.min.js","path":"js/jquery-2.1.0.min.js","modified":false},{"_id":"themes/pacman/source/css/style.styl","path":"css/style.styl","modified":false},{"_id":"themes/pacman/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":false},{"_id":"themes/pacman/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":false},{"_id":"themes/pacman/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":false},{"_id":"themes/pacman/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":false},{"_id":"themes/pacman/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":false},{"_id":"themes/pacman/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":false},{"_id":"themes/pacman/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":false},{"_id":"themes/pacman/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":false},{"_id":"themes/pacman/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":false},{"_id":"themes/pacman/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":false},{"_id":"themes/pacman/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":false},{"_id":"themes/pacman/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":false},{"_id":"themes/pacman/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":false},{"_id":"themes/pacman/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":false},{"_id":"themes/pacman/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":false}],"Cache":[{"_id":"scaffolds/draft.md","mtime":1421856548000},{"_id":"scaffolds/page.md","mtime":1421856548000},{"_id":"scaffolds/photo.md","mtime":1421856548000},{"_id":"scaffolds/post.md","mtime":1421856548000},{"_id":"source/_posts/2010-07-03-0.md","mtime":1422085763000},{"_id":"source/_posts/2010-08-02-0.md","mtime":1419145978000},{"_id":"source/_posts/2010-09-03-0.md","mtime":1419146182000},{"_id":"source/_posts/2011-05-29-0.md","mtime":1419146285000},{"_id":"source/_posts/2011-06-04-0.md","mtime":1422085782000},{"_id":"source/_posts/2011-10-06-0.md","mtime":1419145470000},{"_id":"source/_posts/2011-10-07-0.md","mtime":1419145370000},{"_id":"source/_posts/2011-10-16-0.md","mtime":1419145106000},{"_id":"source/_posts/2011-12-15-0.md","mtime":1422085792000},{"_id":"source/_posts/2012-09-02-0.md","mtime":1422085804000},{"_id":"source/_posts/2012-09-09-0.md","mtime":1422085809000},{"_id":"source/_posts/2013-03-24-0.md","mtime":1419135104000},{"_id":"source/_posts/2013-03-25-0.md","mtime":1419134625000},{"_id":"source/_posts/2013-06-22-0.md","mtime":1419133663000},{"_id":"source/_posts/2013-06-23-0.md","mtime":1422085831000},{"_id":"source/_posts/2013-06-29-0.md","mtime":1422085044000},{"_id":"source/_posts/2013-07-15-0.md","mtime":1419132255000},{"_id":"source/_posts/2013-07-17-0.md","mtime":1419084672000},{"_id":"source/_posts/2013-07-27-0.md","mtime":1419084646000},{"_id":"source/_posts/2013-07-28-0.md","mtime":1419084636000},{"_id":"source/_posts/2014-07-03-0.md","mtime":1419084685000},{"_id":"source/_posts/2014-08-09-0.md","mtime":1419077189000},{"_id":"source/_posts/2014-08-09-1.md","mtime":1419078146000},{"_id":"source/_posts/2014-08-09-2.md","mtime":1422085853000},{"_id":"source/_posts/2014-11-14-0.md","mtime":1419076647000},{"_id":"source/_posts/2014-11-16-0.md","mtime":1419076319000},{"_id":"source/_posts/2014-11-18-0.md","mtime":1419076163000},{"_id":"source/_posts/2014-11-20-0.md","mtime":1419075206000},{"_id":"source/_posts/2014-12-01-0.md","mtime":1422079574000},{"_id":"source/_posts/2014-12-07-0.md","mtime":1422079618000},{"_id":"source/_posts/2014-12-08-0.md","mtime":1422079626000},{"_id":"source/_posts/2014-12-12-0.md","mtime":1422079634000},{"_id":"source/_posts/2014-12-27-0.md","mtime":1419660801000},{"_id":"source/_posts/2014-12-27-1.md","mtime":1419662821000},{"_id":"source/_posts/2014-12-27-2.md","mtime":1419674101000},{"_id":"source/_posts/2014-12-27-3.md","mtime":1419689848000},{"_id":"source/_posts/2014-12-28-0.md","mtime":1422085062000},{"_id":"source/_posts/2014-12-28-1.md","mtime":1419766479000},{"_id":"source/_posts/2014-12-28-2.md","mtime":1419774781000},{"_id":"source/_posts/2015-01-22-0.md","mtime":1421932034000},{"_id":"source/_posts/2015-01-23-0.md","mtime":1422019263000},{"_id":"source/about/index.md","mtime":1422110260000},{"_id":"source/categories/index.md","mtime":1422069193000},{"_id":"source/img/2012-09-02-0.png","mtime":1419144743000},{"_id":"source/img/2012-09-02-1.png","mtime":1419144754000},{"_id":"source/img/2012-09-02-2.png","mtime":1419144764000},{"_id":"source/img/2012-09-02-3.png","mtime":1419144781000},{"_id":"source/img/2012-09-02-4.png","mtime":1419144792000},{"_id":"source/img/2012-09-02-5.png","mtime":1419144803000},{"_id":"source/img/2012-09-09-0.png","mtime":1419144886000},{"_id":"source/img/2013-06-29-0.png","mtime":1419088668000},{"_id":"source/img/2014-12-28-0.png","mtime":1419750700000},{"_id":"source/tags/index.md","mtime":1422069078000},{"_id":"themes/pacman/LICENSE","mtime":1422030295000},{"_id":"themes/pacman/README.md","mtime":1422030295000},{"_id":"themes/pacman/_config.yml","mtime":1422114757000},{"_id":"themes/pacman/package.json","mtime":1422087405000},{"_id":"themes/pacman/languages/default.yml","mtime":1422030295000},{"_id":"themes/pacman/languages/zh-CN.yml","mtime":1422030295000},{"_id":"themes/pacman/languages/zh-TW.yml","mtime":1422030295000},{"_id":"themes/pacman/scripts/fancybox.js","mtime":1422030295000},{"_id":"themes/pacman/layout/archive.ejs","mtime":1422030295000},{"_id":"themes/pacman/layout/category.ejs","mtime":1422030295000},{"_id":"themes/pacman/layout/index.ejs","mtime":1422030295000},{"_id":"themes/pacman/layout/layout.ejs","mtime":1422030295000},{"_id":"themes/pacman/layout/page.ejs","mtime":1422030295000},{"_id":"themes/pacman/layout/post.ejs","mtime":1422030295000},{"_id":"themes/pacman/layout/tag.ejs","mtime":1422030295000},{"_id":"themes/pacman/layout/_widget/archive.ejs","mtime":1422030295000},{"_id":"themes/pacman/layout/_widget/category.ejs","mtime":1422030295000},{"_id":"themes/pacman/layout/_widget/links.ejs","mtime":1422030295000},{"_id":"themes/pacman/layout/_widget/rss.ejs","mtime":1422030295000},{"_id":"themes/pacman/layout/_widget/tag.ejs","mtime":1422030295000},{"_id":"themes/pacman/layout/_widget/tagcloud.ejs","mtime":1422030295000},{"_id":"themes/pacman/layout/_partial/after_footer.ejs","mtime":1422030295000},{"_id":"themes/pacman/layout/_partial/archive.ejs","mtime":1422030295000},{"_id":"themes/pacman/layout/_partial/article.ejs","mtime":1422030295000},{"_id":"themes/pacman/layout/_partial/categories.ejs","mtime":1422030295000},{"_id":"themes/pacman/layout/_partial/footer.ejs","mtime":1422030295000},{"_id":"themes/pacman/layout/_partial/google_analytics.ejs","mtime":1422030295000},{"_id":"themes/pacman/layout/_partial/head.ejs","mtime":1422030295000},{"_id":"themes/pacman/layout/_partial/header.ejs","mtime":1422030295000},{"_id":"themes/pacman/layout/_partial/pagination.ejs","mtime":1422030295000},{"_id":"themes/pacman/layout/_partial/search.ejs","mtime":1422030295000},{"_id":"themes/pacman/layout/_partial/sidebar.ejs","mtime":1422030295000},{"_id":"themes/pacman/layout/_partial/tags.ejs","mtime":1422030295000},{"_id":"themes/pacman/layout/_partial/post/article.ejs","mtime":1422030295000},{"_id":"themes/pacman/layout/_partial/post/catetags.ejs","mtime":1422030295000},{"_id":"themes/pacman/layout/_partial/post/comment.ejs","mtime":1422030295000},{"_id":"themes/pacman/layout/_partial/post/footer.ejs","mtime":1422030295000},{"_id":"themes/pacman/layout/_partial/post/gallery.ejs","mtime":1422030295000},{"_id":"themes/pacman/layout/_partial/post/header.ejs","mtime":1422030295000},{"_id":"themes/pacman/layout/_partial/post/jiathis.ejs","mtime":1422030295000},{"_id":"themes/pacman/layout/_partial/post/pagination.ejs","mtime":1422030295000},{"_id":"themes/pacman/source/font/FontAwesome.otf","mtime":1422030295000},{"_id":"themes/pacman/source/font/coveredbyyourgrace-webfont.eot","mtime":1422030295000},{"_id":"themes/pacman/source/font/coveredbyyourgrace-webfont.svg","mtime":1422030295000},{"_id":"themes/pacman/source/font/coveredbyyourgrace-webfont.ttf","mtime":1422030295000},{"_id":"themes/pacman/source/font/coveredbyyourgrace-webfont.woff","mtime":1422030295000},{"_id":"themes/pacman/source/font/fontawesome-webfont.eot","mtime":1422030295000},{"_id":"themes/pacman/source/font/fontawesome-webfont.svg","mtime":1422030295000},{"_id":"themes/pacman/source/font/fontawesome-webfont.ttf","mtime":1422030295000},{"_id":"themes/pacman/source/font/fontawesome-webfont.woff","mtime":1422030295000},{"_id":"themes/pacman/source/img/author.jpg","mtime":1422103376000},{"_id":"themes/pacman/source/img/favicon.ico","mtime":1422103376000},{"_id":"themes/pacman/source/img/pacman.jpg","mtime":1422103704000},{"_id":"themes/pacman/source/js/jquery-2.1.0.min.js","mtime":1422030295000},{"_id":"themes/pacman/source/css/style.styl","mtime":1422030295000},{"_id":"themes/pacman/source/css/_base/code.styl","mtime":1422030295000},{"_id":"themes/pacman/source/css/_base/font.styl","mtime":1422030295000},{"_id":"themes/pacman/source/css/_base/public.styl","mtime":1422030295000},{"_id":"themes/pacman/source/css/_base/variable.styl","mtime":1422030295000},{"_id":"themes/pacman/source/css/_partial/article.styl","mtime":1422030295000},{"_id":"themes/pacman/source/css/_partial/aside.styl","mtime":1422030295000},{"_id":"themes/pacman/source/css/_partial/duoshuo.styl","mtime":1422030295000},{"_id":"themes/pacman/source/css/_partial/footer.styl","mtime":1422030295000},{"_id":"themes/pacman/source/css/_partial/gallery.styl","mtime":1422030295000},{"_id":"themes/pacman/source/css/_partial/header.styl","mtime":1422030295000},{"_id":"themes/pacman/source/css/_partial/helper.styl","mtime":1422030295000},{"_id":"themes/pacman/source/css/_partial/index.styl","mtime":1422030295000},{"_id":"themes/pacman/source/fancybox/blank.gif","mtime":1422030295000},{"_id":"themes/pacman/source/fancybox/fancybox_loading.gif","mtime":1422030295000},{"_id":"themes/pacman/source/fancybox/fancybox_loading@2x.gif","mtime":1422030295000},{"_id":"themes/pacman/source/fancybox/fancybox_overlay.png","mtime":1422030295000},{"_id":"themes/pacman/source/fancybox/fancybox_sprite.png","mtime":1422030295000},{"_id":"themes/pacman/source/fancybox/fancybox_sprite@2x.png","mtime":1422030295000},{"_id":"themes/pacman/source/fancybox/jquery.fancybox.css","mtime":1422030295000},{"_id":"themes/pacman/source/fancybox/jquery.fancybox.js","mtime":1422030295000},{"_id":"themes/pacman/source/fancybox/jquery.fancybox.pack.js","mtime":1422030295000},{"_id":"themes/pacman/source/fancybox/helpers/fancybox_buttons.png","mtime":1422030295000},{"_id":"themes/pacman/source/fancybox/helpers/jquery.fancybox-buttons.css","mtime":1422030295000},{"_id":"themes/pacman/source/fancybox/helpers/jquery.fancybox-buttons.js","mtime":1422030295000},{"_id":"themes/pacman/source/fancybox/helpers/jquery.fancybox-media.js","mtime":1422030295000},{"_id":"themes/pacman/source/fancybox/helpers/jquery.fancybox-thumbs.css","mtime":1422030295000},{"_id":"themes/pacman/source/fancybox/helpers/jquery.fancybox-thumbs.js","mtime":1422030295000}],"Category":[{"name":"杂感","_id":"5uqjpmh62j3bpyf3","posts":["ue990ozoqbifpfs9","oxgsy84gn3zugdc9","5ljrnh9n2cwb11dw","pe19jypww9l70vkc","tqouple0vranta4y"]},{"name":"c/c++","_id":"hmzns96sockjtdsf","posts":["oojrioc85lvie065","74tmv6rjwspbfthv","dbsdar2k0vjhghok","cpxqfrmcn9u9ee4f","4woysr9ynri2vrve"]},{"name":"算法","_id":"8jwkgptl4juxqcvd","posts":["qttdfts7zx56yxnt","r4nkpasjc54aioz9","ocfi8fe0ex3sqqgz","ihpxsh4esyt3fc11","tqu8qrc2igkrkc7u","epd6clafna760k2x","wm3xhgckychaxe59","auk648ncwkswxa2a","5i05thmr7dltojdg","j2elszw2ui6ii3m6","2unx7rlf3unad7pe","t7rqm1fa4w4m09pq","trtxql5lerzvm4og","rqsn842mcr8t2ya6","veaufuijauraob65"]},{"name":"lisp","_id":"icapitok4j2xfddm","posts":["gvsx4ycd5x8avk0d"]},{"name":"设计模式","_id":"bm3iyiguh6q5qxsd","posts":["az8s67h1s0epl5pw","xa27dwvt7dihr5z1"]},{"name":"编程思维","_id":"c6jb1xulxw9ix8l0","posts":["kay6zd8pjphfm8sz","phnerjg7chquvtgg","qcy06vx1vsr2dvxr"]},{"name":"游戏开发","_id":"phgmgqv2woypuv1r","posts":["wvsvofwpj7noh1o8","zaudx5zik6ej9rdq","3vnyaifveqdp0tx4","kce2wwsnwx6zzbc6"]},{"name":"服务器编程","_id":"35dfvdhzm65go8n5","posts":["uq6cghl8it3qc3fl","wg9cc8ctavtv30cd","x6d4hdfpdsof0shh"]},{"name":"lua","_id":"mszl38ac5o7gyin7","posts":["5bwoyzieku6pckfy"]},{"name":"golang","_id":"uj90suj8si8uefy9","posts":["zy1lplodx9wtciw4","64o7getbynp33mvl"]}],"Page":[{"title":"About Me","description":null,"content":"<h2 id=\"这家伙很懒，什么也没有留下。\">这家伙很懒，什么也没有留下。</h2>\n<p>似乎不写点东西，对不起这2块钱的特效。所以就胡乱扯点吧。</p>\n<ol>\n<li><strong>波大</strong><br>小Coder毕业于<a href=\"http://www.nbu.edu.cn\" target=\"_blank\" rel=\"external\">波大</a>，没错，你没有看错，就是远近文明的<a href=\"http://www.nbu.edu.cn\" target=\"_blank\" rel=\"external\">波大</a>。那么，问题来了，波大的妹子真的波大么？这个，请各位看官自行移步到<a href=\"https://www.google.com/search?q=%E5%AE%81%E6%B3%A2%E5%A4%A7%E5%AD%A6%E5%A6%B9%E5%AD%90&amp;biw=1366&amp;bih=643&amp;source=lnms&amp;tbm=isch&amp;sa=X&amp;ei=kyiVVLyuPImsoQTjoYDoDA&amp;ved=0CAcQ_AUoAg\" target=\"_blank\" rel=\"external\">波大妹子</a>。</li>\n<li><strong>sky-mobi</strong><br>毕业后辗转来到天堂之一的杭州，就职于“中国移动互联网纳斯达克第一股“的<a href=\"http://www.mopo.com/\" target=\"_blank\" rel=\"external\">sky-mobi</a>，先后参加自研游戏引擎，2款手游研发。说实话，无论是引擎还是手游，都算是失败的，说得心塞呐。</li>\n<li><strong>tencent</strong><br>人生第一次跳槽，进入<a href=\"http://www.tencent.com\" target=\"_blank\" rel=\"external\">腾讯</a>，担任后台开发，请关注我们的产品—<a href=\"sj.qq.com\">应用宝</a>。</li>\n<li><strong>人生之路漫漫</strong><br>Move on…</li>\n</ol>\n<h2 id=\"联系我\">联系我</h2>\n<ul>\n<li><a href=\"https://github.com/zhujiefirst\" target=\"_blank\" rel=\"external\">GitHub</a></li>\n<li><a href=\"http://www.douban.com/people/44265520/\" target=\"_blank\" rel=\"external\">豆瓣</a></li>\n<li><a href=\"http://weibo.com/u/2421642590\" target=\"_blank\" rel=\"external\">Weibo</a></li>\n<li><a href=\"https://twitter.com/Jay1002008\" target=\"_blank\" rel=\"external\">Twitter</a></li>\n<li><a href=\"mailto:zhujiefirst@gmail.com\" target=\"_blank\" rel=\"external\">Mail</a></li>\n</ul>\n","source":"about/index.md","raw":"---\ntitle : About Me\ndescription:\n---\n\n这家伙很懒，什么也没有留下。\n-------------------------\n\n似乎不写点东西，对不起这2块钱的特效。所以就胡乱扯点吧。\n\n1. **波大**       \n小Coder毕业于[波大](http://www.nbu.edu.cn)，没错，你没有看错，就是远近文明的[波大](http://www.nbu.edu.cn)。那么，问题来了，波大的妹子真的波大么？这个，请各位看官自行移步到[波大妹子](https://www.google.com/search?q=%E5%AE%81%E6%B3%A2%E5%A4%A7%E5%AD%A6%E5%A6%B9%E5%AD%90&biw=1366&bih=643&source=lnms&tbm=isch&sa=X&ei=kyiVVLyuPImsoQTjoYDoDA&ved=0CAcQ_AUoAg)。\n2. **sky-mobi**  \n毕业后辗转来到天堂之一的杭州，就职于“中国移动互联网纳斯达克第一股“的[sky-mobi](http://www.mopo.com/)，先后参加自研游戏引擎，2款手游研发。说实话，无论是引擎还是手游，都算是失败的，说得心塞呐。\n3. **tencent**  \n人生第一次跳槽，进入[腾讯](http://www.tencent.com)，担任后台开发，请关注我们的产品--[应用宝](sj.qq.com)。\n4. **人生之路漫漫**  \nMove on...\n\n\n联系我\n----------\n\n+ [GitHub](https://github.com/zhujiefirst)\n+ [豆瓣](http://www.douban.com/people/44265520/)\n+ [Weibo](http://weibo.com/u/2421642590)\n+ [Twitter](https://twitter.com/Jay1002008)\n+ <a href=\"mailto:zhujiefirst@gmail.com\">Mail</a>\n","date":1422110260000,"updated":1422110260000,"path":"about/index.html","excerpt":"","_id":"2ytd6pm2ks0l8zkr","comments":true,"layout":"page"},{"title":"categories","date":1422069170000,"layout":"categories","content":"","source":"categories/index.md","raw":"title: categories\ndate: 2015-01-24 11:12:50\nlayout: categories\n---\n","updated":1422069193000,"path":"categories/index.html","excerpt":"","_id":"ezg3uzkjd092owrc","comments":true},{"title":"tags","date":1422069055000,"layout":"tags","content":"","source":"tags/index.md","raw":"title: tags\ndate: 2015-01-24 11:10:55\nlayout: tags\n---\n","updated":1422069078000,"path":"tags/index.html","excerpt":"","_id":"unjbdmagkgi6o7hx","comments":true}],"Post":[{"date":1283443200000,"layout":"post","title":"关于幸福","categories":["5uqjpmh62j3bpyf3"],"tags":[],"content":"<p>幸福是什么？网上流行这样一句话：幸福就是猫吃鱼，狗吃肉，奥特曼打小怪兽。这虽是一句俏皮话，但是，为什么不是猫吃肉，奥特曼吃鱼，让狗去打小怪兽呢？ 当然，这么办的话，猫不会觉得幸福，狗也过得不自在，奥特曼更是不知道幸福为何物了。所以，幸福的定义只能是主观的，每个人的幸福并不相同。比如，我们的 朝鲜同胞们有一辆自行车就觉得很幸福，而我们有辆普桑为什么就没觉得有多少幸福。</p>\n<p>那么，怎么才能幸福呢？是拥有大量的财产，还是手握巨大的权力？这个问题，答案只有自己知道。这里，我们只能告诉你一点点幸福的秘诀。</p>\n<p><strong>尽量获取不容易情感适应的，且会带来快乐的外部刺激；尽量规避不容易情感适应的，且会带来不快的外部刺激。</strong> 什么是情感适应呢？我们都会有这样的经历，当手伸入零度的冰水中时，会觉得异常冰冷与不 适应，但是随着时间的推移，我们渐渐觉得没有先前这么不适应了。这就是情感适应的因故。当然，有童鞋会说这不是生理上的适应嘛。事实上，导致情感适应的主 要原因包括生理适应，大脑对熟悉信息的模块化记忆，对于外部刺激注意力的转移以及对于事件结果的合理化解释。对于某件产生负向情感的事情，如将手伸入冰水 中，我们逐渐情感适应了，当然也不觉得这么难受了。相反，如果某件产生正向情感的事，比如说中的百万元的彩票，情感适应容易与否直接关系到快乐持续时间的 长短了。所以，对于能产生快乐的外部刺激，我们追求不容易情感适应的，如旅行等，而对于带来不快的外部刺激，我们则尽量避开不容易情感适应的，如失恋。</p>\n<p><strong>尽量花钱在单独消费时就可以感知其品质变化的产品或服务上，而不要花在只有在比较时才能感知相应变化的产品或服务上。</strong> 举个例子，假如你想更换家中书房里的办公椅，因为这把椅子坐着不舒服，有种倾斜的感觉，所以想把它换成高档的办公椅。与此同时，你又想更换自己的数码相机，因为是几年前买的，虽然镜头和其他功能都让人满意，但却只有 800 万相素。而新品虽然在其他方面相差不大，但却有 1200 万相素。办公椅与相机价格相当，但是你只有购买其中一个，你经常在家里办公，也经常外出旅游摄影。你会如何选择呢？幸福学告诉你，应该选择办公椅。为什么呢？因为办公椅解决的是你的肌肉疲劳程度，而这点又是人体比较容易感知的，无须进行比较。相反，照片的相素从 800 万上升到 1200 万，只有在比较的情况下才能感知，一般人肉眼是无法将其分辨。所以，把钱花在容易感知其品质变化的产品或服务上才是正确的选择。</p>\n<p><strong>偶尔吃点苦能提高整体幸福水平，偶尔体验较为高档的享受都降低整体幸福水平，除非这些偶尔的体验被你视为非正常状态。</strong> 如果你每天开车上班，可以每星期有那么一天去挤一次公交。这样的体验，能让你更能感受到开车上班的幸福感。正如有人说：忆苦思甜甜更甜。然而，偶尔体验较为高档的享受就不提倡了。如果你开的车是辆奇锐 QQ ，有个机会让你去免费试开宝马一个星期，你会把握这个机会吗？面对这样的机会，我们还是避而远之比较好。如果你去尝试了，等一个星期结束，你会发现你的奇锐 QQ 制动又差，方向盘又不舒适，总之是这有问题，那也有问题。然后，就会抱怨你的爱车有多么得差劲。其实，你大可不必这样，因为完全可以避免。当然，这里还有一种极端的情况，如果你这一辈子都买不起宝马，那么我建议去尝试吧，就好比刘姥姥游大观园而已。</p>\n<p><strong>学会创造流体验。</strong> 所谓流体验，是指人们在进行某些活动时的忘我状态，此时人们完全被活动吸引，所有注意力 完全投注于活动中，并且觉得没有比活动本身更加重要的东西。我们生活中多多少少，有意无意地都经历过一些流体验。例如阅读一本情节跌宕起伏的小说，你会觉 得整个自己都被这小说吸引了，然后会觉得时间过得很快，不知不觉就几个小时过去了。等阅读完后，会感觉自己仍然沉浸在阅读这本小说的快乐之中。生活中多经 历些流体验，就会觉得更加幸福与快乐。</p>\n<p><strong>不要忽视预测和体验时生理、经济、社会等状况的不同。此时所欲未必是彼时所欲，己所欲未必是他人所欲。</strong> 我们一定遇上过这样的情况，当你饥肠辘辘时点菜时，通常点了一大堆菜。等到你吃得差不多 的时候，就会发现你已经吃不了这么多菜了。这就是你点菜时候的状态并不是你吃菜时候的状态了。另一个例子就是，如果让你的父母来选择你们的配偶，通常是以 贤淑为标准的，他们从来不会把性生活作为标准之一。因为在他们的年龄来看这种事，已经不再重要了。这也就是说自己想要的不一定是他人想要的东西。</p>\n<p>总的来说，幸福可以自己去把握的。对于一些网上报道的城市幸福指数排名，我们大可不必理会。幸福从来都是自己的事，正如，猫吃着鱼，狗吃着肉，奥特曼一直喜欢打怪兽。</p>\n<hr>\n<p>—《撬动幸福》   奚恺元</p>\n","source":"_posts/2010-09-03-0.md","raw":"---\r\ndate: 2010-09-03\r\nlayout: post\r\ntitle: 关于幸福\r\npermalink: '/2010/09-03-0.html'\r\ncategories:\r\n- 杂感\r\ntags:\r\n---\r\n\r\n\r\n幸福是什么？网上流行这样一句话：幸福就是猫吃鱼，狗吃肉，奥特曼打小怪兽。这虽是一句俏皮话，但是，为什么不是猫吃肉，奥特曼吃鱼，让狗去打小怪兽呢？ 当然，这么办的话，猫不会觉得幸福，狗也过得不自在，奥特曼更是不知道幸福为何物了。所以，幸福的定义只能是主观的，每个人的幸福并不相同。比如，我们的 朝鲜同胞们有一辆自行车就觉得很幸福，而我们有辆普桑为什么就没觉得有多少幸福。\r\n\r\n那么，怎么才能幸福呢？是拥有大量的财产，还是手握巨大的权力？这个问题，答案只有自己知道。这里，我们只能告诉你一点点幸福的秘诀。\r\n\r\n**尽量获取不容易情感适应的，且会带来快乐的外部刺激；尽量规避不容易情感适应的，且会带来不快的外部刺激。** 什么是情感适应呢？我们都会有这样的经历，当手伸入零度的冰水中时，会觉得异常冰冷与不 适应，但是随着时间的推移，我们渐渐觉得没有先前这么不适应了。这就是情感适应的因故。当然，有童鞋会说这不是生理上的适应嘛。事实上，导致情感适应的主 要原因包括生理适应，大脑对熟悉信息的模块化记忆，对于外部刺激注意力的转移以及对于事件结果的合理化解释。对于某件产生负向情感的事情，如将手伸入冰水 中，我们逐渐情感适应了，当然也不觉得这么难受了。相反，如果某件产生正向情感的事，比如说中的百万元的彩票，情感适应容易与否直接关系到快乐持续时间的 长短了。所以，对于能产生快乐的外部刺激，我们追求不容易情感适应的，如旅行等，而对于带来不快的外部刺激，我们则尽量避开不容易情感适应的，如失恋。\r\n\r\n**尽量花钱在单独消费时就可以感知其品质变化的产品或服务上，而不要花在只有在比较时才能感知相应变化的产品或服务上。** 举个例子，假如你想更换家中书房里的办公椅，因为这把椅子坐着不舒服，有种倾斜的感觉，所以想把它换成高档的办公椅。与此同时，你又想更换自己的数码相机，因为是几年前买的，虽然镜头和其他功能都让人满意，但却只有 800 万相素。而新品虽然在其他方面相差不大，但却有 1200 万相素。办公椅与相机价格相当，但是你只有购买其中一个，你经常在家里办公，也经常外出旅游摄影。你会如何选择呢？幸福学告诉你，应该选择办公椅。为什么呢？因为办公椅解决的是你的肌肉疲劳程度，而这点又是人体比较容易感知的，无须进行比较。相反，照片的相素从 800 万上升到 1200 万，只有在比较的情况下才能感知，一般人肉眼是无法将其分辨。所以，把钱花在容易感知其品质变化的产品或服务上才是正确的选择。\r\n\r\n**偶尔吃点苦能提高整体幸福水平，偶尔体验较为高档的享受都降低整体幸福水平，除非这些偶尔的体验被你视为非正常状态。** 如果你每天开车上班，可以每星期有那么一天去挤一次公交。这样的体验，能让你更能感受到开车上班的幸福感。正如有人说：忆苦思甜甜更甜。然而，偶尔体验较为高档的享受就不提倡了。如果你开的车是辆奇锐 QQ ，有个机会让你去免费试开宝马一个星期，你会把握这个机会吗？面对这样的机会，我们还是避而远之比较好。如果你去尝试了，等一个星期结束，你会发现你的奇锐 QQ 制动又差，方向盘又不舒适，总之是这有问题，那也有问题。然后，就会抱怨你的爱车有多么得差劲。其实，你大可不必这样，因为完全可以避免。当然，这里还有一种极端的情况，如果你这一辈子都买不起宝马，那么我建议去尝试吧，就好比刘姥姥游大观园而已。\r\n\r\n**学会创造流体验。** 所谓流体验，是指人们在进行某些活动时的忘我状态，此时人们完全被活动吸引，所有注意力 完全投注于活动中，并且觉得没有比活动本身更加重要的东西。我们生活中多多少少，有意无意地都经历过一些流体验。例如阅读一本情节跌宕起伏的小说，你会觉 得整个自己都被这小说吸引了，然后会觉得时间过得很快，不知不觉就几个小时过去了。等阅读完后，会感觉自己仍然沉浸在阅读这本小说的快乐之中。生活中多经 历些流体验，就会觉得更加幸福与快乐。\r\n\r\n**不要忽视预测和体验时生理、经济、社会等状况的不同。此时所欲未必是彼时所欲，己所欲未必是他人所欲。** 我们一定遇上过这样的情况，当你饥肠辘辘时点菜时，通常点了一大堆菜。等到你吃得差不多 的时候，就会发现你已经吃不了这么多菜了。这就是你点菜时候的状态并不是你吃菜时候的状态了。另一个例子就是，如果让你的父母来选择你们的配偶，通常是以 贤淑为标准的，他们从来不会把性生活作为标准之一。因为在他们的年龄来看这种事，已经不再重要了。这也就是说自己想要的不一定是他人想要的东西。\r\n\r\n总的来说，幸福可以自己去把握的。对于一些网上报道的城市幸福指数排名，我们大可不必理会。幸福从来都是自己的事，正如，猫吃着鱼，狗吃着肉，奥特曼一直喜欢打怪兽。\r\n\r\n------------------\r\n\r\n--《撬动幸福》   奚恺元","slug":"-2010-09-03-0-html","updated":1419146182000,"excerpt":"","_id":"ue990ozoqbifpfs9","comments":true,"photos":[],"link":""},{"date":1306598400000,"layout":"post","title":"重新审视这个世界","categories":["5uqjpmh62j3bpyf3"],"tags":[],"content":"<p>断断续续读完了《推理的迷宫》一书，这是一本难得的好书。看到书的副标题，“悖论，谜题，及知识的脆弱性”，这本书就完全吸引了我。</p>\n<p>第一章就让我这个基本是“悖论盲”的人为之一惊。“缸中之脑”，对，我可能真的是不存在的，只是实验室里的一颗大脑。我这颗大脑不停的接收各种实验师给我 的电信号刺激，让我觉得我活在现在这个世界上，早晨起床，中午吃饭……。当然，这个世界也有可能存在的，我并不只是一颗大脑。从小就接受神奇国度的应试教 育，基本没有接触过这样的知识熏陶，我感到很兴奋。</p>\n<p>当享受到“亨普尔的乌鸦”这章时，我突然觉得我所掌握的各种知识的脆弱性了。一直认为乌鸦嘛，当然是黑色的嘛，有不是黑色的乌鸦吗？但是，我们获得知识只 有两种方法，一种是归纳，一种是演绎。而“所有乌鸦都是黑色的”这个命题就是由归纳得来的。而归纳这个方法值得信任吗？谁能保证下一次发现的乌鸦不是红色 的呢？又或者不是蓝色的呢？以前接受教育都是老师说什么就是什么，“两点确定一条直线”就是“两点确定一条直线”，不许怀疑，这是公理。什么是公理，公理 就是大家公认的定理，不需要证明的。但是，为什么不怀疑“两点不能确定一条直线”呢？也许在我们这个世界是这样子的，但是谁能保证在宇宙的另外一个星球上 是“三点确定一条直线”呢？</p>\n<p>随着阅读的深入，我在享受这本书给我的快乐的同时，也越来越怀疑这个世界的存在性与我掌握的知识的正确性。我看到的“绿色”是真的绿色吗？还是我看到的其 实是“黑色”，而我把它称为“绿色”，你看到的其实是“白色”，而你把它也称为“绿色”。为什么要这么做呢？我们从小就被长辈教育这是“绿色”，而不是其 它颜色，于是这就是“绿色”。没有能保证我们看到的“绿色”都是相同的颜色。</p>\n<p>这个世界真的存在吗？可信吗？</p>\n","source":"_posts/2011-05-29-0.md","raw":"---\r\ndate: 2011-05-29\r\nlayout: post\r\ntitle: 重新审视这个世界\r\npermalink: '/2011/05-29-0.html'\r\ncategories:\r\n- 杂感\r\ntags:\r\n---\r\n\r\n\r\n断断续续读完了《推理的迷宫》一书，这是一本难得的好书。看到书的副标题，“悖论，谜题，及知识的脆弱性”，这本书就完全吸引了我。\r\n\r\n第一章就让我这个基本是“悖论盲”的人为之一惊。“缸中之脑”，对，我可能真的是不存在的，只是实验室里的一颗大脑。我这颗大脑不停的接收各种实验师给我 的电信号刺激，让我觉得我活在现在这个世界上，早晨起床，中午吃饭……。当然，这个世界也有可能存在的，我并不只是一颗大脑。从小就接受神奇国度的应试教 育，基本没有接触过这样的知识熏陶，我感到很兴奋。\r\n\r\n当享受到“亨普尔的乌鸦”这章时，我突然觉得我所掌握的各种知识的脆弱性了。一直认为乌鸦嘛，当然是黑色的嘛，有不是黑色的乌鸦吗？但是，我们获得知识只 有两种方法，一种是归纳，一种是演绎。而“所有乌鸦都是黑色的”这个命题就是由归纳得来的。而归纳这个方法值得信任吗？谁能保证下一次发现的乌鸦不是红色 的呢？又或者不是蓝色的呢？以前接受教育都是老师说什么就是什么，“两点确定一条直线”就是“两点确定一条直线”，不许怀疑，这是公理。什么是公理，公理 就是大家公认的定理，不需要证明的。但是，为什么不怀疑“两点不能确定一条直线”呢？也许在我们这个世界是这样子的，但是谁能保证在宇宙的另外一个星球上 是“三点确定一条直线”呢？\r\n\r\n随着阅读的深入，我在享受这本书给我的快乐的同时，也越来越怀疑这个世界的存在性与我掌握的知识的正确性。我看到的“绿色”是真的绿色吗？还是我看到的其 实是“黑色”，而我把它称为“绿色”，你看到的其实是“白色”，而你把它也称为“绿色”。为什么要这么做呢？我们从小就被长辈教育这是“绿色”，而不是其 它颜色，于是这就是“绿色”。没有能保证我们看到的“绿色”都是相同的颜色。\r\n\r\n这个世界真的存在吗？可信吗？\r\n","slug":"-2011-05-29-0-html","updated":1419146285000,"excerpt":"","_id":"oxgsy84gn3zugdc9","comments":true,"photos":[],"link":""},{"date":1307116800000,"layout":"post","title":"用代理类实现二组数组","categories":["hmzns96sockjtdsf"],"tags":["eyhtmoggscycl638","v05jjt7gz3zyzrsd"],"content":"<p> C++语言在数组的支持方面不强其他语言强劲，如FORTRAN、BASIC、甚至在COBOL中可以产生二维数组、三维数组，乃至于n维数组，但你能 C++中这么做吗？有同学不同意了，C++中可以产生维数组啊，int data[2][3]不是吗？但是，如果这样：</p>\n<pre><code><span class=\"keyword\">void</span> processInput(<span class=\"keyword\">int</span> dim1, <span class=\"keyword\">int</span> dim2)  \n{  \n     <span class=\"keyword\">int</span> data[dim1][dim2];  \n     ........  \n}\n</code></pre><p>还行吗？C++不允许！</p>\n<p>那么怎么办呢？《more effective c++》中Item 30有详细的介绍，但没有给出具体代码。本人实现了下:</p>\n<pre><code><span class=\"comment\">#include   </span>\n<span class=\"keyword\">using</span> namespace std;  \n<span class=\"keyword\">template</span>  \nclass <span class=\"type\">Array2D</span>{  \npublic:  \n    <span class=\"type\">Array2D</span>(<span class=\"type\">int</span> realDim1, <span class=\"type\">int</span> realDim2);  \n    ~<span class=\"type\">Array2D</span>();  \n    class <span class=\"type\">Array1D</span>{  \n    public:  \n        <span class=\"type\">Array1D</span>(){};  \n        <span class=\"type\">Array1D</span>(<span class=\"type\">int</span> realDim2);  \n        <span class=\"type\">Array1D</span>&amp; operator=(<span class=\"keyword\">const</span> <span class=\"type\">Array1D</span>&amp; lhs);  \n        ~<span class=\"type\">Array1D</span>();  \n        T&amp; operator[](<span class=\"type\">int</span> index);  \n        <span class=\"keyword\">const</span> T&amp; operator[](<span class=\"type\">int</span> index)<span class=\"keyword\">const</span>;  \n    private:  \n        T* dim2Data;  \n        <span class=\"type\">int</span> dim2;  \n    };  \n    <span class=\"type\">Array1D</span>&amp; operator[](<span class=\"type\">int</span> index);  \n    <span class=\"keyword\">const</span> <span class=\"type\">Array1D</span>&amp; operator[](<span class=\"type\">int</span> index)<span class=\"keyword\">const</span>;  \nprivate:  \n    <span class=\"type\">int</span> dim1;  \n    <span class=\"type\">Array1D</span>* dim1Data;  \n};  \n<span class=\"keyword\">template</span> \ntypename <span class=\"type\">Array2D</span>::<span class=\"type\">Array1D</span>&amp; <span class=\"type\">Array2D</span>::<span class=\"type\">Array1D</span>::operator=(<span class=\"keyword\">const</span> <span class=\"type\">Array1D</span>&amp; lhs)  \n{  \n    dim2 = lhs.dim2;  \n    dim2Data = new T[dim2];  \n    <span class=\"keyword\">if</span>(dim2Data == <span class=\"type\">NULL</span>)  \n        cout &lt;&lt; <span class=\"string\">\"There is no memory!\"</span> &lt;&lt; endl;  \n    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; dim2; ++i)  \n        dim2Data[i] = lhs.dim2Data[i];  \n    <span class=\"keyword\">return</span> *this;  \n}  \n<span class=\"keyword\">template</span> \n<span class=\"type\">Array2D</span>::<span class=\"type\">Array1D</span>::<span class=\"type\">Array1D</span>(<span class=\"type\">int</span> realDim2)  \n:dim2(realDim2)  \n{  \n    dim2Data = new T[dim2];  \n    <span class=\"keyword\">if</span>(dim2Data == <span class=\"type\">NULL</span>)  \n        cout &lt;&lt; <span class=\"string\">\"There is no memory!\"</span> &lt;&lt; endl;  \n}  \n<span class=\"keyword\">template</span> \n<span class=\"type\">Array2D</span>::<span class=\"type\">Array2D</span>(<span class=\"type\">int</span> realDim1, <span class=\"type\">int</span> realDim2)  \n:dim1(realDim1)  \n{  \n    typedef typename <span class=\"type\">Array2D</span>::<span class=\"type\">Array1D</span> myType;  \n    dim1Data = new myType[dim1];  \n    <span class=\"keyword\">if</span>(dim1Data == <span class=\"type\">NULL</span>)  \n        cout &lt;&lt; <span class=\"string\">\"There is no memory!\"</span> &lt;&lt; endl;  \n    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; dim1; ++i)  \n        dim1Data[i] = myType(realDim2); // <span class=\"keyword\">using</span> operator=!  \n}  \n<span class=\"keyword\">template</span> \n<span class=\"type\">Array2D</span>::<span class=\"type\">Array1D</span>::~<span class=\"type\">Array1D</span>()  \n{  \n    delete []dim2Data;  \n}  \n<span class=\"keyword\">template</span> \n<span class=\"type\">Array2D</span>::~<span class=\"type\">Array2D</span>()  \n{  \n    delete []dim1Data;  \n}  \n<span class=\"keyword\">template</span> \nT&amp; <span class=\"type\">Array2D</span>::<span class=\"type\">Array1D</span>::operator [](<span class=\"type\">int</span> index)  \n{  \n    <span class=\"keyword\">return</span> dim2Data[index];  \n}  \n<span class=\"keyword\">template</span> \n<span class=\"keyword\">const</span> T&amp; <span class=\"type\">Array2D</span>::<span class=\"type\">Array1D</span>::operator [](<span class=\"type\">int</span> index)<span class=\"keyword\">const</span> \n{  \n    <span class=\"keyword\">return</span> dim2Data[index];  \n}  \n<span class=\"keyword\">template</span> \ntypename <span class=\"type\">Array2D</span>::<span class=\"type\">Array1D</span>&amp; <span class=\"type\">Array2D</span>::operator [](<span class=\"type\">int</span> index)  \n{  \n    <span class=\"keyword\">return</span> dim1Data[index];  \n}  \n<span class=\"keyword\">template</span> \n<span class=\"keyword\">const</span> typename <span class=\"type\">Array2D</span>::<span class=\"type\">Array1D</span>&amp; <span class=\"type\">Array2D</span>::operator[](<span class=\"type\">int</span> index)<span class=\"keyword\">const</span> \n{  \n    <span class=\"keyword\">return</span> dim1Data[index];  \n}  \n<span class=\"type\">int</span> main()  \n{  \n    <span class=\"type\">Array2D</span> data(<span class=\"number\">2</span>, <span class=\"number\">3</span>);  \n    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">2</span>; ++i)  \n        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">3</span>; ++j)  \n            data[i][j] = j;  \n    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">2</span>; ++i)  \n        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">3</span>; ++j)  \n            cout &lt;&lt; data[i][j] &lt;&lt; endl;  \n    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;  \n}\n</code></pre><p>当然，其中也遇到了一些困难，现整理如下：</p>\n<p><strong>FIRST</strong>，代码第27行中，typename Array2D<t>::Array1D&amp;，关键字typename有什么作用？</t></p>\n<p>typename有双重意义，具体参见《effective c++》 Item 42。这里只由于其第二重意义。观察Array2D<t>::Array1D，其类型取决于template参数T。template内出现 的名称如果相依于某个template参数，称之为从属名称。如果从属名称在class内呈嵌套状，则称之为嵌套从属名称。而嵌套从属名称有可能导致解析 困难，所以必须在其前加上关键字typename表示其是一个类型。</t></p>\n<p><strong>SECOND</strong>,代码50~55读者是否感到有些奇怪。为什么不写成dim1Data = new myType[dim1](realDim2);呢？事实上，该语句是不能通过编译的。因为这不符合C++的语法。那么只能用点小聪明代替了。这里还要注 意就是代码行62调用的是类赋值函数，刚开始笔者也在此处吃了亏。</p>\n<p>总之，学习C++之路还是很漫长啊。</p>\n","source":"_posts/2011-06-04-0.md","raw":"---\r\ndate: 2011-06-04\r\nlayout: post\r\ntitle: 用代理类实现二组数组\r\npermalink: '/2011/06-04-0.html'\r\ncategories:\r\n- c/c++\r\ntags:\r\n- 设计\r\n- 面向对象\r\n---\r\n\r\n C++语言在数组的支持方面不强其他语言强劲，如FORTRAN、BASIC、甚至在COBOL中可以产生二维数组、三维数组，乃至于n维数组，但你能 C++中这么做吗？有同学不同意了，C++中可以产生维数组啊，int data[2][3]不是吗？但是，如果这样：\r\n\r\n\tvoid processInput(int dim1, int dim2)  \r\n\t{  \r\n\t     int data[dim1][dim2];  \r\n\t     ........  \r\n\t}\r\n\r\n还行吗？C++不允许！\r\n\r\n那么怎么办呢？《more effective c++》中Item 30有详细的介绍，但没有给出具体代码。本人实现了下:\r\n\r\n\t#include   \r\n\tusing namespace std;  \r\n\ttemplate  \r\n\tclass Array2D{  \r\n\tpublic:  \r\n\t    Array2D(int realDim1, int realDim2);  \r\n\t    ~Array2D();  \r\n\t    class Array1D{  \r\n\t    public:  \r\n\t        Array1D(){};  \r\n\t        Array1D(int realDim2);  \r\n\t        Array1D& operator=(const Array1D& lhs);  \r\n\t        ~Array1D();  \r\n\t        T& operator[](int index);  \r\n\t        const T& operator[](int index)const;  \r\n\t    private:  \r\n\t        T* dim2Data;  \r\n\t        int dim2;  \r\n\t    };  \r\n\t    Array1D& operator[](int index);  \r\n\t    const Array1D& operator[](int index)const;  \r\n\tprivate:  \r\n\t    int dim1;  \r\n\t    Array1D* dim1Data;  \r\n\t};  \r\n\ttemplate \r\n\ttypename Array2D::Array1D& Array2D::Array1D::operator=(const Array1D& lhs)  \r\n\t{  \r\n\t    dim2 = lhs.dim2;  \r\n\t    dim2Data = new T[dim2];  \r\n\t    if(dim2Data == NULL)  \r\n\t        cout << \"There is no memory!\" << endl;  \r\n\t    for(int i = 0; i < dim2; ++i)  \r\n\t        dim2Data[i] = lhs.dim2Data[i];  \r\n\t    return *this;  \r\n\t}  \r\n\ttemplate \r\n\tArray2D::Array1D::Array1D(int realDim2)  \r\n\t:dim2(realDim2)  \r\n\t{  \r\n\t    dim2Data = new T[dim2];  \r\n\t    if(dim2Data == NULL)  \r\n\t        cout << \"There is no memory!\" << endl;  \r\n\t}  \r\n\ttemplate \r\n\tArray2D::Array2D(int realDim1, int realDim2)  \r\n\t:dim1(realDim1)  \r\n\t{  \r\n\t    typedef typename Array2D::Array1D myType;  \r\n\t    dim1Data = new myType[dim1];  \r\n\t    if(dim1Data == NULL)  \r\n\t        cout << \"There is no memory!\" << endl;  \r\n\t    for(int i = 0; i < dim1; ++i)  \r\n\t        dim1Data[i] = myType(realDim2); // using operator=!  \r\n\t}  \r\n\ttemplate \r\n\tArray2D::Array1D::~Array1D()  \r\n\t{  \r\n\t    delete []dim2Data;  \r\n\t}  \r\n\ttemplate \r\n\tArray2D::~Array2D()  \r\n\t{  \r\n\t    delete []dim1Data;  \r\n\t}  \r\n\ttemplate \r\n\tT& Array2D::Array1D::operator [](int index)  \r\n\t{  \r\n\t    return dim2Data[index];  \r\n\t}  \r\n\ttemplate \r\n\tconst T& Array2D::Array1D::operator [](int index)const \r\n\t{  \r\n\t    return dim2Data[index];  \r\n\t}  \r\n\ttemplate \r\n\ttypename Array2D::Array1D& Array2D::operator [](int index)  \r\n\t{  \r\n\t    return dim1Data[index];  \r\n\t}  \r\n\ttemplate \r\n\tconst typename Array2D::Array1D& Array2D::operator[](int index)const \r\n\t{  \r\n\t    return dim1Data[index];  \r\n\t}  \r\n\tint main()  \r\n\t{  \r\n\t    Array2D data(2, 3);  \r\n\t    for(int i = 0; i < 2; ++i)  \r\n\t        for(int j = 0; j < 3; ++j)  \r\n\t            data[i][j] = j;  \r\n\t    for(int i = 0; i < 2; ++i)  \r\n\t        for(int j = 0; j < 3; ++j)  \r\n\t            cout << data[i][j] << endl;  \r\n\t    return 0;  \r\n\t}\r\n\r\n当然，其中也遇到了一些困难，现整理如下：\r\n\r\n**FIRST**，代码第27行中，typename Array2D<T>::Array1D&，关键字typename有什么作用？\r\n\r\ntypename有双重意义，具体参见《effective c++》 Item 42。这里只由于其第二重意义。观察Array2D<T>::Array1D，其类型取决于template参数T。template内出现 的名称如果相依于某个template参数，称之为从属名称。如果从属名称在class内呈嵌套状，则称之为嵌套从属名称。而嵌套从属名称有可能导致解析 困难，所以必须在其前加上关键字typename表示其是一个类型。\r\n\r\n**SECOND**,代码50~55读者是否感到有些奇怪。为什么不写成dim1Data = new myType\\[dim1\\](realDim2);呢？事实上，该语句是不能通过编译的。因为这不符合C++的语法。那么只能用点小聪明代替了。这里还要注 意就是代码行62调用的是类赋值函数，刚开始笔者也在此处吃了亏。\r\n\r\n总之，学习C++之路还是很漫长啊。\r\n","slug":"-2011-06-04-0-html","updated":1422085782000,"excerpt":"","_id":"oojrioc85lvie065","comments":true,"photos":[],"link":""},{"date":1318694400000,"layout":"post","title":"编写高质量C语言代码 -- Assert Yourself","categories":["hmzns96sockjtdsf"],"tags":["eyhtmoggscycl638","6ttj1beno39qbqo2"],"content":"<p>C语言中assert功能强大，人称“断言”，如语句assert ( expression )，即断言expression始终为true, 若为false，则程序运行失败。</p>\n<p>但是，assert ( expression ) 看似function，但它其实是macro, 而且只是一个debug-only的宏，即只有在定义DEBUG宏的情况下才有用。但是它却是一个强大的高度工具，而且也是编码bug-free的code的有力助手。</p>\n<p>举个例子，有以下这样一个function:</p>\n<p>example 1:</p>\n<pre><code><span class=\"comment\">/* memcpy -- copy a nonoverlapping memory block */</span>\n<span class=\"keyword\">void</span>* memcpy(<span class=\"keyword\">void</span>* pvTo, <span class=\"keyword\">void</span>* pvFrom, size_t <span class=\"keyword\">size</span>)\n{\n    <span class=\"keyword\">byte</span>* pbTo = (<span class=\"keyword\">byte</span>*)pvTo;\n    <span class=\"keyword\">byte</span>* pbFrom = (<span class=\"keyword\">byte</span>*)pvFrom;\n\n    <span class=\"keyword\">while</span>(<span class=\"keyword\">size</span>-- &gt; <span class=\"number\">0</span>)\n        *pbTo = *pvFrom;\n\n    <span class=\"keyword\">return</span>(pvTo);\n}\n</code></pre><p>有经验的programmer一看就知道这是一个有bug的function。如果如此应用：</p>\n<p>1.</p>\n<pre><code>memcpy(<span class=\"keyword\">NULL</span>, pvFrom, <span class=\"keyword\">size</span>);\n</code></pre><p>2.</p>\n<pre><code>memcpy(pvTo, <span class=\"keyword\">NULL</span>, <span class=\"keyword\">size</span>);\n</code></pre><p>就会出现问题。NULL是0，而对0地址解引用会出现什么事？SO BAD！</p>\n<p>那么怎么办呢？在对pbTo与pvFrom解引用之前进行指针检查，进行如下改变：</p>\n<p>example 2 :</p>\n<pre><code><span class=\"comment\">/* memcpy -- copy a nonoverlapping memory block */</span>\n<span class=\"keyword\">void</span>* memcpy(<span class=\"keyword\">void</span>* pvTo, <span class=\"keyword\">void</span>* pvFrom, size_t <span class=\"keyword\">size</span>)\n{\n    <span class=\"keyword\">byte</span>* pbTo = (<span class=\"keyword\">byte</span>*)pvTo;\n    <span class=\"keyword\">byte</span>* pbFrom = (<span class=\"keyword\">byte</span>*)pvFrom;\n\n    <span class=\"keyword\">if</span>(pvTo == <span class=\"keyword\">NULL</span> || pvFrom == <span class=\"keyword\">NULL</span>){\n        fprintf(stderr, <span class=\"string\">\"Bad args in memcpy\\n\"</span>);\n        abort();\n    }\n\n    <span class=\"keyword\">while</span>(<span class=\"keyword\">size</span>-- &gt; <span class=\"number\">0</span>)\n        *pbTo++ = *pvFrom++;\n\n    <span class=\"keyword\">return</span>(pvTo);\n}\n</code></pre><p>OK， Perfect ！但是身为一个持有完美主义的coder，似乎这样的代码不是那么一回事。有人教导我们，编写代码的时候要有两个版本：Debug Version and Ship Version。我们新加的语句好像是Debug Version里的吧，怎么能让它出现在Ship Version里呢？于是乎：</p>\n<p>example 3:</p>\n<pre><code><span class=\"comment\">/* memcpy -- copy a nonoverlapping memory block */</span>\n<span class=\"keyword\">void</span>* memcpy(<span class=\"keyword\">void</span>* pvTo, <span class=\"keyword\">void</span>* pvFrom, size_t <span class=\"keyword\">size</span>)\n{\n    <span class=\"keyword\">byte</span>* pbTo = (<span class=\"keyword\">byte</span>*)pvTo;\n    <span class=\"keyword\">byte</span>* pbFrom = (<span class=\"keyword\">byte</span>*)pvFrom;\n\n#ifdef DEBUG\n    <span class=\"keyword\">if</span>(pvTo == <span class=\"keyword\">NULL</span> || pvFrom == <span class=\"keyword\">NULL</span>){\n         fprintf(stderr, <span class=\"string\">\"Bad args in memcpy\\n\"</span>);\n         abort();\n    }\n#endif\n\n    <span class=\"keyword\">while</span>(<span class=\"keyword\">size</span>-- &gt; <span class=\"number\">0</span>)\n        *pbTo++ = *pvFrom++;\n\n    <span class=\"keyword\">return</span>(pvTo);\n}\n</code></pre><p>这下没问题了吧？嗯，我们的主角assert呢？怎么没有？别急，马上就来，有句话不是说：英雄总是最后登场的嘛。注意我们加的Debug语句不就是在测试pvTo与pvFrom不为NULL吗？这不就是assert的功能！So:</p>\n<p>example 4:</p>\n<pre><code><span class=\"comment\">/* memcpy -- copy a nonoverlapping memory block */</span>\n<span class=\"keyword\">void</span>* memcpy(<span class=\"keyword\">void</span>* pvTo, <span class=\"keyword\">void</span>* pvFrom, size_t <span class=\"keyword\">size</span>)\n{\n    <span class=\"keyword\">byte</span>* pbTo = (<span class=\"keyword\">byte</span>*)pvTo;\n    <span class=\"keyword\">byte</span>* pbFrom = (<span class=\"keyword\">byte</span>*)pvFrom;\n\n    assert(pvTo != <span class=\"keyword\">NULL</span> &amp;&amp; pvFrom != <span class=\"keyword\">NULL</span>);\n\n    <span class=\"keyword\">while</span>(<span class=\"keyword\">size</span>-- &gt; <span class=\"number\">0</span>)\n        *pbTo++ = *pvFrom++;\n    <span class=\"keyword\">return</span>(pvTo);\n}\n</code></pre><p>嗯，好像可以了。但是~，如果pvTo与pvFrom指向的内存块是overlapped的呢？oh, no！所以还等断言pvTo与pvFrom是没有overlapped的。最终版登场：</p>\n<p>example5:</p>\n<pre><code><span class=\"comment\">/* memcpy -- copy a nonoverlapping memory block */</span>\n<span class=\"keyword\">void</span>* memcpy(<span class=\"keyword\">void</span>* pvTo, <span class=\"keyword\">void</span>* pvFrom, size_t <span class=\"keyword\">size</span>)\n{\n    <span class=\"keyword\">byte</span>* pbTo = (<span class=\"keyword\">byte</span>*)pvTo;\n    <span class=\"keyword\">byte</span>* pbFrom = (<span class=\"keyword\">byte</span>*)pvFrom;\n\n    assert(pvTo != <span class=\"keyword\">NULL</span> &amp;&amp; pvFrom != <span class=\"keyword\">NULL</span>);\n    assert(pvTo &gt;= pvFrom + <span class=\"keyword\">size</span> || pvFrom &gt;= pbTo + <span class=\"keyword\">size</span>);\n\n    <span class=\"keyword\">while</span>(<span class=\"keyword\">size</span>-- &gt; <span class=\"number\">0</span>)\n        *pbTo++ = *pvFrom++;\n    <span class=\"keyword\">return</span>(pvTo);\n}\n</code></pre><p>小结：请使用assert 来code您的程序！</p>\n","source":"_posts/2011-10-06-0.md","raw":"---\r\ndate: 2011-10-16\r\nlayout: post\r\ntitle: 编写高质量C语言代码 -- Assert Yourself\r\npermalink: '/2011/10-16-0.html'\r\ncategories:\r\n- c/c++\r\ntags:\r\n- 设计\r\n- 代码质量\r\n---\r\n\r\n\r\nC语言中assert功能强大，人称“断言”，如语句assert ( expression )，即断言expression始终为true, 若为false，则程序运行失败。\r\n\r\n但是，assert ( expression ) 看似function，但它其实是macro, 而且只是一个debug-only的宏，即只有在定义DEBUG宏的情况下才有用。但是它却是一个强大的高度工具，而且也是编码bug-free的code的有力助手。\r\n\r\n举个例子，有以下这样一个function:\r\n\r\nexample 1:\r\n\r\n\t/* memcpy -- copy a nonoverlapping memory block */\r\n\tvoid* memcpy(void* pvTo, void* pvFrom, size_t size)\r\n\t{\r\n\t    byte* pbTo = (byte*)pvTo;\r\n\t    byte* pbFrom = (byte*)pvFrom;\r\n\t \r\n\t    while(size-- > 0)\r\n\t        *pbTo = *pvFrom;\r\n\t \r\n\t    return(pvTo);\r\n\t}\r\n\r\n有经验的programmer一看就知道这是一个有bug的function。如果如此应用：\r\n\r\n1.\r\n\r\n\tmemcpy(NULL, pvFrom, size);\r\n\r\n2.\r\n\r\n\tmemcpy(pvTo, NULL, size);\r\n\r\n就会出现问题。NULL是0，而对0地址解引用会出现什么事？SO BAD！\r\n\r\n那么怎么办呢？在对pbTo与pvFrom解引用之前进行指针检查，进行如下改变：\r\n\r\nexample 2 :\r\n\r\n\t/* memcpy -- copy a nonoverlapping memory block */\r\n\tvoid* memcpy(void* pvTo, void* pvFrom, size_t size)\r\n\t{\r\n\t    byte* pbTo = (byte*)pvTo;\r\n\t    byte* pbFrom = (byte*)pvFrom;\r\n\t \r\n\t    if(pvTo == NULL || pvFrom == NULL){\r\n\t        fprintf(stderr, \"Bad args in memcpy\\n\");\r\n\t        abort();\r\n\t    }\r\n\t \r\n\t    while(size-- > 0)\r\n\t        *pbTo++ = *pvFrom++;\r\n\t \r\n\t    return(pvTo);\r\n\t}\r\n\r\nOK， Perfect ！但是身为一个持有完美主义的coder，似乎这样的代码不是那么一回事。有人教导我们，编写代码的时候要有两个版本：Debug Version and Ship Version。我们新加的语句好像是Debug Version里的吧，怎么能让它出现在Ship Version里呢？于是乎：\r\n\r\nexample 3:\r\n\r\n\t/* memcpy -- copy a nonoverlapping memory block */\r\n\tvoid* memcpy(void* pvTo, void* pvFrom, size_t size)\r\n\t{\r\n\t    byte* pbTo = (byte*)pvTo;\r\n\t    byte* pbFrom = (byte*)pvFrom;\r\n\t \r\n\t#ifdef DEBUG\r\n\t    if(pvTo == NULL || pvFrom == NULL){\r\n\t         fprintf(stderr, \"Bad args in memcpy\\n\");\r\n\t         abort();\r\n\t    }\r\n\t#endif\r\n\t \r\n\t    while(size-- > 0)\r\n\t        *pbTo++ = *pvFrom++;\r\n\t \r\n\t    return(pvTo);\r\n\t}\r\n\r\n这下没问题了吧？嗯，我们的主角assert呢？怎么没有？别急，马上就来，有句话不是说：英雄总是最后登场的嘛。注意我们加的Debug语句不就是在测试pvTo与pvFrom不为NULL吗？这不就是assert的功能！So:\r\n\r\nexample 4:\r\n\r\n\t/* memcpy -- copy a nonoverlapping memory block */\r\n\tvoid* memcpy(void* pvTo, void* pvFrom, size_t size)\r\n\t{\r\n\t    byte* pbTo = (byte*)pvTo;\r\n\t    byte* pbFrom = (byte*)pvFrom;\r\n\t \r\n\t    assert(pvTo != NULL && pvFrom != NULL);\r\n\t \r\n\t    while(size-- > 0)\r\n\t        *pbTo++ = *pvFrom++;\r\n\t    return(pvTo);\r\n\t}\r\n\r\n嗯，好像可以了。但是~，如果pvTo与pvFrom指向的内存块是overlapped的呢？oh, no！所以还等断言pvTo与pvFrom是没有overlapped的。最终版登场：\r\n\r\nexample5:\r\n\r\n\t/* memcpy -- copy a nonoverlapping memory block */\r\n\tvoid* memcpy(void* pvTo, void* pvFrom, size_t size)\r\n\t{\r\n\t    byte* pbTo = (byte*)pvTo;\r\n\t    byte* pbFrom = (byte*)pvFrom;\r\n\t \r\n\t    assert(pvTo != NULL && pvFrom != NULL);\r\n\t    assert(pvTo >= pvFrom + size || pvFrom >= pbTo + size);\r\n\t \r\n\t    while(size-- > 0)\r\n\t        *pbTo++ = *pvFrom++;\r\n\t    return(pvTo);\r\n\t}\r\n\t\r\n小结：请使用assert 来code您的程序！","slug":"-2011-10-16-0-html","updated":1419145470000,"excerpt":"","_id":"74tmv6rjwspbfthv","comments":true,"photos":[],"link":""},{"date":1317916800000,"layout":"post","title":"编写高质量C语言代码 -- API设计","categories":["hmzns96sockjtdsf"],"tags":["eyhtmoggscycl638","6ttj1beno39qbqo2"],"content":"<p>首先我们先来看一个程序：</p>\n<pre><code><span class=\"keyword\">char</span>* strdup(<span class=\"keyword\">char</span>* <span class=\"keyword\">str</span>)\n{\n    <span class=\"keyword\">char</span>* strNew;\n\n    strNew = (<span class=\"keyword\">char</span>*)malloc(strlen(<span class=\"keyword\">str</span>) + <span class=\"number\">1</span>);\n    strcpy(strNew, <span class=\"keyword\">str</span>);\n    <span class=\"keyword\">return</span>(strNew);\n}\n</code></pre><p>上面这个程序会发生什么情况？如果malloc失败，strNew为NULL，oh, no！这个malloc也太难用了吧，老是忘记要判断返回值是否为NULL。没错，但这不是你的错，是malloc的错。为什么malloc函数返回值既 可能是新分配的地址，又可能是NULL，即表示malloc出错呢？如果malloc函数改成如下：</p>\n<pre><code><span class=\"type\">bool</span> malloc(<span class=\"type\">void</span>* <span class=\"keyword\">ptr</span>, size_t size);\n</code></pre><p>ptr为指向新分配内存的指针，size为新分配内存的大小，返回值为malloc成功与否。若是这样的malloc，你会用错吗？</p>\n<p>还记得那万恶的getchar函数吗？对，它的原型是：</p>\n<pre><code><span class=\"keyword\">int</span> <span class=\"built_in\">getchar</span>();\n</code></pre><p>为什么是int，而不是char呢？坑爹呢？有木有！有木有啊！无数次错误的用成：</p>\n<pre><code>char c;  \n\nc = getchar();  \n<span class=\"keyword\">if</span>(c == EOF)  \n    <span class=\"keyword\">...</span>\n</code></pre><p>要是有更好的函数，鬼才愿意用这个函数！若是这样的原型：</p>\n<pre><code><span class=\"keyword\">bool</span> getchar(<span class=\"keyword\">char</span>* c);\n</code></pre><p>整个世界和谐了。<strong>Don’t mix error and other special-purpose values into your outputs of interfaces.</strong></p>\n<p>这不是最坑爹的，且看下面的BOSS级函数：</p>\n<pre><code><span class=\"keyword\">void</span>* realloc(<span class=\"keyword\">void</span>* pv, size_t <span class=\"keyword\">size</span>);\n</code></pre><p>在C library manual中有这样几句话（译）：</p>\n<ol>\n<li>如果pv为NULL， size不为0，则此函数相当于malloc(size);</li>\n<li>如果size为0， pv不为NULL， 则此函数相当于free();</li>\n<li>如果pv为NULL，size为0，则未定义。</li>\n</ol>\n<p>这怎么回事？这明明是realloc函数啊，怎么又出来malloc和free函数了。如果realloc能完成malloc和free函数的功 能，后面两个函数累赘了吧？还有，如果realloc失败，realloc返回的将是NULL。这又在坑爹啊，我多么想这么用啊：</p>\n<pre><code><span class=\"keyword\">ptr</span> = realloc(<span class=\"keyword\">ptr</span>, newSize)\n</code></pre><p>发现ptr为NULL，不是吧，内存泄露了（ptr如果是ptr所指内存的唯一取的方法，那么您将永远失去您对那块内存的控制）。</p>\n<p>如果realloc不是这样的万能，我们的生活会不会更和谐？<strong>Don’t write multipurpose functions. Remember K.I.S.S..</strong></p>\n<p>当然，作为一般性的考试题，总会有附加题的，请看题：</p>\n<pre><code><span class=\"function\">fseek</span>(fpDocument, offset, 1);\n</code></pre><p>这不是将fpDocument文件指针定位嘛，有问题？请问，定位在哪？等等，我得去看下fseek函数的说明。。。。N分钟过后。。。。</p>\n<p>靠，如果是这样：</p>\n<pre><code><span class=\"function\">fseek</span>(fpDocument, offset, SEEK_CUR);\n</code></pre><p>有需要去查fseek函数的说明吗？万恶的bool型参数请参见<a href=\"http://blog.csdn.net/jay1002008/article/details/6761575\" target=\"_blank\" rel=\"external\">博文</a>。Don’t use magic numbers and boolean arguments.</p>\n<p>小结：良好的API设计将是您编写bug_free代码的福音，请投入她的怀抱，感受她带来的好处吧~</p>\n","source":"_posts/2011-10-07-0.md","raw":"---\r\ndate: 2011-10-07\r\nlayout: post\r\ntitle: 编写高质量C语言代码 -- API设计\r\npermalink: '/2011/10-07-0.html'\r\ncategories:\r\n- c/c++\r\ntags:\r\n- 设计\r\n- 代码质量\r\n---\r\n\r\n\r\n首先我们先来看一个程序：\r\n\r\n\tchar* strdup(char* str)\r\n\t{\r\n\t    char* strNew;\r\n\t \r\n\t    strNew = (char*)malloc(strlen(str) + 1);\r\n\t    strcpy(strNew, str);\r\n\t    return(strNew);\r\n\t}\r\n\r\n上面这个程序会发生什么情况？如果malloc失败，strNew为NULL，oh, no！这个malloc也太难用了吧，老是忘记要判断返回值是否为NULL。没错，但这不是你的错，是malloc的错。为什么malloc函数返回值既 可能是新分配的地址，又可能是NULL，即表示malloc出错呢？如果malloc函数改成如下：\r\n\r\n\tbool malloc(void* ptr, size_t size);\r\n\r\nptr为指向新分配内存的指针，size为新分配内存的大小，返回值为malloc成功与否。若是这样的malloc，你会用错吗？\r\n\r\n还记得那万恶的getchar函数吗？对，它的原型是：\r\n\r\n\tint getchar();\r\n\r\n为什么是int，而不是char呢？坑爹呢？有木有！有木有啊！无数次错误的用成：\r\n\r\n\tchar c;  \r\n\t \r\n\tc = getchar();  \r\n\tif(c == EOF)  \r\n\t    ...\r\n\r\n要是有更好的函数，鬼才愿意用这个函数！若是这样的原型：\r\n\r\n\tbool getchar(char* c);\r\n\r\n整个世界和谐了。**Don’t mix error and other special-purpose values into your outputs of interfaces.**\r\n\r\n这不是最坑爹的，且看下面的BOSS级函数：\r\n\r\n\tvoid* realloc(void* pv, size_t size);\r\n\r\n在C library manual中有这样几句话（译）：\r\n\r\n1. 如果pv为NULL， size不为0，则此函数相当于malloc(size);\r\n2. 如果size为0， pv不为NULL， 则此函数相当于free();\r\n3. 如果pv为NULL，size为0，则未定义。\r\n\r\n这怎么回事？这明明是realloc函数啊，怎么又出来malloc和free函数了。如果realloc能完成malloc和free函数的功 能，后面两个函数累赘了吧？还有，如果realloc失败，realloc返回的将是NULL。这又在坑爹啊，我多么想这么用啊：\r\n\r\n\tptr = realloc(ptr, newSize)\r\n\r\n发现ptr为NULL，不是吧，内存泄露了（ptr如果是ptr所指内存的唯一取的方法，那么您将永远失去您对那块内存的控制）。\r\n\r\n如果realloc不是这样的万能，我们的生活会不会更和谐？**Don’t write multipurpose functions. Remember K.I.S.S..**\r\n\r\n当然，作为一般性的考试题，总会有附加题的，请看题：\r\n\r\n\tfseek(fpDocument, offset, 1);\r\n\r\n这不是将fpDocument文件指针定位嘛，有问题？请问，定位在哪？等等，我得去看下fseek函数的说明。。。。N分钟过后。。。。\r\n\r\n靠，如果是这样：\r\n\r\n\tfseek(fpDocument, offset, SEEK_CUR);\r\n\r\n有需要去查fseek函数的说明吗？万恶的bool型参数请参见[博文](http://blog.csdn.net/jay1002008/article/details/6761575)。Don’t use magic numbers and boolean arguments.\r\n\r\n小结：良好的API设计将是您编写bug_free代码的福音，请投入她的怀抱，感受她带来的好处吧~","slug":"-2011-10-07-0-html","updated":1419145370000,"excerpt":"","_id":"dbsdar2k0vjhghok","comments":true,"photos":[],"link":""},{"date":1318694400000,"layout":"post","title":"一个N个整数序列取M个数，使其概率相同问题","categories":["8jwkgptl4juxqcvd"],"tags":["t5iizbepdikhme90"],"content":"<p>这是今天上午在同济笔试百度的题目，当时没做出来，那个郁闷，现把思路放在此处纪念已逝的笔试。</p>\n<p>原题大概是这样的：一个服务器一天内会收到很多request，但是服务器只能存放m个request，试设计一种算法，使得在时时的reqest中选择m个保存，并保证最后各个request被选中的概率为大致相同。记住，不到最后，不知道request的总数n.</p>\n<p>其实，这个题目可以这样解：</p>\n<p>前m个request依次放入服务器中，当第m+1个来临时，以m/(m+1)的概率选中，并在已保存的m个request中等概率选择一个替换之。当第m+2个来临时，以</p>\n<p>m/(m+2)的概率选中，并在已保存的m个request中等概率选择一个替换之。 依次类推，第N个request以m/N的概率被选择，并在已保存的m个request中等概率选择一个替换之。最终每个request被选择的概率为m/n.</p>\n<p>证明如下(数学归纳法）：</p>\n<p>当n=m+1时，第m+1选中的概率为m/(m+1)，而第一个被选中的概率为：1/(m+1) + m/(m+1) * (m-1)/m = m/(m+1);</p>\n<p>假设当n = N时，每个request被选择的概率为m/N;</p>\n<p>现证明当n = N+1时，每个request被选择的概率为m / (N+1).</p>\n<p>第N+1个被选中的概率当然为m/(N+1)，而第一个request被选择的概率为：m/N <em> ( (N+1-m)/(N+1) + m/(N+1) </em> (m-1)/m = m / (N+1)；其余request被选择的概率也一样，得证当n = N+1时，每个request被选择的概率为m / (N+1)。</p>\n<p>综上得，第方法可以实现最最终每个request被选择的为m/n.</p>\n","source":"_posts/2011-10-16-0.md","raw":"---\r\ndate: 2011-10-16\r\nlayout: post\r\ntitle: 一个N个整数序列取M个数，使其概率相同问题\r\npermalink: '/2011/10-16-0.html'\r\ncategories:\r\n- 算法\r\ntags:\r\n- 面试题\r\n---\r\n\r\n这是今天上午在同济笔试百度的题目，当时没做出来，那个郁闷，现把思路放在此处纪念已逝的笔试。\r\n\r\n原题大概是这样的：一个服务器一天内会收到很多request，但是服务器只能存放m个request，试设计一种算法，使得在时时的reqest中选择m个保存，并保证最后各个request被选中的概率为大致相同。记住，不到最后，不知道request的总数n.\r\n\r\n其实，这个题目可以这样解：\r\n\r\n前m个request依次放入服务器中，当第m+1个来临时，以m/(m+1)的概率选中，并在已保存的m个request中等概率选择一个替换之。当第m+2个来临时，以\r\n\r\nm/(m+2)的概率选中，并在已保存的m个request中等概率选择一个替换之。 依次类推，第N个request以m/N的概率被选择，并在已保存的m个request中等概率选择一个替换之。最终每个request被选择的概率为m/n.\r\n\r\n证明如下(数学归纳法）：\r\n\r\n当n=m+1时，第m+1选中的概率为m/(m+1)，而第一个被选中的概率为：1/(m+1) + m/(m+1) * (m-1)/m = m/(m+1);\r\n\r\n假设当n = N时，每个request被选择的概率为m/N;\r\n\r\n现证明当n = N+1时，每个request被选择的概率为m / (N+1).\r\n\r\n第N+1个被选中的概率当然为m/(N+1)，而第一个request被选择的概率为：m/N * ( (N+1-m)/(N+1) + m/(N+1) * (m-1)/m = m / (N+1)；其余request被选择的概率也一样，得证当n = N+1时，每个request被选择的概率为m / (N+1)。\r\n\r\n综上得，第方法可以实现最最终每个request被选择的为m/n.\r\n","slug":"-2011-10-16-0-html","updated":1419145106000,"excerpt":"","_id":"qttdfts7zx56yxnt","comments":true,"photos":[],"link":""},{"date":1323878400000,"layout":"post","title":"序对的一种过程性表示","categories":["icapitok4j2xfddm"],"tags":["eyhtmoggscycl638"],"content":"<p>考虑这样一个问题，设计一个数据结构，使其表示有理数。</p>\n<p>So easy!</p>\n<pre><code><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">rat</span></span>{  \n int num;  \n int den;  \n}rat;\n</code></pre><p>其中，num表示该有理数的分子，den表示该有理数的分母，而整个数据结构rat即可表示为有理数。如果要得到该有理数的分子，可用rat.num表示，而rat.den则表示分母。</p>\n<p>那么，如果不用数据结构，完全用过程来表示这样的数据，可行吗？</p>\n<p>“一般而言，我们总可以将数据定义为一组适当的选择函数和构造函数，以及为使这些过程成为一套合法表示，它们就必须满足的一组特定条件。”————–SICP</p>\n<p>我们定义这样三个过程，</p>\n<ul>\n<li>cons————–将两个对象粘接到一起</li>\n<li>car—————-取出第一个对象</li>\n<li>cdr—————-取出第二个对象</li>\n</ul>\n<p>其中，cons为构造函数，car和cdr为选择函数，而这些操作满足的条件就是：对任何对象x和y，如果z是(cons x y)，则(car z)为x，(cdr z)为y。</p>\n<p>这样，我们确实能够完全不用任何数据结构，只使用过程就可以实现序对。如下：</p>\n<pre><code><span class=\"list\">(<span class=\"title\">define</span> <span class=\"list\">(<span class=\"title\"><span class=\"built_in\">cons</span></span> x y)</span>  \n     <span class=\"list\">(<span class=\"title\">define</span> <span class=\"list\">(<span class=\"title\">dispatch</span> m)</span>  \n            <span class=\"list\">(<span class=\"title\"><span class=\"built_in\">cond</span></span> <span class=\"list\">(<span class=\"list\">(<span class=\"title\"><span class=\"built_in\">=</span></span> m<span class=\"number\"> 0</span>)</span> x)</span>  \n                  <span class=\"list\">(<span class=\"list\">(<span class=\"title\"><span class=\"built_in\">=</span></span> m<span class=\"number\"> 1</span>)</span> y)</span>  \n                  <span class=\"list\">(<span class=\"title\">else</span> <span class=\"list\">(<span class=\"title\">error</span> <span class=\"string\">\"Argument not 0 or 1 ---------CONS\"</span> m)</span>)</span>)</span>)</span>  \n     dispatch)</span>  \n\n<span class=\"list\">(<span class=\"title\">define</span> <span class=\"list\">(<span class=\"title\">car</span> z)</span> <span class=\"list\">(<span class=\"title\">z</span><span class=\"number\"> 0</span>)</span>)</span>  \n<span class=\"list\">(<span class=\"title\">define</span> <span class=\"list\">(<span class=\"title\">cdr</span> z)</span> <span class=\"list\">(<span class=\"title\">z</span><span class=\"number\"> 1</span>)</span>)</span>\n</code></pre><p>上面是采用Lisp实现的，但是用C呢？</p>\n<pre><code><span class=\"preprocessor\">#<span class=\"keyword\">include</span> \"stdio.h\"  </span>\n\n<span class=\"keyword\">typedef</span> <span class=\"keyword\">int</span> (*pFunToDispatch)(<span class=\"keyword\">int</span>);  \n\npFunToDispatch pairConstructor(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)  \n{  \n    <span class=\"keyword\">int</span> dispatch(<span class=\"keyword\">int</span> m)  \n    {  \n        <span class=\"keyword\">return</span> (m == <span class=\"number\">0</span>) ? x : y;  \n    }  \n\n    <span class=\"keyword\">return</span> dispatch;  \n}  \n\n<span class=\"keyword\">int</span> firstOfPair(pFunToDispatch pair)  \n{  \n    <span class=\"keyword\">return</span> (*pair)(<span class=\"number\">0</span>);  \n}  \n\n<span class=\"keyword\">int</span> secondOfPair(pFunToDispatch pair)  \n{  \n    <span class=\"keyword\">return</span> (*pair)(<span class=\"number\">1</span>);  \n}  \n\n<span class=\"keyword\">int</span> main(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>** argv)  \n{  \n    pFunToDispatch pair = pairConstructor(<span class=\"number\">11</span>, <span class=\"number\">12</span>);  \n\n    <span class=\"keyword\">int</span> first = (*pair)(<span class=\"number\">0</span>);  \n    <span class=\"keyword\">int</span> second = (*pair)(<span class=\"number\">1</span>);  \n\n    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d, %d\\n\"</span>, first, second);  \n\n    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;  \n}\n</code></pre><p>注意，由于ANSI C并不支持函数的嵌套定义，所以上述函数只适用在GCC中，而且可能会出问题，见<a href=\"http://tieba.baidu.com/p/1192690362?pn=1。\" target=\"_blank\" rel=\"external\">http://tieba.baidu.com/p/1192690362?pn=1。</a></p>\n<p>补充：</p>\n<p>序对用过程性表示的另一种方法：</p>\n<pre><code><span class=\"list\">(<span class=\"title\">define</span> <span class=\"list\">(<span class=\"title\"><span class=\"built_in\">cons</span></span> x y)</span>  \n      <span class=\"list\">(<span class=\"title\">lambda</span> <span class=\"list\">(<span class=\"title\">m</span>)</span> <span class=\"list\">(<span class=\"title\">m</span> x y)</span>)</span>)</span>  \n\n<span class=\"list\">(<span class=\"title\">define</span> <span class=\"list\">(<span class=\"title\">car</span> z)</span>  \n      <span class=\"list\">(<span class=\"title\">z</span> <span class=\"list\">(<span class=\"title\">lambda</span> <span class=\"list\">(<span class=\"title\">p</span> q)</span> p)</span>)</span>)</span>  \n\n<span class=\"list\">(<span class=\"title\">define</span> <span class=\"list\">(<span class=\"title\">cdr</span> z)</span>  \n      <span class=\"list\">(<span class=\"title\">z</span> <span class=\"list\">(<span class=\"title\">lambda</span> <span class=\"list\">(<span class=\"title\">p</span> q)</span> q)</span>)</span>)</span>\n</code></pre>","source":"_posts/2011-12-15-0.md","raw":"---\r\ndate: 2011-12-15\r\nlayout: post\r\ntitle: 序对的一种过程性表示\r\npermalink: '/2011/12-15-0.html'\r\ncategories:\r\n- lisp\r\ntags:\r\n- 设计\r\n---\r\n\r\n\r\n考虑这样一个问题，设计一个数据结构，使其表示有理数。\r\n\r\nSo easy!\r\n\r\n\ttypedef struct rat{  \r\n\t int num;  \r\n\t int den;  \r\n\t}rat;\r\n\r\n其中，num表示该有理数的分子，den表示该有理数的分母，而整个数据结构rat即可表示为有理数。如果要得到该有理数的分子，可用rat.num表示，而rat.den则表示分母。\r\n\r\n那么，如果不用数据结构，完全用过程来表示这样的数据，可行吗？\r\n\r\n“一般而言，我们总可以将数据定义为一组适当的选择函数和构造函数，以及为使这些过程成为一套合法表示，它们就必须满足的一组特定条件。”————–SICP\r\n\r\n我们定义这样三个过程，\r\n\r\n* cons————–将两个对象粘接到一起\r\n* car—————-取出第一个对象\r\n* cdr—————-取出第二个对象\r\n\r\n其中，cons为构造函数，car和cdr为选择函数，而这些操作满足的条件就是：对任何对象x和y，如果z是(cons x y)，则(car z)为x，(cdr z)为y。\r\n\r\n这样，我们确实能够完全不用任何数据结构，只使用过程就可以实现序对。如下：\r\n\r\n\t(define (cons x y)  \r\n\t     (define (dispatch m)  \r\n\t            (cond ((= m 0) x)  \r\n\t                  ((= m 1) y)  \r\n\t                  (else (error \"Argument not 0 or 1 ---------CONS\" m))))  \r\n\t     dispatch)  \r\n\t \r\n\t(define (car z) (z 0))  \r\n\t(define (cdr z) (z 1))\r\n\r\n上面是采用Lisp实现的，但是用C呢？\r\n\r\n\t#include \"stdio.h\"  \r\n\t \r\n\ttypedef int (*pFunToDispatch)(int);  \r\n\t \r\n\tpFunToDispatch pairConstructor(int x, int y)  \r\n\t{  \r\n\t    int dispatch(int m)  \r\n\t    {  \r\n\t        return (m == 0) ? x : y;  \r\n\t    }  \r\n\t \r\n\t    return dispatch;  \r\n\t}  \r\n\t \r\n\tint firstOfPair(pFunToDispatch pair)  \r\n\t{  \r\n\t    return (*pair)(0);  \r\n\t}  \r\n\t \r\n\tint secondOfPair(pFunToDispatch pair)  \r\n\t{  \r\n\t    return (*pair)(1);  \r\n\t}  \r\n\t \r\n\tint main(int argc, char** argv)  \r\n\t{  \r\n\t    pFunToDispatch pair = pairConstructor(11, 12);  \r\n\t \r\n\t    int first = (*pair)(0);  \r\n\t    int second = (*pair)(1);  \r\n\t \r\n\t    printf(\"%d, %d\\n\", first, second);  \r\n\t \r\n\t    return 0;  \r\n\t}\r\n\r\n注意，由于ANSI C并不支持函数的嵌套定义，所以上述函数只适用在GCC中，而且可能会出问题，见http://tieba.baidu.com/p/1192690362?pn=1。\r\n\r\n补充：\r\n\r\n序对用过程性表示的另一种方法：\r\n\r\n\t(define (cons x y)  \r\n\t      (lambda (m) (m x y)))  \r\n\t \r\n\t(define (car z)  \r\n\t      (z (lambda (p q) p)))  \r\n\t \r\n\t(define (cdr z)  \r\n\t      (z (lambda (p q) q)))","slug":"-2011-12-15-0-html","updated":1422085792000,"excerpt":"","_id":"gvsx4ycd5x8avk0d","comments":true,"photos":[],"link":""},{"date":1346515200000,"layout":"post","title":"策略模式(Strategy Pattern)","categories":["bm3iyiguh6q5qxsd"],"tags":["eyhtmoggscycl638"],"content":"<p>学习Object Oriented(OO)也有段时间了，但一直没有学习Pattern Design方面的东西，感觉使用OO的时候完全不给力啊。So, balabala……..</p>\n<p>Sorry，扯了一点废话。</p>\n<p>Strategy Pattern，在WikiPedia中解释为：a particularsoftware design pattern, whereby algorithms can be selected at runtime. 也就是说，Strategy Pattern在运行时能够改变算法的一种设计模式。那么，这个算法是什么呢？这里的算法，指的是Object的行为，比如一个Duck，它拥有Fly的行为，但是运行时改变算法，使其can’t Fly。这就是Strategy Pattern的优势所在。当然，《Head First 设计模式》中对它也有定义：定义了算法族，分别封装起来，让它们之间可以互相替换，此模式让算法的变化独立于使用算法的客户。</p>\n<p>OK,我们以《Head First 设计模式》中的例子来说明。</p>\n<p>我们要设计以下两个类，MallarDuck(绿头鸭)和RedheadDuck(红头鸭)。既然都是Duck(鸭)，会OO的人都会想到－－inherit(继承)。那这两种鸭子有什么共有的特性，我们可以将它们抽象出来放入一个父类Duck中呢。哦，它们都会quack，还有swim!于是，有了下面的设计：</p>\n<p><img src=\"/img/2012-09-02-0.png\" alt=\"UML图\" title=\"UML图\"></p>\n<p>嗯，看起来不错的样子。但是过了一天，老板(产品经理，又或者其他**，你明白的)说，我们要新的功能，MallardDuck和RedheadDuck都要有fly( )的行为！嗯，不怕，OO的好处来了。只要在Duck类中新加入fly( )行为，这下所有的子类都有fly( )的行为了，一切OK！</p>\n<p><img src=\"/img/2012-09-02-1.png\" alt=\"UML图\" title=\"UML图\"></p>\n<p>等等，让我想想，真的OK吗？第3天，**（who?）又说，我们仅有MallardDuck与RedheadDuck太少了，我们需要一个RubberDuck ! OK，so easy。</p>\n<p><img src=\"/img/2012-09-02-2.png\" alt=\"UML图\" title=\"UML图\"></p>\n<p>Hold on ! RubberDuck好像不会飞啊。但是为什么RubberDuck有fly( )这个行为！那也行，好吧，在RubberDuck中覆盖fly( )方法，但是什么也不做吧。</p>\n<pre><code>class RubberDuck extend Duck {\n    <span class=\"attribute\">...</span><span class=\"attribute\">...</span>\n    @override\n    <span class=\"keyword\">public</span> fly() {\n        <span class=\"comment\">// do nothing</span>\n    }\n    <span class=\"attribute\">...</span><span class=\"attribute\">...</span>\n}\n</code></pre><p>看上去还成。但是如果不止增加RubberDuck呢，还有ModelDuck， 以及<strong>Duck, balabala……..那不是每个类都要覆盖fly( )方法？你怎么知道只有fly( )方法。要是</strong>Duck不会swim呢（我们假设有这样一种Duck）？OMG，我的OO呢，说好的方便呢？</p>\n<p>嘿，谁说没有好方法。且看：</p>\n<p><img src=\"/img/2012-09-02-3.png\" alt=\"UML图\" title=\"UML图\"></p>\n<p>这下，谁看要什么方法就让它有吧，想要fly( )方法，就实现Flyable这个接口；想要quack方法，就实现Quackable接口。Oh, No ! 这不是N多代码重复吗！MallardDuck与RedheadDuck的fly( )方法是一样的啊，说好的代码复用呢？</p>\n<p>等等，好像灵感又来了！代码复用？参考Duck类的做法不就行了！</p>\n<p><img src=\"/img/2012-09-02-4.png\" alt=\"UML图\" title=\"UML图\"></p>\n<p>Oh, 终于告一段落了，这样就可以了！再等等！什么，还有？！学习OO的时候，前人都告诫说：少用继承，多用组合。似乎继承过多了。。。还是多重的。。。那再修改！</p>\n<p><img src=\"/img/2012-09-02-5.png\" alt=\"UML图\" title=\"UML图\"></p>\n<p>这么修改，还增加了一个功能：运行时可以替换Object的行为啊，组合果然是个good choice !</p>\n<p>其实，最后一个版本就是刚开始就提到的Strategy Pattern， 真是“千呼万唤始出来”啊。</p>\n<p>另外，附上最终的Java代码，让我们更好的理解它。</p>\n<p>Duck.java:</p>\n<pre><code><span class=\"comment\">// Duck.java</span>\n<span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> Duck {\n\n    FlyBehavior flyBehavior;\n    QuackBehavior quackBehavior;\n\n    <span class=\"keyword\">public</span> <span class=\"title\">Duck</span>() {\n\n    }\n\n    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">display</span>();\n\n    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">performFly</span>(){\n        flyBehavior.fly();\n    }\n\n   <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">performQuack</span>() {\n        quackBehavior.quack();\n   }\n\n   <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">swim</span>() {\n       System.<span class=\"keyword\">out</span>.println(<span class=\"string\">\"All ducks float, even decoys!\"</span>);\n   }\n\n    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setFlyBehavior</span>(FlyBehavior fb) {\n        flyBehavior = fb;\n    }\n\n    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setQuackBehavior</span>(QuackBehavior qb) {\n        uackBehavior = qb;\n    }\n}\n</code></pre><p>FlyBehavior.java:</p>\n<pre><code><span class=\"comment\">// FlyBehavio.java</span>\n<span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> FlyBehavior {\n    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">fly</span>();\n}\n</code></pre><p>FlyWithWings.java:</p>\n<pre><code><span class=\"comment\">// FlyWithWings</span>\n<span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FlyWithWings</span> <span class=\"keyword\">implements</span> <span class=\"title\">FlyBehavior</span> </span>{\n\n    <span class=\"annotation\">@Override</span>\n    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">fly</span>() {\n        <span class=\"comment\">// TODO Auto-generated method stub</span>\n        System.out.println(<span class=\"string\">\"I'am flying!\"</span>);\n    }\n\n}\n</code></pre><p>FlyNoWay.java:</p>\n<pre><code><span class=\"comment\">// FlyNoWay.java</span>\n<span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FlyNoWay</span> <span class=\"keyword\">implements</span> <span class=\"title\">FlyBehavior</span> </span>{\n\n    <span class=\"annotation\">@Override</span>\n    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">fly</span>() {\n        <span class=\"comment\">// TODO Auto-generated method stub</span>\n        System.out.println(<span class=\"string\">\"I can't fly!\"</span>);\n    }\n\n}\n</code></pre><p>FlyRockedPowered.java:</p>\n<pre><code><span class=\"comment\">// FlyRockedPowered</span>\n<span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FlyRockedPowered</span> <span class=\"keyword\">implements</span> <span class=\"title\">FlyBehavior</span> </span>{\n\n    <span class=\"annotation\">@Override</span>\n    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">fly</span>() {\n        <span class=\"comment\">// TODO Auto-generated method stub</span>\n        System.out.println(<span class=\"string\">\"I' am flying with a rocked!\"</span>);\n    }\n\n}\n</code></pre><p>QuackBehavior.java:</p>\n<pre><code><span class=\"comment\">// QuackBehavior.java</span>\n<span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> QuackBehavior {\n    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">quack</span>();\n}\n</code></pre><p>Quack.java</p>\n<pre><code><span class=\"comment\">// Quack.java</span>\n<span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Quack</span> <span class=\"keyword\">implements</span> <span class=\"title\">QuackBehavior</span> </span>{\n\n    <span class=\"annotation\">@Override</span>\n    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">quack</span>() {\n        <span class=\"comment\">// TODO Auto-generated method stub</span>\n        System.out.println(<span class=\"string\">\"Quack\"</span>);\n    }\n\n}\n</code></pre><p>MuteQuack.java</p>\n<pre><code><span class=\"comment\">// QuackBehavior.java</span>\n<span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MuteQuack</span> <span class=\"keyword\">implements</span> <span class=\"title\">QuackBehavior</span> </span>{\n\n    <span class=\"annotation\">@Override</span>\n    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">quack</span>() {\n        <span class=\"comment\">// TODO Auto-generated method stub</span>\n        System.out.println(<span class=\"string\">\"&lt;&lt; Silence &gt;&gt;\"</span>);\n    }\n\n}\n</code></pre><p>Squeak.java</p>\n<pre><code><span class=\"comment\">// Squeak.java</span>\n<span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Squeak</span> <span class=\"keyword\">implements</span> <span class=\"title\">QuackBehavior</span> </span>{\n\n    <span class=\"annotation\">@Override</span>\n    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">quack</span>() {\n         <span class=\"comment\">// TODO Auto-generated method stub</span>\n         System.out.println(<span class=\"string\">\"Squeak\"</span>);\n    }\n\n}\n</code></pre><p>MallardDuck.java:</p>\n<pre><code><span class=\"comment\">// MallardDuck</span>\n<span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MallardDuck</span> <span class=\"keyword\">extends</span> <span class=\"title\">Duck</span> </span>{\n\n    <span class=\"keyword\">public</span> <span class=\"title\">MallardDuck</span>() {\n        quackBehavior = <span class=\"keyword\">new</span> Quack();\n        flyBehavior = <span class=\"keyword\">new</span> FlyWithWings();\n    }\n\n    <span class=\"annotation\">@Override</span>\n    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">display</span>() {\n        <span class=\"comment\">// TODO Auto-generated method stub</span>\n        System.out.println(<span class=\"string\">\"I'm a real Mallard duck\"</span>);\n    }\n\n}\n</code></pre><p>ModelDuck.java:</p>\n<pre><code><span class=\"comment\">// ModelDuck</span>\n<span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ModelDuck</span> <span class=\"keyword\">extends</span> <span class=\"title\">Duck</span> </span>{\n\n    ModelDuck() {\n         flyBehavior = <span class=\"keyword\">new</span> FlyNoWay();\n         quackBehavior = <span class=\"keyword\">new</span> Quack();\n    }\n\n    <span class=\"annotation\">@Override</span>\n    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">display</span>() {\n        <span class=\"comment\">// TODO Auto-generated method stub</span>\n        System.out.println(<span class=\"string\">\"I'm a model duck!\"</span>);\n    }\n\n}\n</code></pre><p>Test.java</p>\n<pre><code><span class=\"comment\">// Test.java</span>\n<span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>{\n\n    <span class=\"javadoc\">/**\n    *<span class=\"javadoctag\"> @param</span> args\n    */</span>\n    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span>(String[] args) {\n        <span class=\"comment\">// TODO Auto-generated method stub</span>\n        Duck mallard = <span class=\"keyword\">new</span> MallardDuck();\n        mallard.performFly();\n        mallard.performQuack();\n\n        System.out.println(<span class=\"string\">\"------------------- now, change the duck! --------------------\"</span>);\n\n        Duck model = <span class=\"keyword\">new</span> ModelDuck();\n        model.performFly();\n        System.out.println(<span class=\"string\">\"------------------- now, set rocked on the model! --------------------\"</span>);\n        model.setFlyBehavior(<span class=\"keyword\">new</span> FlyRockedPowered());\n        model.performFly();\n    }\n\n}\n</code></pre>","source":"_posts/2012-09-02-0.md","raw":"---\r\ndate: 2012-09-02\r\nlayout: post\r\ntitle: 策略模式(Strategy Pattern)\r\npermalink: '/2012/09-02-0.html'\r\ncategories:\r\n- 设计模式\r\ntags:\r\n- 设计\r\n---\r\n\r\n\r\n学习Object Oriented(OO)也有段时间了，但一直没有学习Pattern Design方面的东西，感觉使用OO的时候完全不给力啊。So, balabala……..\r\n\r\nSorry，扯了一点废话。\r\n\r\nStrategy Pattern，在WikiPedia中解释为：a particularsoftware design pattern, whereby algorithms can be selected at runtime. 也就是说，Strategy Pattern在运行时能够改变算法的一种设计模式。那么，这个算法是什么呢？这里的算法，指的是Object的行为，比如一个Duck，它拥有Fly的行为，但是运行时改变算法，使其can’t Fly。这就是Strategy Pattern的优势所在。当然，《Head First 设计模式》中对它也有定义：定义了算法族，分别封装起来，让它们之间可以互相替换，此模式让算法的变化独立于使用算法的客户。\r\n\r\nOK,我们以《Head First 设计模式》中的例子来说明。\r\n\r\n我们要设计以下两个类，MallarDuck(绿头鸭)和RedheadDuck(红头鸭)。既然都是Duck(鸭)，会OO的人都会想到－－inherit(继承)。那这两种鸭子有什么共有的特性，我们可以将它们抽象出来放入一个父类Duck中呢。哦，它们都会quack，还有swim!于是，有了下面的设计：\r\n\r\n![UML图](/img/2012-09-02-0.png \"UML图\")\r\n\r\n嗯，看起来不错的样子。但是过了一天，老板(产品经理，又或者其他**，你明白的)说，我们要新的功能，MallardDuck和RedheadDuck都要有fly( )的行为！嗯，不怕，OO的好处来了。只要在Duck类中新加入fly( )行为，这下所有的子类都有fly( )的行为了，一切OK！\r\n\r\n![UML图](/img/2012-09-02-1.png \"UML图\")\r\n\r\n等等，让我想想，真的OK吗？第3天，**（who?）又说，我们仅有MallardDuck与RedheadDuck太少了，我们需要一个RubberDuck ! OK，so easy。\r\n\r\n![UML图](/img/2012-09-02-2.png \"UML图\")\r\n\r\nHold on ! RubberDuck好像不会飞啊。但是为什么RubberDuck有fly( )这个行为！那也行，好吧，在RubberDuck中覆盖fly( )方法，但是什么也不做吧。\r\n\r\n\tclass RubberDuck extend Duck {\r\n\t    ......\r\n\t    @override\r\n\t    public fly() {\r\n\t        // do nothing\r\n\t    }\r\n\t    ......\r\n\t}\r\n\r\n看上去还成。但是如果不止增加RubberDuck呢，还有ModelDuck， 以及**Duck, balabala……..那不是每个类都要覆盖fly( )方法？你怎么知道只有fly( )方法。要是**Duck不会swim呢（我们假设有这样一种Duck）？OMG，我的OO呢，说好的方便呢？\r\n\r\n嘿，谁说没有好方法。且看：\r\n\r\n![UML图](/img/2012-09-02-3.png \"UML图\")\r\n\r\n这下，谁看要什么方法就让它有吧，想要fly( )方法，就实现Flyable这个接口；想要quack方法，就实现Quackable接口。Oh, No ! 这不是N多代码重复吗！MallardDuck与RedheadDuck的fly( )方法是一样的啊，说好的代码复用呢？\r\n\r\n等等，好像灵感又来了！代码复用？参考Duck类的做法不就行了！\r\n\r\n![UML图](/img/2012-09-02-4.png \"UML图\")\r\n\r\nOh, 终于告一段落了，这样就可以了！再等等！什么，还有？！学习OO的时候，前人都告诫说：少用继承，多用组合。似乎继承过多了。。。还是多重的。。。那再修改！\r\n\r\n![UML图](/img/2012-09-02-5.png \"UML图\")\r\n\r\n这么修改，还增加了一个功能：运行时可以替换Object的行为啊，组合果然是个good choice !\r\n\r\n其实，最后一个版本就是刚开始就提到的Strategy Pattern， 真是“千呼万唤始出来”啊。\r\n\r\n另外，附上最终的Java代码，让我们更好的理解它。\r\n\r\nDuck.java:\r\n\r\n\t// Duck.java\r\n\tpublic abstract class Duck {\r\n\t \r\n\t    FlyBehavior flyBehavior;\r\n\t    QuackBehavior quackBehavior;\r\n\t \r\n\t    public Duck() {\r\n\t \r\n\t    }\r\n\t \r\n\t    public abstract void display();\r\n\t \r\n\t    public void performFly(){\r\n\t        flyBehavior.fly();\r\n\t    }\r\n\t \r\n\t   public void performQuack() {\r\n\t        quackBehavior.quack();\r\n\t   }\r\n\t \r\n\t   public void swim() {\r\n\t       System.out.println(\"All ducks float, even decoys!\");\r\n\t   }\r\n\t \r\n\t    public void setFlyBehavior(FlyBehavior fb) {\r\n\t        flyBehavior = fb;\r\n\t    }\r\n\t \r\n\t    public void setQuackBehavior(QuackBehavior qb) {\r\n\t        uackBehavior = qb;\r\n\t    }\r\n\t}\r\n\r\nFlyBehavior.java:\r\n\r\n\t// FlyBehavio.java\r\n\tpublic interface FlyBehavior {\r\n\t    public void fly();\r\n\t}\r\n \r\nFlyWithWings.java:\r\n\r\n\t// FlyWithWings\r\n\tpublic class FlyWithWings implements FlyBehavior {\r\n\t \r\n\t    @Override\r\n\t    public void fly() {\r\n\t        // TODO Auto-generated method stub\r\n\t        System.out.println(\"I'am flying!\");\r\n\t    }\r\n\t \r\n\t}\r\n\r\nFlyNoWay.java:\r\n\r\n\t// FlyNoWay.java\r\n\tpublic class FlyNoWay implements FlyBehavior {\r\n\t \r\n\t    @Override\r\n\t    public void fly() {\r\n\t        // TODO Auto-generated method stub\r\n\t        System.out.println(\"I can't fly!\");\r\n\t    }\r\n\t \r\n\t}\r\n\r\nFlyRockedPowered.java:\r\n\r\n\t// FlyRockedPowered\r\n\tpublic class FlyRockedPowered implements FlyBehavior {\r\n\t \r\n\t    @Override\r\n\t    public void fly() {\r\n\t        // TODO Auto-generated method stub\r\n\t        System.out.println(\"I' am flying with a rocked!\");\r\n\t    }\r\n\t \r\n\t}\r\n\r\nQuackBehavior.java:\r\n\r\n\t// QuackBehavior.java\r\n\tpublic interface QuackBehavior {\r\n\t    public void quack();\r\n\t}\r\n\r\nQuack.java\r\n\r\n\t// Quack.java\r\n\tpublic class Quack implements QuackBehavior {\r\n\t \r\n\t    @Override\r\n\t    public void quack() {\r\n\t        // TODO Auto-generated method stub\r\n\t        System.out.println(\"Quack\");\r\n\t    }\r\n\t \r\n\t}\r\n\r\nMuteQuack.java\r\n\r\n\t// QuackBehavior.java\r\n\tpublic class MuteQuack implements QuackBehavior {\r\n\t \r\n\t    @Override\r\n\t    public void quack() {\r\n\t        // TODO Auto-generated method stub\r\n\t        System.out.println(\"<< Silence >>\");\r\n\t    }\r\n\t \r\n\t}\r\n\r\nSqueak.java\r\n\r\n\t// Squeak.java\r\n\tpublic class Squeak implements QuackBehavior {\r\n\t \r\n\t    @Override\r\n\t    public void quack() {\r\n\t         // TODO Auto-generated method stub\r\n\t         System.out.println(\"Squeak\");\r\n\t    }\r\n\t \r\n\t}\r\n\r\nMallardDuck.java:\r\n\r\n\t// MallardDuck\r\n\tpublic class MallardDuck extends Duck {\r\n\t \r\n\t    public MallardDuck() {\r\n\t        quackBehavior = new Quack();\r\n\t        flyBehavior = new FlyWithWings();\r\n\t    }\r\n\t \r\n\t    @Override\r\n\t    public void display() {\r\n\t        // TODO Auto-generated method stub\r\n\t        System.out.println(\"I'm a real Mallard duck\");\r\n\t    }\r\n\t \r\n\t}\r\n\r\nModelDuck.java:\r\n\r\n\t// ModelDuck\r\n\tpublic class ModelDuck extends Duck {\r\n\t \r\n\t    ModelDuck() {\r\n\t         flyBehavior = new FlyNoWay();\r\n\t         quackBehavior = new Quack();\r\n\t    }\r\n\t \r\n\t    @Override\r\n\t    public void display() {\r\n\t        // TODO Auto-generated method stub\r\n\t        System.out.println(\"I'm a model duck!\");\r\n\t    }\r\n\t \r\n\t}\r\n\r\nTest.java\r\n\r\n\t// Test.java\r\n\tpublic class Test {\r\n\t \r\n\t    /**\r\n\t    * @param args\r\n\t    */\r\n\t    public static void main(String[] args) {\r\n\t        // TODO Auto-generated method stub\r\n\t        Duck mallard = new MallardDuck();\r\n\t        mallard.performFly();\r\n\t        mallard.performQuack();\r\n\t \r\n\t        System.out.println(\"------------------- now, change the duck! --------------------\");\r\n\t \r\n\t        Duck model = new ModelDuck();\r\n\t        model.performFly();\r\n\t        System.out.println(\"------------------- now, set rocked on the model! --------------------\");\r\n\t        model.setFlyBehavior(new FlyRockedPowered());\r\n\t        model.performFly();\r\n\t    }\r\n\t \r\n\t}","slug":"-2012-09-02-0-html","updated":1422085804000,"excerpt":"","_id":"az8s67h1s0epl5pw","comments":true,"photos":[],"link":""},{"date":1347120000000,"layout":"post","title":"观察者模式(Observer Pattern)","categories":["bm3iyiguh6q5qxsd"],"tags":["eyhtmoggscycl638"],"content":"<p><a href=\"http://en.wikipedia.org/wiki/Observer_pattern\" target=\"_blank\" rel=\"external\">观察者模式(Observer patten)</a>，<strong>定义了对象之间的一对多依赖，这样一来一个对象改变状态时，它的所有依赖者都会收到通知并自动更新</strong>。</p>\n<p>它在现实生活中也非常常见，如报纸、杂志的订阅关系。比如Bob向报社订阅了《程序员》，《程序员》供应商就将Bob加入订阅者的表格中。每次新的《程序 员》一出版，就会通知Bob：新一期《程序员》出版了，并同时将《程序员》送到Bob手中。过了半年，Bob不想再订阅《程序员》了，因了他订阅了 ipad版的。这时，《程序员》供应商就将Bob从订阅者表格中删除。以后每月新一期《程序员》出版时，就不再通知Bob，并送杂志到他手中了。</p>\n<p>没错，这就是观察者模式，并不复杂。很多地方都用到这个模式，如著名的<a href=\"http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller\" target=\"_blank\" rel=\"external\">MVC(Model-View-controler)</a>中重要的部分就是观察者模式，而Swing中也存在着观察者模式的实现。</p>\n<p>下面，我们具体来分析一下这个强大的观察者模式。</p>\n<p>观察者模式可以分为主题(Subject)和观察者(Observer)。主题其实就是被观察者对象，就如上面杂志订阅中的杂志社，而观察者就是各个订阅 者。杂志社可以将新的订阅者加入订阅者列表中，也可以加老是订阅者从订阅者列表中删除，所以主题类也拥有这两种能力，即拥有 registerObserver( )和removeObserver( )方法(方法名称仅仅是名称而已，可用其他)。而且，杂志社可以通知各个订阅者新杂志到了，所以主题类也有相应的方法：notifObservers( )。而观察者呢？杂志社通知订阅都有新的杂志到了，订阅者就有相应的动作，或阅读，或送人。当然，观察者类则有update( )方法与之对应。对应的UML图如下：</p>\n<p><img src=\"/img/2012-09-09-0.png\" alt=\"UML图\" title=\"UML图\"></p>\n<p>那么，这个观察者模式有什么好处呢？<strong>观察者模式提供了一种对象设计，让主题和观察者之间松耦合</strong>(还记得学校里老师教的“强内聚，松耦合”吗)。</p>\n<p>在主题方，它对观察者基本不知道任何详情，只知道观察者实现了某个接口，其他具体细节一概不知，如具体类是什么，有多少种方法，各种方法内又做了什么。主 题只要维护好自己的观察者列表和其他数据，在新的观察者申请加入时，将其加入列表；在理的观察者申请退出时，将其从列表中删除；在自己的数据更新时，依次 通知各个观察者，即调用它们的update方法(上段中update方法)。如果主题类增加维护数据时，已有的观察者们都无须更新代码，因为这只与主题类 相关，这就是松耦合的威力。</p>\n<p>在观察者方，它只关心所观察对象(即主题类)推送过来的更新消息，取得自己感兴趣的数据，做自己相应的动作，而无需知道被观察者(主题)具体有多少观察 者，有多少数据，或者是肥是瘦。而如果不想观察这个主题，则调用主题remove方法将自己从主题的观察者列表中删除，不影响该主题和其他观察者。</p>\n<p>可见，改变主题或者观察者的任何一方都不会影响另一方，这就是松耦合。</p>\n<p>附<a href=\"http://book.douban.com/subject/2243615/\" target=\"_blank\" rel=\"external\">《Head First 设计模式》</a>中相应章节源代码，以更方便理解观察者模式。Java中Observable类与Observer类就是相应的被观察者(主题类)与观察者:</p>\n<pre><code>package com.Observor;  \n\n<span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> DisplayEmlement {  \n    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">display</span>();  \n}\n</code></pre><hr>\n<pre><code><span class=\"keyword\">package</span> com.Observor;  \n\n<span class=\"keyword\">import</span> java.util.Observable;  \n\n<span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WeatherData</span> <span class=\"keyword\">extends</span> <span class=\"title\">Observable</span> </span>{  \n    <span class=\"keyword\">private</span> <span class=\"keyword\">float</span> temperature;  \n    <span class=\"keyword\">private</span> <span class=\"keyword\">float</span> humidity;  \n    <span class=\"keyword\">private</span> <span class=\"keyword\">float</span> pressure;  \n\n    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">measurementChanged</span>() {  \n        setChanged();  \n        notifyObservers();  \n    }  \n\n    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setMeasurements</span>(<span class=\"keyword\">float</span> temperature, <span class=\"keyword\">float</span> humidigy, <span class=\"keyword\">float</span> pressure) {  \n        <span class=\"keyword\">this</span>.temperature = temperature;  \n        <span class=\"keyword\">this</span>.humidity = humidigy;  \n        <span class=\"keyword\">this</span>.pressure = pressure;  \n        measurementChanged();  \n    }  \n\n    <span class=\"keyword\">public</span> <span class=\"keyword\">float</span> <span class=\"title\">getTemperature</span>() {  \n        <span class=\"keyword\">return</span> temperature;  \n    }  \n\n    <span class=\"keyword\">public</span> <span class=\"keyword\">float</span> <span class=\"title\">getHumidity</span>() {  \n        <span class=\"keyword\">return</span> humidity;  \n    }  \n\n    <span class=\"keyword\">public</span> <span class=\"keyword\">float</span> <span class=\"title\">getPressure</span>() {  \n        <span class=\"keyword\">return</span> pressure;  \n    }  \n}\n</code></pre><hr>\n<pre><code><span class=\"keyword\">package</span> com.Observor;  \n\n<span class=\"keyword\">import</span> java.util.Observable;  \n<span class=\"keyword\">import</span> java.util.Observer;  \n\n<span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CurrentConditionsDisplay</span> <span class=\"keyword\">implements</span> <span class=\"title\">Observer</span>, <span class=\"title\">DisplayEmlement</span> </span>{  \n    Observable observable;  \n    <span class=\"keyword\">private</span> <span class=\"keyword\">float</span> temerature;  \n    <span class=\"keyword\">private</span> <span class=\"keyword\">float</span> humidity;  \n\n    <span class=\"keyword\">public</span> <span class=\"title\">CurrentConditionsDisplay</span>(Observable observable) {  \n        <span class=\"keyword\">this</span>.observable = observable;  \n        observable.addObserver(<span class=\"keyword\">this</span>);  \n    }  \n\n    <span class=\"annotation\">@Override</span> \n    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">display</span>() {  \n        <span class=\"comment\">// TODO Auto-generated method stub  </span>\n        System.out.println(<span class=\"string\">\"Current conditions: \"</span> + temerature + <span class=\"string\">\"F degrees and \"</span> + humidity + <span class=\"string\">\"% humidity\"</span>);  \n    }  \n\n    <span class=\"annotation\">@Override</span> \n    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span>(Observable arg0, Object arg1) {  \n        <span class=\"comment\">// TODO Auto-generated method stub  </span>\n        <span class=\"keyword\">if</span> (arg0 <span class=\"keyword\">instanceof</span> WeatherData) {  \n            WeatherData weatherData = (WeatherData)arg0;  \n            <span class=\"keyword\">this</span>.temerature = weatherData.getTemperature();  \n            <span class=\"keyword\">this</span>.humidity = weatherData.getHumidity();  \n            display();  \n        }  \n    }  \n\n}\n</code></pre><hr>\n<pre><code><span class=\"keyword\">package</span> com.Observor;  \n\n<span class=\"keyword\">import</span> java.util.Observable;  \n<span class=\"keyword\">import</span> java.util.Observer;  \n\n<span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ForecastDisplay</span> <span class=\"keyword\">implements</span> <span class=\"title\">Observer</span>, <span class=\"title\">DisplayEmlement</span> </span>{  \n    <span class=\"keyword\">private</span> <span class=\"keyword\">float</span>  currentPressure = <span class=\"number\">29.92</span>f;  \n    <span class=\"keyword\">private</span> <span class=\"keyword\">float</span> lastPressure;  \n\n    <span class=\"keyword\">public</span> <span class=\"title\">ForecastDisplay</span>(Observable observable) {  \n        observable.addObserver(<span class=\"keyword\">this</span>);  \n    }  \n\n    <span class=\"annotation\">@Override</span> \n    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">display</span>() {  \n        <span class=\"comment\">// TODO Auto-generated method stub  </span>\n        System.out.println(<span class=\"string\">\"lastPressure: \"</span> + lastPressure + <span class=\"string\">\" curPressure:\"</span> + currentPressure);  \n    }  \n\n    <span class=\"annotation\">@Override</span> \n    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span>(Observable o, Object arg) {  \n        <span class=\"comment\">// TODO Auto-generated method stub  </span>\n        <span class=\"keyword\">if</span> (o <span class=\"keyword\">instanceof</span> WeatherData) {  \n            lastPressure = currentPressure;  \n            currentPressure = ((WeatherData) o).getPressure();  \n        }  \n        display();  \n    }  \n\n}\n</code></pre><hr>\n<pre><code>package com.Observor;  \n\n<span class=\"keyword\">public</span> <span class=\"keyword\">class</span> WeatherStation {  \n\n    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span>(String[] args) {  \n        WeatherData weatherData = <span class=\"keyword\">new</span> WeatherData();  \n\n        CurrentConditionsDisplay currentDisplay = <span class=\"keyword\">new</span> CurrentConditionsDisplay(weatherData);  \n        ForecastDisplay forecastDisplay = <span class=\"keyword\">new</span> ForecastDisplay(weatherData);  \n        weatherData.setMeasurements(<span class=\"number\">80</span>, <span class=\"number\">90</span>, <span class=\"number\">100</span>);  <span class=\"comment\">// 数字乱来的哦  </span>\n        weatherData.setMeasurements(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>);  \n        weatherData.setMeasurements(<span class=\"number\">11</span>, <span class=\"number\">22</span>, <span class=\"number\">33</span>);  \n    }  \n}\n</code></pre>","source":"_posts/2012-09-09-0.md","raw":"---\r\ndate: 2012-09-09\r\nlayout: post\r\ntitle: 观察者模式(Observer Pattern)\r\npermalink: '/2012/09-09-0.html'\r\ncategories:\r\n- 设计模式\r\ntags:\r\n- 设计\r\n---\r\n\r\n\r\n[观察者模式(Observer patten)](http://en.wikipedia.org/wiki/Observer_pattern)，**定义了对象之间的一对多依赖，这样一来一个对象改变状态时，它的所有依赖者都会收到通知并自动更新**。\r\n\r\n它在现实生活中也非常常见，如报纸、杂志的订阅关系。比如Bob向报社订阅了《程序员》，《程序员》供应商就将Bob加入订阅者的表格中。每次新的《程序 员》一出版，就会通知Bob：新一期《程序员》出版了，并同时将《程序员》送到Bob手中。过了半年，Bob不想再订阅《程序员》了，因了他订阅了 ipad版的。这时，《程序员》供应商就将Bob从订阅者表格中删除。以后每月新一期《程序员》出版时，就不再通知Bob，并送杂志到他手中了。\r\n\r\n没错，这就是观察者模式，并不复杂。很多地方都用到这个模式，如著名的[MVC(Model-View-controler)](http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller)中重要的部分就是观察者模式，而Swing中也存在着观察者模式的实现。\r\n\r\n下面，我们具体来分析一下这个强大的观察者模式。\r\n\r\n观察者模式可以分为主题(Subject)和观察者(Observer)。主题其实就是被观察者对象，就如上面杂志订阅中的杂志社，而观察者就是各个订阅 者。杂志社可以将新的订阅者加入订阅者列表中，也可以加老是订阅者从订阅者列表中删除，所以主题类也拥有这两种能力，即拥有 registerObserver( )和removeObserver( )方法(方法名称仅仅是名称而已，可用其他)。而且，杂志社可以通知各个订阅者新杂志到了，所以主题类也有相应的方法：notifObservers( )。而观察者呢？杂志社通知订阅都有新的杂志到了，订阅者就有相应的动作，或阅读，或送人。当然，观察者类则有update( )方法与之对应。对应的UML图如下：\r\n\r\n![UML图](/img/2012-09-09-0.png \"UML图\")\r\n\r\n那么，这个观察者模式有什么好处呢？**观察者模式提供了一种对象设计，让主题和观察者之间松耦合**(还记得学校里老师教的“强内聚，松耦合”吗)。\r\n\r\n在主题方，它对观察者基本不知道任何详情，只知道观察者实现了某个接口，其他具体细节一概不知，如具体类是什么，有多少种方法，各种方法内又做了什么。主 题只要维护好自己的观察者列表和其他数据，在新的观察者申请加入时，将其加入列表；在理的观察者申请退出时，将其从列表中删除；在自己的数据更新时，依次 通知各个观察者，即调用它们的update方法(上段中update方法)。如果主题类增加维护数据时，已有的观察者们都无须更新代码，因为这只与主题类 相关，这就是松耦合的威力。\r\n\r\n在观察者方，它只关心所观察对象(即主题类)推送过来的更新消息，取得自己感兴趣的数据，做自己相应的动作，而无需知道被观察者(主题)具体有多少观察 者，有多少数据，或者是肥是瘦。而如果不想观察这个主题，则调用主题remove方法将自己从主题的观察者列表中删除，不影响该主题和其他观察者。\r\n\r\n可见，改变主题或者观察者的任何一方都不会影响另一方，这就是松耦合。\r\n\r\n附[《Head First 设计模式》](http://book.douban.com/subject/2243615/)中相应章节源代码，以更方便理解观察者模式。Java中Observable类与Observer类就是相应的被观察者(主题类)与观察者:\r\n\r\n\tpackage com.Observor;  \r\n\t \r\n\tpublic interface DisplayEmlement {  \r\n\t    public void display();  \r\n\t}\r\n\r\n------------------------------\r\n\r\n\tpackage com.Observor;  \r\n\t \r\n\timport java.util.Observable;  \r\n\t \r\n\tpublic class WeatherData extends Observable {  \r\n\t    private float temperature;  \r\n\t    private float humidity;  \r\n\t    private float pressure;  \r\n\t \r\n\t    public void measurementChanged() {  \r\n\t        setChanged();  \r\n\t        notifyObservers();  \r\n\t    }  \r\n\t \r\n\t    public void setMeasurements(float temperature, float humidigy, float pressure) {  \r\n\t        this.temperature = temperature;  \r\n\t        this.humidity = humidigy;  \r\n\t        this.pressure = pressure;  \r\n\t        measurementChanged();  \r\n\t    }  \r\n\t \r\n\t    public float getTemperature() {  \r\n\t        return temperature;  \r\n\t    }  \r\n\t \r\n\t    public float getHumidity() {  \r\n\t        return humidity;  \r\n\t    }  \r\n\t \r\n\t    public float getPressure() {  \r\n\t        return pressure;  \r\n\t    }  \r\n\t}\r\n\r\n------------------------------\r\n\r\n\tpackage com.Observor;  \r\n\t \r\n\timport java.util.Observable;  \r\n\timport java.util.Observer;  \r\n\t \r\n\tpublic class CurrentConditionsDisplay implements Observer, DisplayEmlement {  \r\n\t    Observable observable;  \r\n\t    private float temerature;  \r\n\t    private float humidity;  \r\n\t \r\n\t    public CurrentConditionsDisplay(Observable observable) {  \r\n\t        this.observable = observable;  \r\n\t        observable.addObserver(this);  \r\n\t    }  \r\n\t \r\n\t    @Override \r\n\t    public void display() {  \r\n\t        // TODO Auto-generated method stub  \r\n\t        System.out.println(\"Current conditions: \" + temerature + \"F degrees and \" + humidity + \"% humidity\");  \r\n\t    }  \r\n\t \r\n\t    @Override \r\n\t    public void update(Observable arg0, Object arg1) {  \r\n\t        // TODO Auto-generated method stub  \r\n\t        if (arg0 instanceof WeatherData) {  \r\n\t            WeatherData weatherData = (WeatherData)arg0;  \r\n\t            this.temerature = weatherData.getTemperature();  \r\n\t            this.humidity = weatherData.getHumidity();  \r\n\t            display();  \r\n\t        }  \r\n\t    }  \r\n\t \r\n\t}\r\n\r\n---------------------------------\r\n\r\n\tpackage com.Observor;  \r\n\t \r\n\timport java.util.Observable;  \r\n\timport java.util.Observer;  \r\n\t \r\n\tpublic class ForecastDisplay implements Observer, DisplayEmlement {  \r\n\t    private float  currentPressure = 29.92f;  \r\n\t    private float lastPressure;  \r\n\t \r\n\t    public ForecastDisplay(Observable observable) {  \r\n\t        observable.addObserver(this);  \r\n\t    }  \r\n\t \r\n\t    @Override \r\n\t    public void display() {  \r\n\t        // TODO Auto-generated method stub  \r\n\t        System.out.println(\"lastPressure: \" + lastPressure + \" curPressure:\" + currentPressure);  \r\n\t    }  \r\n\t \r\n\t    @Override \r\n\t    public void update(Observable o, Object arg) {  \r\n\t        // TODO Auto-generated method stub  \r\n\t        if (o instanceof WeatherData) {  \r\n\t            lastPressure = currentPressure;  \r\n\t            currentPressure = ((WeatherData) o).getPressure();  \r\n\t        }  \r\n\t        display();  \r\n\t    }  \r\n\t \r\n\t}\r\n\r\n---------------------------\r\n\r\n\tpackage com.Observor;  \r\n\t \r\n\tpublic class WeatherStation {  \r\n\t \r\n\t    public static void main(String[] args) {  \r\n\t        WeatherData weatherData = new WeatherData();  \r\n\t \r\n\t        CurrentConditionsDisplay currentDisplay = new CurrentConditionsDisplay(weatherData);  \r\n\t        ForecastDisplay forecastDisplay = new ForecastDisplay(weatherData);  \r\n\t        weatherData.setMeasurements(80, 90, 100);  // 数字乱来的哦  \r\n\t        weatherData.setMeasurements(1, 2, 3);  \r\n\t        weatherData.setMeasurements(11, 22, 33);  \r\n\t    }  \r\n\t}\r\n","slug":"-2012-09-09-0-html","updated":1422085809000,"excerpt":"","_id":"xa27dwvt7dihr5z1","comments":true,"photos":[],"link":""},{"date":1364054400000,"layout":"post","title":"Calling Convention on X86 -- Using C for Example","categories":["hmzns96sockjtdsf"],"tags":["jvobuhawh5ip821o"],"content":"<p>引用wikipedia上的定义：In computer science, a calling convention is a scheme for how subroutines receive parameters from their caller and how they return a result，即规定了子过程如何从它们的调用者那里取得参数并且返回结果的一种约定。它包含如下5点：</p>\n<ol>\n<li>参数与返回值存放的位置，可以在寄存器中，也可以在调用栈中，又或者两种都有</li>\n<li>向子过程传递参数的顺序，或者单个参数的部分。</li>\n<li>调用前设置工作和调用后清理工作，如何在调用者与被调用者之间分配。</li>\n<li>哪些寄存器可以直接被被调用者使用。</li>\n<li>哪些寄存器可以被认为是volatile和或者non-volatile，若为volatile，则无需被调用者恢复。</li>\n</ol>\n<p>不同的的程序语言使用不同的调用约定，也可以运行在不同的平台之上，包括不同的CPU架构和不同的操作系统。正是如此，若整合用不同程序语言写的模块，或者调用不同程序语言所写的操作系统或者类库的API时可能会出现问题。正是由于存在这种问题，所以才有了调用约定的必要性。  </p>\n<p>通常，一种程序语言存在多种不同的调用约定，可以由编译器所规定，也可以出于优化的情况而由程序员所指定。而不同的CPU架构也有不同的调用约定，比如X86与ARM就有不同的数量的寄存器，当然在其平台上的调用约定也是不同的。</p>\n<p>这里我们先来了解一下X86架构的调用约定。  </p>\n<p>X86架构拥有几种不同的调用约定。但由于其寄存器数量较少，其调用约定通常将参数存放在调用栈上，将返回值(或者其地址)存放在寄存器中。当然还有一些调用约定将参数存放入寄存器中，这类调用约定对一些参数较少同时又是leaf-routies调用将会提高不少性能(invoked frequently)。</p>\n<h2 id=\"一、调用者清理的调用约定：\">一、调用者清理的调用约定：</h2>\n<p>这类调用约定由调用者清理保存在栈上各个参数，典型如变参函数printf()。</p>\n<p><strong>1.　cdecl</strong><br>cdecl为C　declaration的缩写，是一种起源于C语言的调用约定。目前常用于X86架构上的多种编译器中，如VC的编译器就是默认cdecl为种调用约定。在该种调用约定中，子过程的参数被保存在栈上传递，整型返回值与内存地址通过EAX寄存器返回，浮点值则存入STO X87寄存器中返回。</p>\n<p>在C语言的上下文(content)中，函数的参数以从右到左的顺序压入栈中。看下面个段C语言代码：</p>\n<pre><code><span class=\"keyword\">int</span> callee(<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>)<span class=\"comment\">;</span>\n\n<span class=\"keyword\">int</span> caller(void)\n{\n    register <span class=\"keyword\">int</span> <span class=\"keyword\">ret</span><span class=\"comment\">;</span>\n\n    <span class=\"keyword\">ret</span> = callee(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)<span class=\"comment\">;</span>\n    <span class=\"keyword\">ret</span> += <span class=\"number\">5</span><span class=\"comment\">;</span>\n    return <span class=\"keyword\">ret</span><span class=\"comment\">;</span>\n}\n</code></pre><p>在X86上，上述C语言代码将成为如下汇编(AT&amp;T syntax):</p>\n<pre><code>.globl  <span class=\"keyword\">caller</span>\n<span class=\"keyword\">caller</span>:\npushl   <span class=\"variable\">%ebp</span>            ; 将上次保存栈顶压栈\nmovl    <span class=\"variable\">%esp</span>, <span class=\"variable\">%ebp</span>      ; 保存栈顶\npushl   <span class=\"variable\">$3</span>              ; 参数压栈\npushl   <span class=\"variable\">$2</span>              ; 参数压栈\npushl   <span class=\"variable\">$1</span>              ; 参数压栈\ncall    callee          ; subroutines\naddl    <span class=\"variable\">$1</span>2, <span class=\"variable\">%esp</span>       ; 退栈\naddl    <span class=\"variable\">$5</span>, <span class=\"variable\">%eax</span>        ; 将subrouties返回的值加常量<span class=\"number\">5</span>\nleave\nret\n</code></pre><p>研究以上汇编，可见参数是由调用者在调用完成后清理的。这里是简单的整型返回，那如果是复杂的Struct呢，寄存器放不下了！一些编译器将复杂Struct通过内存来返回。首先调用者分配一片内存然后将其地址当作隐藏的第一个参数传入子过程中，在子过程中处理这片内存，最后将这个地址返回。当然，这只是众多处理方法中的一种而已。</p>\n<h2 id=\"二、被调用者清理的调用约定：_\">二、被调用者清理的调用约定：  </h2>\n<p>栈上的参数由被调用者来清理有一个前提，那就是在编译期间要明确有几个字节在栈上。因此，这类调用约定不适用于变参函数，如printf()。</p>\n<p><strong>1 pascal</strong><br>该调用约定是基于Pascal语言的调用约定，其参数压栈顺序为从左至右，在返回前由被调用者负责清理栈帧</p>\n<p><strong>2 stdcall</strong><br>该调用约定是pascal调用约定的变化版本，其参数从右至左压栈，然后由被调用者负责清理杠，返回值存入EAX寄存器中。stdcall调用约定为Win32 API的标准调用约定。</p>\n<p><strong>3 fastcall</strong><br>该调用约定没有标准化，故各编译器各有不同。其中经典的为将一个或者多个参数存放寄存器中，从而减少内存的读取。</p>\n","source":"_posts/2013-03-24-0.md","raw":"---\r\ndate: 2013-03-24\r\nlayout: post\r\ntitle: Calling Convention on X86 -- Using C for Example\r\npermalink: '/2013/03-24-0.html'\r\ncategories:\r\n- c/c++\r\ntags:\r\n- 基础\r\n---\r\n\r\n\r\n引用wikipedia上的定义：In computer science, a calling convention is a scheme for how subroutines receive parameters from their caller and how they return a result，即规定了子过程如何从它们的调用者那里取得参数并且返回结果的一种约定。它包含如下5点：\r\n\r\n1. 参数与返回值存放的位置，可以在寄存器中，也可以在调用栈中，又或者两种都有\r\n2. 向子过程传递参数的顺序，或者单个参数的部分。\r\n3. 调用前设置工作和调用后清理工作，如何在调用者与被调用者之间分配。\r\n4. 哪些寄存器可以直接被被调用者使用。\r\n5. 哪些寄存器可以被认为是volatile和或者non-volatile，若为volatile，则无需被调用者恢复。\r\n\r\n不同的的程序语言使用不同的调用约定，也可以运行在不同的平台之上，包括不同的CPU架构和不同的操作系统。正是如此，若整合用不同程序语言写的模块，或者调用不同程序语言所写的操作系统或者类库的API时可能会出现问题。正是由于存在这种问题，所以才有了调用约定的必要性。  \r\n\r\n通常，一种程序语言存在多种不同的调用约定，可以由编译器所规定，也可以出于优化的情况而由程序员所指定。而不同的CPU架构也有不同的调用约定，比如X86与ARM就有不同的数量的寄存器，当然在其平台上的调用约定也是不同的。\r\n\r\n这里我们先来了解一下X86架构的调用约定。  \r\n\r\nX86架构拥有几种不同的调用约定。但由于其寄存器数量较少，其调用约定通常将参数存放在调用栈上，将返回值(或者其地址)存放在寄存器中。当然还有一些调用约定将参数存放入寄存器中，这类调用约定对一些参数较少同时又是leaf-routies调用将会提高不少性能(invoked frequently)。\r\n\r\n一、调用者清理的调用约定：\r\n----------------------\r\n这类调用约定由调用者清理保存在栈上各个参数，典型如变参函数printf()。\r\n\r\n**1.　cdecl**  \r\ncdecl为C　declaration的缩写，是一种起源于C语言的调用约定。目前常用于X86架构上的多种编译器中，如VC的编译器就是默认cdecl为种调用约定。在该种调用约定中，子过程的参数被保存在栈上传递，整型返回值与内存地址通过EAX寄存器返回，浮点值则存入STO X87寄存器中返回。\r\n\r\n在C语言的上下文(content)中，函数的参数以从右到左的顺序压入栈中。看下面个段C语言代码：\r\n\r\n\tint callee(int, int, int);\r\n\t \r\n\tint caller(void)\r\n\t{\r\n\t    register int ret;\r\n\t \r\n\t\tret = callee(1, 2, 3);\r\n\t\tret += 5;\r\n\t\treturn ret;\r\n\t}\r\n\r\n在X86上，上述C语言代码将成为如下汇编(AT&T syntax):\r\n\r\n\t.globl  caller\r\n\tcaller:\r\n\tpushl   %ebp            ; 将上次保存栈顶压栈\r\n\tmovl    %esp, %ebp      ; 保存栈顶\r\n\tpushl   $3          \t; 参数压栈\r\n\tpushl   $2          \t; 参数压栈\r\n\tpushl   $1          \t; 参数压栈\r\n\tcall    callee          ; subroutines\r\n\taddl    $12, %esp       ; 退栈\r\n\taddl    $5, %eax        ; 将subrouties返回的值加常量5\r\n\tleave\r\n\tret\r\n\r\n研究以上汇编，可见参数是由调用者在调用完成后清理的。这里是简单的整型返回，那如果是复杂的Struct呢，寄存器放不下了！一些编译器将复杂Struct通过内存来返回。首先调用者分配一片内存然后将其地址当作隐藏的第一个参数传入子过程中，在子过程中处理这片内存，最后将这个地址返回。当然，这只是众多处理方法中的一种而已。\r\n\r\n二、被调用者清理的调用约定：  \r\n-----------------------------\r\n栈上的参数由被调用者来清理有一个前提，那就是在编译期间要明确有几个字节在栈上。因此，这类调用约定不适用于变参函数，如printf()。\r\n\r\n**1 pascal**  \r\n该调用约定是基于Pascal语言的调用约定，其参数压栈顺序为从左至右，在返回前由被调用者负责清理栈帧\r\n\r\n**2 stdcall**  \r\n该调用约定是pascal调用约定的变化版本，其参数从右至左压栈，然后由被调用者负责清理杠，返回值存入EAX寄存器中。stdcall调用约定为Win32 API的标准调用约定。\r\n\r\n**3 fastcall**  \r\n该调用约定没有标准化，故各编译器各有不同。其中经典的为将一个或者多个参数存放寄存器中，从而减少内存的读取。","slug":"-2013-03-24-0-html","updated":1419135104000,"excerpt":"","_id":"cpxqfrmcn9u9ee4f","comments":true,"photos":[],"link":""},{"date":1364140800000,"layout":"post","title":"原地排序","categories":["8jwkgptl4juxqcvd"],"tags":["t5iizbepdikhme90","64673jg048ygbdcb"],"content":"<p><strong>题目：</strong><br>Given an unsorted array of size n containing objects with ids of 0 … n-1, sort the array in place and inlinear time. Assume that the objects contain large members such as binary data, so instantiating new copies of the objects is probibitively expensice.</p>\n<p>用另一种表达方式：有一串数字，5, 2, 6, 7, 4, 1, 8, 9, 0, 3, 用O(n)的时间复杂度来实现排序，当然只允许多分配少量临时变量。</p>\n<p>当然，如果有一般的排序算法，最快也就O(nlogn).　那么是否有更好的解决方法吗？由于题设的特殊性，当然有更好的方法。</p>\n<p><strong>Linus说，“Talk is cheep. Show me the code.” 所以直接上代码，show you the code!</strong></p>\n<pre><code><span class=\"preprocessor\">#<span class=\"keyword\">include</span> \"stdio.h\"</span>\n<span class=\"preprocessor\">#<span class=\"keyword\">include</span> \"stdlib.h\"</span>\n\n<span class=\"keyword\">int</span>* general_array(<span class=\"keyword\">int</span> len)\n{\n    <span class=\"keyword\">int</span> i;\n    <span class=\"keyword\">int</span>* <span class=\"built_in\">array</span>;\n\n    <span class=\"built_in\">array</span> = (<span class=\"keyword\">int</span>*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>) * len);\n\n    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; len; ++i) {\n        <span class=\"built_in\">array</span>[i] = i;\n    }\n\n    <span class=\"keyword\">return</span> <span class=\"built_in\">array</span>;\n}\n\n<span class=\"keyword\">void</span> swap(<span class=\"keyword\">int</span>* lhs, <span class=\"keyword\">int</span>* rhs)\n{\n    <span class=\"keyword\">int</span> tmp;\n\n    tmp = *lhs;\n    *lhs = *rhs;\n    *rhs = tmp;\n}\n\n<span class=\"keyword\">void</span> shuffle(<span class=\"keyword\">int</span>* <span class=\"built_in\">array</span>, <span class=\"keyword\">int</span> len)\n{\n    <span class=\"keyword\">int</span> i;\n\n    srand((<span class=\"keyword\">int</span>)time(NULL));\n\n    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; len; ++i) {\n        swap(&amp;<span class=\"built_in\">array</span>[rand()%len], &amp;<span class=\"built_in\">array</span>[i]);\n    }\n}\n\n<span class=\"keyword\">void</span> print_array(<span class=\"keyword\">int</span>* <span class=\"built_in\">array</span>, <span class=\"keyword\">int</span> len)\n{\n    <span class=\"keyword\">int</span> i;\n\n    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; len; ++i) {\n        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d \"</span>, <span class=\"built_in\">array</span>[i]);\n    }\n    <span class=\"built_in\">printf</span>(<span class=\"string\">\"\\n\"</span>);\n}\n\n<span class=\"keyword\">void</span> sort(<span class=\"keyword\">int</span>* <span class=\"built_in\">array</span>, <span class=\"keyword\">int</span> len)\n{\n    <span class=\"keyword\">int</span> i, count = <span class=\"number\">0</span>;\n\n    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; len; ++i) {\n        <span class=\"keyword\">if</span> (<span class=\"built_in\">array</span>[i] != i) {\n            swap(&amp;<span class=\"built_in\">array</span>[i], &amp;<span class=\"built_in\">array</span>[<span class=\"built_in\">array</span>[i]]);\n            ++count;\n        }\n    }\n\n    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, count);\n}\n\n<span class=\"keyword\">int</span> main()\n{\n    <span class=\"keyword\">int</span> arrayLen;\n    <span class=\"keyword\">int</span>* <span class=\"built_in\">array</span>;\n\n    arrayLen = <span class=\"number\">10</span>;\n    <span class=\"built_in\">array</span> = general_array(arrayLen);\n\n    shuffle(<span class=\"built_in\">array</span>, arrayLen);\n    print_array(<span class=\"built_in\">array</span>, arrayLen);\n\n    sort(<span class=\"built_in\">array</span>, arrayLen);\n    print_array(<span class=\"built_in\">array</span>, arrayLen);\n\n    <span class=\"built_in\">free</span>(<span class=\"built_in\">array</span>);\n\n    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;\n}\n</code></pre>","source":"_posts/2013-03-25-0.md","raw":"---\r\ndate: 2013-03-25\r\nlayout: post\r\ntitle: 原地排序\r\npermalink: '/2013/03-25-0.html'\r\ncategories:\r\n- 算法\r\ntags:\r\n- 面试题\r\n- 排序\r\n---\r\n\r\n\r\n**题目：**  \r\nGiven an unsorted array of size n containing objects with ids of 0 … n-1, sort the array in place and inlinear time. Assume that the objects contain large members such as binary data, so instantiating new copies of the objects is probibitively expensice.\r\n\r\n用另一种表达方式：有一串数字，5, 2, 6, 7, 4, 1, 8, 9, 0, 3, 用O(n)的时间复杂度来实现排序，当然只允许多分配少量临时变量。\r\n\r\n当然，如果有一般的排序算法，最快也就O(nlogn).　那么是否有更好的解决方法吗？由于题设的特殊性，当然有更好的方法。\r\n\r\n**Linus说，“Talk is cheep. Show me the code.” 所以直接上代码，show you the code!**\r\n\r\n\t#include \"stdio.h\"\r\n\t#include \"stdlib.h\"\r\n\t \r\n\tint* general_array(int len)\r\n\t{\r\n\t    int i;\r\n\t    int* array;\r\n\t \r\n\t    array = (int*)malloc(sizeof(int) * len);\r\n\t \r\n\t    for (i = 0; i < len; ++i) {\r\n\t        array[i] = i;\r\n\t    }\r\n\t \r\n\t    return array;\r\n\t}\r\n\t \r\n\tvoid swap(int* lhs, int* rhs)\r\n\t{\r\n\t    int tmp;\r\n\t \r\n\t    tmp = *lhs;\r\n\t    *lhs = *rhs;\r\n\t    *rhs = tmp;\r\n\t}\r\n\t \r\n\tvoid shuffle(int* array, int len)\r\n\t{\r\n\t    int i;\r\n\t \r\n\t    srand((int)time(NULL));\r\n\t \r\n\t    for (i = 0; i < len; ++i) {\r\n\t        swap(&array[rand()%len], &array[i]);\r\n\t    }\r\n\t}\r\n\t \r\n\tvoid print_array(int* array, int len)\r\n\t{\r\n\t    int i;\r\n\t \r\n\t    for (i = 0; i < len; ++i) {\r\n\t        printf(\"%d \", array[i]);\r\n\t    }\r\n\t    printf(\"\\n\");\r\n\t}\r\n\t \r\n\tvoid sort(int* array, int len)\r\n\t{\r\n\t    int i, count = 0;\r\n\t \r\n\t    for (i = 0; i < len; ++i) {\r\n\t        if (array[i] != i) {\r\n\t            swap(&array[i], &array[array[i]]);\r\n\t            ++count;\r\n\t        }\r\n\t    }\r\n\t \r\n\t    printf(\"%d\\n\", count);\r\n\t}\r\n\t \r\n\tint main()\r\n\t{\r\n\t    int arrayLen;\r\n\t    int* array;\r\n\t \r\n\t    arrayLen = 10;\r\n\t    array = general_array(arrayLen);\r\n\t \r\n\t    shuffle(array, arrayLen);\r\n\t    print_array(array, arrayLen);\r\n\t \r\n\t    sort(array, arrayLen);\r\n\t    print_array(array, arrayLen);\r\n\t \r\n\t    free(array);\r\n\t \r\n\t    return 0;\r\n\t}","slug":"-2013-03-25-0-html","updated":1419134625000,"excerpt":"","_id":"r4nkpasjc54aioz9","comments":true,"photos":[],"link":""},{"date":1371830400000,"layout":"post","title":"First-class Funciton's Cry","categories":["c6jb1xulxw9ix8l0"],"tags":["8zwe66puqwnkc3ll"],"content":"<p>what’s First-class function? 没听过啊。小猿我也才前几天头一回听说。<br>直接引用wiki上的原话：In computer science, a programming language is said to have first-class functions if it treats functions ad first-class citizens. Specifically, this means the language supports passing functions as arguments to other functions, returning them as the values from other functions, and assigning them to variables or storing them in data structures.</p>\n<p>What? 这就是“<strong>一等函数</strong>”啊。以C/C++谋生的小猿感觉有点熟悉啊。这不就是函数指针吗？答案是：NO! 函数指针只是C/C++在其函数类型不是first-class object的情况下而所用的替代品。</p>\n<p>那First-class function到底有什么好处呢？说实话，小猿也说不清楚(水平太次)，只能用以 Lua VS C 简略说明下其不同之处，各位看官莫要见笑。</p>\n<h2 id=\"ROUND_1\"><strong>ROUND 1</strong></h2>\n<p>Lua首先很轻松地支持高阶函数（什么是高阶函数，参见<a href=\"http://en.wikipedia.org/wiki/Higher-order_function\" target=\"_blank\" rel=\"external\">wiki</a>）。</p>\n<p>lua版本：</p>\n<pre><code><span class=\"comment\">-- higher-order functions: passing functions as arguments</span>\n<span class=\"comment\">-- @param f 函数</span>\n<span class=\"comment\">-- @param t 函数f的参数</span>\n<span class=\"keyword\">local</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">map</span><span class=\"params\">(f, t)</span></span>\n    <span class=\"keyword\">for</span> k, v <span class=\"keyword\">in</span> <span class=\"built_in\">ipairs</span>(t) <span class=\"keyword\">do</span>\n        f(v)\n    <span class=\"keyword\">end</span>\n<span class=\"keyword\">end</span>\n</code></pre><p>哈哈，不就是如此嘛，C语言这位大神也可以轻松搞定：</p>\n<p>C版本：</p>\n<pre><code><span class=\"comment\">// higher-order functions: passing functions as arguments</span>\n<span class=\"keyword\">void</span> <span class=\"built_in\">map</span>(<span class=\"keyword\">int</span> (*f)(<span class=\"keyword\">int</span>), <span class=\"keyword\">int</span> arr[], <span class=\"keyword\">int</span> n)\n{\n    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) {\n        f(arr[i]);\n    }\n}\n</code></pre><h2 id=\"ROUND_2\"><strong>ROUND 2</strong></h2>\n<p>lua 轻松搞定匿名函数。</p>\n<p>lua版本：</p>\n<pre><code><span class=\"comment\">-- anonymous and nested functions</span>\nmap(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(v)</span></span> <span class=\"built_in\">print</span>(v) <span class=\"keyword\">end</span>, { <span class=\"number\">1</span>, <span class=\"number\">2</span> }) <span class=\"comment\">-- function map is defined in ROUND 1</span>\n</code></pre><p>C大神流了点汗，也使出相应招术。</p>\n<p>C版本：</p>\n<pre><code>// <span class=\"keyword\">not</span> support anonymous <span class=\"keyword\">and</span> nested functions, have to <span class=\"keyword\">bind</span> it to a name instead\n<span class=\"keyword\">int</span> <span class=\"keyword\">print</span>(<span class=\"keyword\">int</span> v)\n{\n    <span class=\"keyword\">printf</span>(<span class=\"string\">\"<span class=\"variable\">%d</span>\"</span>, v);\n}\n<span class=\"keyword\">int</span> main()\n{\n    <span class=\"keyword\">int</span> arr = { <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span> };\n    <span class=\"keyword\">map</span>(<span class=\"keyword\">print</span>, arr, sizeof(arr)/sizeof(<span class=\"keyword\">int</span>));\n    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;\n}\n</code></pre><h2 id=\"ROUND_3\"><strong>ROUND 3</strong></h2>\n<p>lua 使用<a href=\"http://en.wikipedia.org/wiki/Closure_%28computer_science%29\" target=\"_blank\" rel=\"external\">cloures</a>绝招。</p>\n<p>lua版本：</p>\n<pre><code><span class=\"comment\">-- non-local variables and closures</span>\n<span class=\"keyword\">local</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>\n    <span class=\"keyword\">local</span> offset = <span class=\"number\">10</span>\n    <span class=\"keyword\">local</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">map</span><span class=\"params\">(f, t)</span></span>\n        <span class=\"keyword\">for</span> k, v <span class=\"keyword\">in</span> <span class=\"built_in\">ipairs</span>(t) <span class=\"keyword\">do</span>\n            f(v)\n        <span class=\"keyword\">end</span>\n    <span class=\"keyword\">end</span>\n    map(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(v)</span></span> offset = offset + v <span class=\"built_in\">print</span>(offset) <span class=\"keyword\">end</span>, { <span class=\"number\">1</span>, <span class=\"number\">2</span> })\n<span class=\"keyword\">end</span>\nmain()\n</code></pre><p>C虽然没有明显的吃亏，但已然快招架不住。</p>\n<p>C版本：</p>\n<pre><code><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> {\n    <span class=\"keyword\">void</span> (*f) (<span class=\"keyword\">int</span>);\n    <span class=\"keyword\">int</span>* offset;\n} closure_t;\n<span class=\"keyword\">void</span> print(<span class=\"keyword\">int</span> v)\n{\n    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, v);\n}\n<span class=\"keyword\">void</span> <span class=\"built_in\">map</span>(closure_t closure, <span class=\"keyword\">int</span> arr[], <span class=\"keyword\">int</span> n)\n{\n    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) {\n        *(closure.offset) += arr[i];\n        closure.f(*(closure.offset));\n    }\n}\n<span class=\"keyword\">int</span> main()\n{\n    <span class=\"keyword\">int</span> offset = <span class=\"number\">10</span>;\n    closure_t closure = { print, &amp;offset };\n    <span class=\"keyword\">int</span> arr[] = { <span class=\"number\">1</span>, <span class=\"number\">2</span> };\n    <span class=\"built_in\">map</span>(closure, arr, <span class=\"keyword\">sizeof</span>(arr) / <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>));\n    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;\n}\n</code></pre><h2 id=\"ROUND_4:\"><strong>ROUND 4:</strong></h2>\n<p>lua又使用一招返回函数:</p>\n<p>Lua版本：</p>\n<pre><code><span class=\"comment\">-- higher-order functions: returning functions as reuslt</span>\n<span class=\"comment\">-- Assigning functions to variables</span>\n<span class=\"keyword\">local</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getPrintFunc</span><span class=\"params\">()</span></span>\n    <span class=\"keyword\">local</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myPrint</span><span class=\"params\">(v)</span></span>\n        <span class=\"built_in\">print</span>(v)\n    <span class=\"keyword\">end</span>\n    <span class=\"keyword\">return</span> myPrint\n<span class=\"keyword\">end</span>\n<span class=\"keyword\">local</span> func = getPrintFunc()\nfunc(<span class=\"number\">1</span>)\n</code></pre><p>C以它老江湖的经验接住了此招。</p>\n<p>C版本：</p>\n<pre><code>typedef void (*f)(int);\nvoid <span class=\"built_in\">print</span>(int v)\n{\n    printf(<span class=\"string\">\"%d\\n\"</span>, v);\n}\nf getPrintFunc()\n{\n    <span class=\"keyword\">return</span> <span class=\"built_in\">print</span>;\n}\nint main()\n{\n    f <span class=\"func\"><span class=\"keyword\">func</span></span> = getPrintFunc();\n    <span class=\"func\"><span class=\"keyword\">func</span><span class=\"params\">(1)</span></span>;\n    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;\n}\n</code></pre><p>比武结束，当然以已之长攻他之短并不是十分光彩的事，但是这里也是为了说明理解First-class function的方便之处。其实First-class function在高阶函数中还是很有用的，当然实际工作中，如果用到闭包、匿名函数则其方便之处不言而喻。当然，具体情况还是具体分析，我们是辩证法的推崇者嘛。</p>\n","source":"_posts/2013-06-22-0.md","raw":"---\r\ndate: 2013-06-22\r\nlayout: post\r\ntitle: First-class Funciton's Cry\r\npermalink: '/2013/06-22-0.html'\r\ncategories:\r\n- 编程思维\r\ntags:\r\n- 高阶函数 \r\n---\r\n\r\nwhat’s First-class function? 没听过啊。小猿我也才前几天头一回听说。  \r\n直接引用wiki上的原话：In computer science, a programming language is said to have first-class functions if it treats functions ad first-class citizens. Specifically, this means the language supports passing functions as arguments to other functions, returning them as the values from other functions, and assigning them to variables or storing them in data structures.\r\n\r\nWhat? 这就是“**一等函数**”啊。以C/C++谋生的小猿感觉有点熟悉啊。这不就是函数指针吗？答案是：NO! 函数指针只是C/C++在其函数类型不是first-class object的情况下而所用的替代品。\r\n\r\n那First-class function到底有什么好处呢？说实话，小猿也说不清楚(水平太次)，只能用以 Lua VS C 简略说明下其不同之处，各位看官莫要见笑。\r\n\r\n**ROUND 1**\r\n-----------\r\n\r\nLua首先很轻松地支持高阶函数（什么是高阶函数，参见[wiki](http://en.wikipedia.org/wiki/Higher-order_function)）。\r\n\r\nlua版本：\r\n\r\n\t-- higher-order functions: passing functions as arguments\r\n\t-- @param f 函数\r\n\t-- @param t 函数f的参数\r\n\tlocal function map(f, t)\r\n\t    for k, v in ipairs(t) do\r\n\t        f(v)\r\n\t    end\r\n\tend\r\n\r\n哈哈，不就是如此嘛，C语言这位大神也可以轻松搞定：\r\n\r\nC版本：\r\n     \r\n\t// higher-order functions: passing functions as arguments\r\n\tvoid map(int (*f)(int), int arr[], int n)\r\n\t{\r\n\t    for (int i = 0; i < n; ++i) {\r\n\t        f(arr[i]);\r\n\t    }\r\n\t}\r\n\r\n**ROUND 2**\r\n-----------\r\n\r\nlua 轻松搞定匿名函数。\r\n\r\nlua版本：\r\n\r\n\t-- anonymous and nested functions\r\n\tmap(function(v) print(v) end, { 1, 2 }) -- function map is defined in ROUND 1\r\n\r\nC大神流了点汗，也使出相应招术。\r\n\r\nC版本：\r\n\r\n\t// not support anonymous and nested functions, have to bind it to a name instead\r\n\tint print(int v)\r\n\t{\r\n\t    printf(\"%d\", v);\r\n\t}\r\n\tint main()\r\n\t{\r\n\t    int arr = { 1, 2, 3 };\r\n\t    map(print, arr, sizeof(arr)/sizeof(int));\r\n\t    return 0;\r\n\t}\r\n\r\n**ROUND 3**\r\n-----------\r\n\r\nlua 使用[cloures](http://en.wikipedia.org/wiki/Closure_%28computer_science%29)绝招。\r\n\r\nlua版本：\r\n\r\n\t-- non-local variables and closures\r\n\tlocal function main()\r\n\t    local offset = 10\r\n\t    local function map(f, t)\r\n\t        for k, v in ipairs(t) do\r\n\t            f(v)\r\n\t        end\r\n\t    end\r\n\t    map(function(v) offset = offset + v print(offset) end, { 1, 2 })\r\n\tend\r\n\tmain()\r\n\r\nC虽然没有明显的吃亏，但已然快招架不住。\r\n\r\nC版本：\r\n\r\n\ttypedef struct {\r\n\t    void (*f) (int);\r\n\t    int* offset;\r\n\t} closure_t;\r\n\tvoid print(int v)\r\n\t{\r\n\t    printf(\"%d\\n\", v);\r\n\t}\r\n\tvoid map(closure_t closure, int arr[], int n)\r\n\t{\r\n\t    for (int i = 0; i < n; ++i) {\r\n\t        *(closure.offset) += arr[i];\r\n\t        closure.f(*(closure.offset));\r\n\t    }\r\n\t}\r\n\tint main()\r\n\t{\r\n\t    int offset = 10;\r\n\t    closure_t closure = { print, &offset };\r\n\t    int arr[] = { 1, 2 };\r\n\t    map(closure, arr, sizeof(arr) / sizeof(int));\r\n\t    return 0;\r\n\t}\r\n\r\n**ROUND 4:**\r\n-----------\r\n\r\nlua又使用一招返回函数:\r\n\r\nLua版本：\r\n\r\n\t-- higher-order functions: returning functions as reuslt\r\n\t-- Assigning functions to variables\r\n\tlocal function getPrintFunc()\r\n\t    local function myPrint(v)\r\n\t        print(v)\r\n\t    end\r\n\t    return myPrint\r\n\tend\r\n\tlocal func = getPrintFunc()\r\n\tfunc(1)\r\n\r\nC以它老江湖的经验接住了此招。\r\n\r\nC版本：\r\n\r\n\ttypedef void (*f)(int);\r\n\tvoid print(int v)\r\n\t{\r\n\t    printf(\"%d\\n\", v);\r\n\t}\r\n\tf getPrintFunc()\r\n\t{\r\n\t    return print;\r\n\t}\r\n\tint main()\r\n\t{\r\n\t    f func = getPrintFunc();\r\n\t    func(1);\r\n\t    return 0;\r\n\t}\r\n\r\n比武结束，当然以已之长攻他之短并不是十分光彩的事，但是这里也是为了说明理解First-class function的方便之处。其实First-class function在高阶函数中还是很有用的，当然实际工作中，如果用到闭包、匿名函数则其方便之处不言而喻。当然，具体情况还是具体分析，我们是辩证法的推崇者嘛。","slug":"-2013-06-22-0-html","updated":1419133663000,"excerpt":"","_id":"kay6zd8pjphfm8sz","comments":true,"photos":[],"link":""},{"date":1371916800000,"layout":"post","title":"编程语言与编程思维杂感","categories":["c6jb1xulxw9ix8l0"],"tags":[],"content":"<p><strong>“编程语言不仅仅是一种技术，它更是一种思维。” －－ Paul Graham</strong></p>\n<p>以前经常看到这样的言论：“什么C/C++，Java, C#等等都是编程语言而已，实现你想法的工具，学好一门语言，以不变应万变，就算用其他语言也是差不多的，只是工具变了而已。”这样的说法真心有失偏颇。没错，什么语言都只是工具，但他们不仅仅是工具，也包含了用这种工具时候所形成的思维方式。</p>\n<p>“著名的语言学家Roman Jakobson曾用一句简单的名言指明了语言之间最关键的不同之处：语言之间的不同本质在于它们能够传达的信息，而不是它们不能传达的信息。这句名言告诉了我们解放我们母语潜能的关键所在：不同的语言用不同的方式影响我们的大脑思维，这并不是因为这种语言可以让我们这样思考问题，而是它在强迫你这样思考。”<br>“当你的语言日常的强迫你去使用某些类型的信息进行说明，这会迫使你去留意那些使用其它种语言的人平时不会注意的某些细节和体验。因为这种说法的习惯是从小养成的，这种习惯已经成为大脑思维的习惯，超越了语言本身，直接影响了你的言行，感知，联想，感觉，记忆，以及世界观。”</p>\n<p>Jokobson的名言同样也适合于编程语言界，不同语言对于程序员的思维要求并不是一样的。如C语言作为一门过程性语言，给予程序员的思维就是过程性的，先做什么，后做什么，任何一个步骤都是线性过程思维。而Java给我们带来的是一切均为对象的思维，当程序员码出任何一行代码之前所思考的是如何构成当前这个对象，该对象有何数据，有何处理这些数据的方法。所以，两种程序员码出来的代码是完全两种风格的。</p>\n<p>C和Java两种程序员码出来的代码当然是两种风格的，这有什么大惊小怪的。但是同样两位Java程序员码出来的Java代码也是风格各异，同样的工具，在不同思维的带领下，就会产生不同的结果。</p>\n<p>举个例子，有一棵Tree，遍历其结点，并进行打印各结点的值。</p>\n<p>Example 1:</p>\n<pre><code><span class=\"keyword\">class</span> Tree {\n<span class=\"keyword\">public</span>:\n    Tree(<span class=\"keyword\">const</span> std::<span class=\"built_in\">string</span>&amp; name, <span class=\"keyword\">const</span> std::<span class=\"stl_container\"><span class=\"built_in\">vector</span>&lt;Tree*&gt;</span> children);\n    ~Tree();\n\n    <span class=\"keyword\">void</span> visit();\n\n    <span class=\"keyword\">void</span> visitAll();\n\n    std::<span class=\"built_in\">string</span> getName()<span class=\"keyword\">const</span> { <span class=\"keyword\">return</span> m_name; }\n\n<span class=\"keyword\">private</span>:\n    std::<span class=\"stl_container\"><span class=\"built_in\">vector</span>&lt;Tree*&gt;</span> m_children;\n    std::<span class=\"built_in\">string</span> m_name;\n};\n\nTree::Tree(<span class=\"keyword\">const</span> std::<span class=\"built_in\">string</span>&amp; name, <span class=\"keyword\">const</span> std::<span class=\"stl_container\"><span class=\"built_in\">vector</span>&lt;Tree*&gt;</span> children)\n    : m_name(name),\n      m_children(children)\n{\n\n}\n\nTree::~Tree()\n{\n    for_each(m_children.begin(), m_children.end(), [](Tree* child){ <span class=\"keyword\">delete</span> child; });\n}\n\n<span class=\"keyword\">void</span> Tree::visit()\n{\n    std::<span class=\"built_in\">cout</span> &lt;&lt; m_name &lt;&lt; std::endl;\n}\n\n<span class=\"keyword\">void</span> Tree::visitAll(std::function&lt;<span class=\"keyword\">void</span>(Tree*)&gt; action)\n{\n    visit(action);\n\n    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m_children.size(); ++i) {        m_children[i]-&gt;visitAll(action);\n    }\n}\n\n<span class=\"keyword\">static</span> Tree* constructTree()\n{\n    std::<span class=\"stl_container\"><span class=\"built_in\">vector</span>&lt;Tree*&gt;</span> v;\n    std::<span class=\"stl_container\"><span class=\"built_in\">vector</span>&lt;Tree*&gt;</span> emptyVector;\n    v.push_back(<span class=\"keyword\">new</span> Tree(<span class=\"string\">\"left child\"</span>, emptyVector));\n    v.push_back(<span class=\"keyword\">new</span> Tree(<span class=\"string\">\"right child\"</span>, emptyVector));\n\n    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Tree(<span class=\"string\">\"root\"</span>, v);\n}\n\n<span class=\"keyword\">static</span> <span class=\"keyword\">void</span> destructTree(Tree* t)\n{\n    <span class=\"keyword\">delete</span> t;\n}\n\n<span class=\"keyword\">int</span> main()\n{\n    Tree* root = constructTree();\n\n    root-&gt;visitAll();\n\n    destructTree(root);\n\n    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;\n}\n</code></pre><p>没错，上述实现方法的确可行，但是如果遍历每一个结点，具体的操作由客户(依然是程序员)来决定，那又如何？似乎思路被堵住了。奥秘如下：</p>\n<p>Example 2:</p>\n<pre><code><span class=\"keyword\">class</span> Tree {\n<span class=\"keyword\">public</span>:\n    Tree(<span class=\"keyword\">const</span> std::<span class=\"built_in\">string</span>&amp; name, <span class=\"keyword\">const</span> std::<span class=\"stl_container\"><span class=\"built_in\">vector</span>&lt;Tree*&gt;</span> children);\n    ~Tree();\n\n    <span class=\"keyword\">void</span> visit(std::function&lt;<span class=\"keyword\">void</span>(Tree*)&gt; action);\n\n    <span class=\"keyword\">void</span> visitAll(std::function&lt;<span class=\"keyword\">void</span>(Tree*)&gt; action);\n\n    std::<span class=\"built_in\">string</span> getName()<span class=\"keyword\">const</span> { <span class=\"keyword\">return</span> m_name; }\n\n<span class=\"keyword\">private</span>:\n    std::<span class=\"stl_container\"><span class=\"built_in\">vector</span>&lt;Tree*&gt;</span> m_children;\n    std::<span class=\"built_in\">string</span> m_name;\n};\n\nTree::Tree(<span class=\"keyword\">const</span> std::<span class=\"built_in\">string</span>&amp; name, <span class=\"keyword\">const</span> std::<span class=\"stl_container\"><span class=\"built_in\">vector</span>&lt;Tree*&gt;</span> children)\n    : m_name(name),\n      m_children(children)\n{\n\n}\n\nTree::~Tree()\n{\n    for_each(m_children.begin(), m_children.end(), [](Tree* child){ <span class=\"keyword\">delete</span> child; });\n}\n\n<span class=\"keyword\">void</span> Tree::visit(std::function&lt;<span class=\"keyword\">void</span>(Tree*)&gt; action)\n{\n    action(<span class=\"keyword\">this</span>);\n}\n\n<span class=\"keyword\">void</span> Tree::visitAll(std::function&lt;<span class=\"keyword\">void</span>(Tree*)&gt; action)\n{\n    visit(action);\n\n    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m_children.size(); ++i) {        m_children[i]-&gt;visitAll(action);\n    }\n}\n\n<span class=\"keyword\">static</span> Tree* constructTree()\n{\n    std::<span class=\"stl_container\"><span class=\"built_in\">vector</span>&lt;Tree*&gt;</span> v;\n    std::<span class=\"stl_container\"><span class=\"built_in\">vector</span>&lt;Tree*&gt;</span> emptyVector;\n    v.push_back(<span class=\"keyword\">new</span> Tree(<span class=\"string\">\"left child\"</span>, emptyVector));\n    v.push_back(<span class=\"keyword\">new</span> Tree(<span class=\"string\">\"right child\"</span>, emptyVector));\n\n    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Tree(<span class=\"string\">\"root\"</span>, v);\n}\n\n<span class=\"keyword\">static</span> <span class=\"keyword\">void</span> destructTree(Tree* t)\n{\n    <span class=\"keyword\">delete</span> t;\n}\n\n<span class=\"keyword\">int</span> main()\n{\n    Tree* root = constructTree();\n\n    root-&gt;visitAll([](Tree* t) { std::<span class=\"built_in\">cout</span> &lt;&lt; t-&gt;getName() &lt;&lt; std::endl; });\n\n    destructTree(root);\n\n    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;\n}\n</code></pre><p>相当巧妙的思维，其实也是受一段ruby代码的启发，不同的程序语言的思维的启发。所以大神们说，每年至少学习一门新的编程语言是相当有道理的。当然我们学习它并不是为了把它使用在工作中（若是能使用那再好不过，因为实践是最好的老师），而是学习该语言随之而来的编程思维，如同简单的遍历Tree一样。</p>\n<p>最后，附上启发这篇怪文的Ruby源码。</p>\n<pre><code><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Tree</span></span>\n    <span class=\"keyword\">attr_accessor</span> <span class=\"symbol\">:children</span>, <span class=\"symbol\">:node_name</span>\n\n    <span class=\"function\"><span class=\"keyword\">def</span> </span>initialize(name, children = [])\n        <span class=\"variable\">@children</span> = children\n        <span class=\"variable\">@node_name</span> = name\n    <span class=\"keyword\">end</span>\n\n    <span class=\"function\"><span class=\"keyword\">def</span> </span>visit_all(&amp;block)\n        visit(&amp;block)\n        children.each { |c| c.visit_all &amp;block }\n    <span class=\"keyword\">end</span>\n\n    <span class=\"function\"><span class=\"keyword\">def</span> </span>visit(&amp;block)\n        block.call <span class=\"keyword\">self</span>\n    <span class=\"keyword\">end</span>\n<span class=\"keyword\">end</span>\n\nruby_tree = <span class=\"constant\">Tree</span>.new(<span class=\"string\">\"Ruby\"</span>,\n    [<span class=\"constant\">Tree</span>.new(<span class=\"string\">\"Reia\"</span>),\n        <span class=\"constant\">Tree</span>.new(<span class=\"string\">\"MacRuby\"</span>)])\n\nputs <span class=\"string\">\"Visiting a node\"</span>\nruby_tree.visit { |node| puts node.node_name }\n\nputs <span class=\"string\">\"Visiting entire tree\"</span>\nruby_tree.visit_all { |node| puts node.node_name }\n</code></pre>","source":"_posts/2013-06-23-0.md","raw":"---\r\ndate: 2013-06-23\r\nlayout: post\r\ntitle: 编程语言与编程思维杂感\r\npermalink: '/2013/06-23-0.html'\r\ncategories: 编程思维\r\ntags:\r\n---\r\n\r\n\r\n**“编程语言不仅仅是一种技术，它更是一种思维。” －－ Paul Graham**\r\n\r\n以前经常看到这样的言论：“什么C/C++，Java, C#等等都是编程语言而已，实现你想法的工具，学好一门语言，以不变应万变，就算用其他语言也是差不多的，只是工具变了而已。”这样的说法真心有失偏颇。没错，什么语言都只是工具，但他们不仅仅是工具，也包含了用这种工具时候所形成的思维方式。\r\n\r\n“著名的语言学家Roman Jakobson曾用一句简单的名言指明了语言之间最关键的不同之处：语言之间的不同本质在于它们能够传达的信息，而不是它们不能传达的信息。这句名言告诉了我们解放我们母语潜能的关键所在：不同的语言用不同的方式影响我们的大脑思维，这并不是因为这种语言可以让我们这样思考问题，而是它在强迫你这样思考。”\r\n“当你的语言日常的强迫你去使用某些类型的信息进行说明，这会迫使你去留意那些使用其它种语言的人平时不会注意的某些细节和体验。因为这种说法的习惯是从小养成的，这种习惯已经成为大脑思维的习惯，超越了语言本身，直接影响了你的言行，感知，联想，感觉，记忆，以及世界观。”\r\n\r\nJokobson的名言同样也适合于编程语言界，不同语言对于程序员的思维要求并不是一样的。如C语言作为一门过程性语言，给予程序员的思维就是过程性的，先做什么，后做什么，任何一个步骤都是线性过程思维。而Java给我们带来的是一切均为对象的思维，当程序员码出任何一行代码之前所思考的是如何构成当前这个对象，该对象有何数据，有何处理这些数据的方法。所以，两种程序员码出来的代码是完全两种风格的。\r\n\r\nC和Java两种程序员码出来的代码当然是两种风格的，这有什么大惊小怪的。但是同样两位Java程序员码出来的Java代码也是风格各异，同样的工具，在不同思维的带领下，就会产生不同的结果。\r\n\r\n举个例子，有一棵Tree，遍历其结点，并进行打印各结点的值。\r\n\r\nExample 1:\r\n\r\n\tclass Tree {\r\n\tpublic:\r\n\t    Tree(const std::string& name, const std::vector<Tree*> children);\r\n\t    ~Tree();\r\n\t \r\n\t    void visit();\r\n\t \r\n\t    void visitAll();\r\n\t \r\n\t    std::string getName()const { return m_name; }\r\n\t \r\n\tprivate:\r\n\t    std::vector<Tree*> m_children;\r\n\t    std::string m_name;\r\n\t};\r\n\t \r\n\tTree::Tree(const std::string& name, const std::vector<Tree*> children)\r\n\t    : m_name(name),\r\n\t      m_children(children)\r\n\t{\r\n\t \r\n\t}\r\n\t \r\n\tTree::~Tree()\r\n\t{\r\n\t    for_each(m_children.begin(), m_children.end(), [](Tree* child){ delete child; });\r\n\t}\r\n\t \r\n\tvoid Tree::visit()\r\n\t{\r\n\t    std::cout << m_name << std::endl;\r\n\t}\r\n\t \r\n\tvoid Tree::visitAll(std::function<void(Tree*)> action)\r\n\t{\r\n\t    visit(action);\r\n\t \r\n\t    for (int i = 0; i < m_children.size(); ++i) {        m_children[i]->visitAll(action);\r\n\t    }\r\n\t}\r\n\t \r\n\tstatic Tree* constructTree()\r\n\t{\r\n\t    std::vector<Tree*> v;\r\n\t    std::vector<Tree*> emptyVector;\r\n\t    v.push_back(new Tree(\"left child\", emptyVector));\r\n\t    v.push_back(new Tree(\"right child\", emptyVector));\r\n\t \r\n\t    return new Tree(\"root\", v);\r\n\t}\r\n\t \r\n\tstatic void destructTree(Tree* t)\r\n\t{\r\n\t    delete t;\r\n\t}\r\n\t \r\n\tint main()\r\n\t{\r\n\t    Tree* root = constructTree();\r\n\t \r\n\t    root->visitAll();\r\n\t \r\n\t    destructTree(root);\r\n\t \r\n\t    return 0;\r\n\t}\r\n\r\n没错，上述实现方法的确可行，但是如果遍历每一个结点，具体的操作由客户(依然是程序员)来决定，那又如何？似乎思路被堵住了。奥秘如下：\r\n\r\nExample 2:\r\n\r\n\tclass Tree {\r\n\tpublic:\r\n\t    Tree(const std::string& name, const std::vector<Tree*> children);\r\n\t    ~Tree();\r\n\t \r\n\t    void visit(std::function<void(Tree*)> action);\r\n\t \r\n\t    void visitAll(std::function<void(Tree*)> action);\r\n\t \r\n\t    std::string getName()const { return m_name; }\r\n\t \r\n\tprivate:\r\n\t    std::vector<Tree*> m_children;\r\n\t    std::string m_name;\r\n\t};\r\n\t \r\n\tTree::Tree(const std::string& name, const std::vector<Tree*> children)\r\n\t    : m_name(name),\r\n\t      m_children(children)\r\n\t{\r\n\t \r\n\t}\r\n\t \r\n\tTree::~Tree()\r\n\t{\r\n\t    for_each(m_children.begin(), m_children.end(), [](Tree* child){ delete child; });\r\n\t}\r\n\t \r\n\tvoid Tree::visit(std::function<void(Tree*)> action)\r\n\t{\r\n\t    action(this);\r\n\t}\r\n\t \r\n\tvoid Tree::visitAll(std::function<void(Tree*)> action)\r\n\t{\r\n\t    visit(action);\r\n\t \r\n\t    for (int i = 0; i < m_children.size(); ++i) {        m_children[i]->visitAll(action);\r\n\t    }\r\n\t}\r\n\t \r\n\tstatic Tree* constructTree()\r\n\t{\r\n\t    std::vector<Tree*> v;\r\n\t    std::vector<Tree*> emptyVector;\r\n\t    v.push_back(new Tree(\"left child\", emptyVector));\r\n\t    v.push_back(new Tree(\"right child\", emptyVector));\r\n\t \r\n\t    return new Tree(\"root\", v);\r\n\t}\r\n\t \r\n\tstatic void destructTree(Tree* t)\r\n\t{\r\n\t    delete t;\r\n\t}\r\n\t \r\n\tint main()\r\n\t{\r\n\t    Tree* root = constructTree();\r\n\t \r\n\t    root->visitAll([](Tree* t) { std::cout << t->getName() << std::endl; });\r\n\t \r\n\t    destructTree(root);\r\n\t \r\n\t    return 0;\r\n\t}\r\n\r\n相当巧妙的思维，其实也是受一段ruby代码的启发，不同的程序语言的思维的启发。所以大神们说，每年至少学习一门新的编程语言是相当有道理的。当然我们学习它并不是为了把它使用在工作中（若是能使用那再好不过，因为实践是最好的老师），而是学习该语言随之而来的编程思维，如同简单的遍历Tree一样。\r\n\r\n最后，附上启发这篇怪文的Ruby源码。\r\n\r\n\tclass Tree\r\n\t    attr_accessor :children, :node_name\r\n\t \r\n\t    def initialize(name, children = [])\r\n\t        @children = children\r\n\t        @node_name = name\r\n\t    end\r\n\t \r\n\t    def visit_all(&block)\r\n\t        visit(&block)\r\n\t        children.each { |c| c.visit_all &block }\r\n\t    end\r\n\t \r\n\t    def visit(&block)\r\n\t        block.call self\r\n\t    end\r\n\tend\r\n\t \r\n\truby_tree = Tree.new(\"Ruby\",\r\n\t    [Tree.new(\"Reia\"),\r\n\t        Tree.new(\"MacRuby\")])\r\n\t \r\n\tputs \"Visiting a node\"\r\n\truby_tree.visit { |node| puts node.node_name }\r\n\t \r\n\tputs \"Visiting entire tree\"\r\n\truby_tree.visit_all { |node| puts node.node_name }","slug":"-2013-06-23-0-html","updated":1422085831000,"excerpt":"","_id":"phnerjg7chquvtgg","comments":true,"photos":[],"link":""},{"date":1372435200000,"layout":"post","title":"openGL学习（一）-- 简介","categories":["phgmgqv2woypuv1r"],"tags":["oe66b35huw7v2drm"],"content":"<h2 id=\"1_什么是OpenGL,_它能够做什么，不能够做什么？\"><strong>1　什么是OpenGL, 它能够做什么，不能够做什么？</strong></h2>\n<p>OpenGL是图形硬件的一种软件接口。OpenGL包含700多个函数（OpenGL3.0），这些函数可以用于指定物体和操作，创建交互式的三维应用程序。但OpenGL并未包含用于执行窗口任务或者获取用户输入之类的函数，也不提供用于描述三维物体模型的高级函数，如汽车。身体的某个部分、飞机等。OpenGL只包含一些为数不多的基本几何图元，如点、直线和多边形。</p>\n<h2 id=\"2_OpenGL对场景中图像进行渲染时所执行的主要图形操作。\"><strong>2　OpenGL对场景中图像进行渲染时所执行的主要图形操作。</strong></h2>\n<ol>\n<li>根据几何图元(点、直线、多边形和位图)创建形状，从而建立物体的数学描述；</li>\n<li>在三维空间中排列物体、并选择观察复合场景的视角；</li>\n<li>计算所有物体的颜色。这个计算过程可以由着色器来执行，也可以使用OpenGL的预编程算法在其内部执行(固定功能的管线)</li>\n<li>光栅化(rasterization)，即把物体的数学描述以及与物体相关的颜色信息转换为屏幕上的像素。</li>\n</ol>\n<h2 id=\"3_OpenGL的状态机特性。\"><strong>3　OpenGL的状态机特性。</strong></h2>\n<p>OpenGL是一个状态机，可以对它的各种状态进行设置，直抒到再次修改它们。如当前颜色就是一种状态，若当前颜色为红色，则绘制出的所有物体都将是红色，直到下次修改OpenGL的颜色状态为止。另外，许多表示模式的状态可以用glEnable()和glDisable()启用或者禁用。</p>\n<h2 id=\"4_OpenGL渲染管线：展示一个用于处理几何和图像数据的典型操作序列。\"><strong>4　OpenGL渲染管线：展示一个用于处理几何和图像数据的典型操作序列。</strong></h2>\n<p><img src=\"/img/2013-06-29-0.png\" alt=\"渲染管线\" title=\"渲染管线\"></p>\n<p>OpenGL渲染管线分为两条路，一为几何数据（顶点、直接和多边形）处理，二为像素数据（像素、图像和位图）处理。</p>\n<h2 id=\"5_OpenGL如何实现动画？\"><strong>5　OpenGL如何实现动画？</strong></h2>\n<p>在电影院里，屏幕上的运动画面是通过拍摄大量的图片，然后以每秒24帧的频率把它们投影到屏幕上来实现的。而OpenGL实现动画也如此。如以下代码：</p>\n<pre><code>open_window();\n<span class=\"keyword\">for</span> (<span class=\"built_in\">i</span> = <span class=\"number\">0</span>; <span class=\"built_in\">i</span> &lt; <span class=\"number\">1000000</span>; +=<span class=\"built_in\">i</span>) <span class=\"cell\">{\n     clear_the_window();\n     draw_frame(i);\n     wait_untile_a_24th_of_a_second_is_over();\n}</span>\n</code></pre><p>但是这个方法仅仅局限于clear_the_window( )和draw_frame( )方法在1/24秒内完成，若这两个操作所需时间大于1/24秒，则动画就显得不平滑。所以绝大多数OpenGL实现提供双缓冲（包括硬件或者软件），即提供两个完整的颜色缓冲区。于是过程就变成如下形式：</p>\n<pre><code>open_window_in_double_buffer_mode();\n<span class=\"keyword\">for</span> (<span class=\"built_in\">i</span> = <span class=\"number\">0</span>; <span class=\"built_in\">i</span> &lt; <span class=\"number\">1000000</span>; +=<span class=\"built_in\">i</span>) <span class=\"cell\">{\n    clear_the_window();\n    draw_frame(i);\n    swap_the_buffers  ();\n}</span>\n</code></pre>","source":"_posts/2013-06-29-0.md","raw":"---\r\ndate: 2013-06-29\r\nlayout: post\r\ntitle: openGL学习（一）-- 简介\r\npermalink: '/2013/06-29-0.html'\r\ncategories:\r\n- 游戏开发\r\ntags:\r\n- openGL\r\n---\r\n\r\n\r\n**1　什么是OpenGL, 它能够做什么，不能够做什么？**\r\n--------------------------------------------\r\nOpenGL是图形硬件的一种软件接口。OpenGL包含700多个函数（OpenGL3.0），这些函数可以用于指定物体和操作，创建交互式的三维应用程序。但OpenGL并未包含用于执行窗口任务或者获取用户输入之类的函数，也不提供用于描述三维物体模型的高级函数，如汽车。身体的某个部分、飞机等。OpenGL只包含一些为数不多的基本几何图元，如点、直线和多边形。\r\n\r\n**2　OpenGL对场景中图像进行渲染时所执行的主要图形操作。**\r\n--------------------------------------------------\r\n\r\n1. 根据几何图元(点、直线、多边形和位图)创建形状，从而建立物体的数学描述；\r\n2. 在三维空间中排列物体、并选择观察复合场景的视角；\r\n3. 计算所有物体的颜色。这个计算过程可以由着色器来执行，也可以使用OpenGL的预编程算法在其内部执行(固定功能的管线)\r\n4. 光栅化(rasterization)，即把物体的数学描述以及与物体相关的颜色信息转换为屏幕上的像素。\r\n\r\n**3　OpenGL的状态机特性。**\r\n------------------------\r\nOpenGL是一个状态机，可以对它的各种状态进行设置，直抒到再次修改它们。如当前颜色就是一种状态，若当前颜色为红色，则绘制出的所有物体都将是红色，直到下次修改OpenGL的颜色状态为止。另外，许多表示模式的状态可以用glEnable()和glDisable()启用或者禁用。\r\n\r\n**4　OpenGL渲染管线：展示一个用于处理几何和图像数据的典型操作序列。**\r\n--------------------------------------------------------------\r\n![渲染管线](/img/2013-06-29-0.png \"渲染管线\")\r\n\r\nOpenGL渲染管线分为两条路，一为几何数据（顶点、直接和多边形）处理，二为像素数据（像素、图像和位图）处理。\r\n\r\n**5　OpenGL如何实现动画？**\r\n--------------------------\r\n在电影院里，屏幕上的运动画面是通过拍摄大量的图片，然后以每秒24帧的频率把它们投影到屏幕上来实现的。而OpenGL实现动画也如此。如以下代码：\r\n\r\n\topen_window();\r\n\tfor (i = 0; i < 1000000; +=i) {\r\n\t     clear_the_window();\r\n\t     draw_frame(i);\r\n\t     wait_untile_a_24th_of_a_second_is_over();\r\n\t}\r\n\r\n但是这个方法仅仅局限于clear_the_window( )和draw_frame( )方法在1/24秒内完成，若这两个操作所需时间大于1/24秒，则动画就显得不平滑。所以绝大多数OpenGL实现提供双缓冲（包括硬件或者软件），即提供两个完整的颜色缓冲区。于是过程就变成如下形式：\r\n\r\n\topen_window_in_double_buffer_mode();\r\n\tfor (i = 0; i < 1000000; +=i) {\r\n\t\tclear_the_window();\r\n\t\tdraw_frame(i);\r\n\t\tswap_the_buffers  ();\r\n\t}\r\n","slug":"-2013-06-29-0-html","updated":1422085044000,"excerpt":"","_id":"wvsvofwpj7noh1o8","comments":true,"photos":[],"link":""},{"date":1373817600000,"layout":"post","title":"自省一则","categories":["5uqjpmh62j3bpyf3"],"tags":[],"content":"<p>一个人在某一方面的层次分为4层，即<strong>不知道自己不知道，知道自己不知道，知道自己知道，不知道自己知道</strong>。虽然很绕，但细细想来，还是很有道理的。而小猿自认为自己目前处在第二层，即知道自己不知道，所以也偶尔发奋努力下，但通常是三天打鱼，两天晒网了。所以在成就系统里至今也没有什么拿得出手的。最近小猿拜读了Andy Hunt的<a href=\"http://book.douban.com/subject/5372651/\" target=\"_blank\" rel=\"external\">《程序员思维修炼——开发认知潜能的九堂课》</a>，读后思维万纤（其实是被打了鸡血，顿时兴奋无比），也准备对自己重新定位下。</p>\n<p>说到定位，Andy向我们展现了<a href=\"http://en.wikipedia.org/wiki/Dreyfus_model_of_skill_acquisition\" target=\"_blank\" rel=\"external\">Dreyfus模型</a>，它分为5个阶段：<strong>新手-&gt;高级新手-&gt;胜任者-&gt;精通者-&gt;专家</strong>。这个历程也是任何人在任何方面从新手成为专家的必经之路。每个在低层次阶段的人都渴望成为高层次阶段的人（除没有进取心的人以外），但遗憾的是，在任何一方面80%的人都只能是新手（其实小猿觉得远远超过，最起码95%以上）。比如，小猿会fix bug，但不会fix computer，会骑自行车，但不会修自行车，会煮饭，但不会烧菜。小猿360行，只会做code monkey。所以说，我们绝大部分人都是新手。</p>\n<p>新手在该领域经验很少或者根本没有经验。所以<strong>新手工作时，他需要的是规则与指令</strong>。如果没有一个明确的规则，新手不知道应该做什么，而且出错的时候，他们非常容易慌乱。没有一个既定的目标与规则，如“当X发生时，请执行Y”，那么新手将不知所措。</p>\n<p>而高级新手则并不需要规则，他们可以独自尝试完成任务，但是只能根据过去的经验去完成任务，<strong>缺乏全局思维</strong>，有时候仍难以解决问题。</p>\n<p>新手与高级新手终究是newer范畴，需要一位导师带着，对其发出任务指令或者为其掌舵，让它们顺利启程与航行。而经历了新手与高级新手两个阶段，我们将迎来胜任者阶段。故名思义，所谓胜任者，即是对任务胜任的人。他们可以独立解决自己遇到的问题，并开始考虑如何解决新的问题，当然也可以指导新手，甚至可以寻求与利用专家的意见，并顺利完成相应的任务。虽然胜任者能够解决问题，但是他们<strong>缺乏足够的能力进行反思与自我纠正</strong>。</p>\n<p>而胜任者有能力从专家或者书本中获得经验，并且进行自我纠正，使自身对该方向技能的掌握程度更进一步时，他们就进入了精通者阶段。精通者能够纠正以往不好的表现，反思以前是如何做的，并修正其做法，期望下一次表现得更好。他们<strong>形成了一条反馈线路，这次的经历将会做为下次的输入，并且影响下次的结果表现</strong>。</p>\n<p>当然，一个技能领域的顶峰就是成为该方面的专家。<strong>专家是各个领域知识和信息的主要来源</strong>，他们是整个行业的风向标。所以，小猿认为非专家的人对专家的关注是十分有必要的。如果想在这一行混，却对这行的信息了解甚少，那还混个P啊（Sorry，激动了下）。</p>\n<p>扯了这么多，小猿对自己的定位目前徘徊在胜任者，而且对精通者遥不可及。一方面，精通确实不易；另一方面，小猿虽然看了一些专家的书（经验），但对其转换成自己生产力的能力还不足。经常说“知易行难”，“理论与实践是有差距的”，确实，小猿给自己下定义：本人目前处于而且将长期处于coding的胜任者阶段，并坚持向精通者进发的目标不动摇，最终实现专家的梦想！</p>\n","source":"_posts/2013-07-15-0.md","raw":"---\r\ndate: 2013-07-15\r\nlayout: post\r\ntitle: 自省一则\r\npermalink: '/2013/07-15-0.html'\r\ncategories:\r\n- 杂感\r\ntags:\r\n---\r\n\r\n\r\n一个人在某一方面的层次分为4层，即**不知道自己不知道，知道自己不知道，知道自己知道，不知道自己知道**。虽然很绕，但细细想来，还是很有道理的。而小猿自认为自己目前处在第二层，即知道自己不知道，所以也偶尔发奋努力下，但通常是三天打鱼，两天晒网了。所以在成就系统里至今也没有什么拿得出手的。最近小猿拜读了Andy Hunt的[《程序员思维修炼——开发认知潜能的九堂课》](http://book.douban.com/subject/5372651/)，读后思维万纤（其实是被打了鸡血，顿时兴奋无比），也准备对自己重新定位下。\r\n\r\n说到定位，Andy向我们展现了[Dreyfus模型](http://en.wikipedia.org/wiki/Dreyfus_model_of_skill_acquisition)，它分为5个阶段：**新手->高级新手->胜任者->精通者->专家**。这个历程也是任何人在任何方面从新手成为专家的必经之路。每个在低层次阶段的人都渴望成为高层次阶段的人（除没有进取心的人以外），但遗憾的是，在任何一方面80%的人都只能是新手（其实小猿觉得远远超过，最起码95%以上）。比如，小猿会fix bug，但不会fix computer，会骑自行车，但不会修自行车，会煮饭，但不会烧菜。小猿360行，只会做code monkey。所以说，我们绝大部分人都是新手。\r\n\r\n新手在该领域经验很少或者根本没有经验。所以**新手工作时，他需要的是规则与指令**。如果没有一个明确的规则，新手不知道应该做什么，而且出错的时候，他们非常容易慌乱。没有一个既定的目标与规则，如“当X发生时，请执行Y”，那么新手将不知所措。\r\n\r\n而高级新手则并不需要规则，他们可以独自尝试完成任务，但是只能根据过去的经验去完成任务，**缺乏全局思维**，有时候仍难以解决问题。\r\n\r\n新手与高级新手终究是newer范畴，需要一位导师带着，对其发出任务指令或者为其掌舵，让它们顺利启程与航行。而经历了新手与高级新手两个阶段，我们将迎来胜任者阶段。故名思义，所谓胜任者，即是对任务胜任的人。他们可以独立解决自己遇到的问题，并开始考虑如何解决新的问题，当然也可以指导新手，甚至可以寻求与利用专家的意见，并顺利完成相应的任务。虽然胜任者能够解决问题，但是他们**缺乏足够的能力进行反思与自我纠正**。\r\n\r\n而胜任者有能力从专家或者书本中获得经验，并且进行自我纠正，使自身对该方向技能的掌握程度更进一步时，他们就进入了精通者阶段。精通者能够纠正以往不好的表现，反思以前是如何做的，并修正其做法，期望下一次表现得更好。他们**形成了一条反馈线路，这次的经历将会做为下次的输入，并且影响下次的结果表现**。\r\n\r\n当然，一个技能领域的顶峰就是成为该方面的专家。**专家是各个领域知识和信息的主要来源**，他们是整个行业的风向标。所以，小猿认为非专家的人对专家的关注是十分有必要的。如果想在这一行混，却对这行的信息了解甚少，那还混个P啊（Sorry，激动了下）。\r\n\r\n扯了这么多，小猿对自己的定位目前徘徊在胜任者，而且对精通者遥不可及。一方面，精通确实不易；另一方面，小猿虽然看了一些专家的书（经验），但对其转换成自己生产力的能力还不足。经常说“知易行难”，“理论与实践是有差距的”，确实，小猿给自己下定义：本人目前处于而且将长期处于coding的胜任者阶段，并坚持向精通者进发的目标不动摇，最终实现专家的梦想！","slug":"-2013-07-15-0-html","updated":1419132255000,"excerpt":"","_id":"5ljrnh9n2cwb11dw","comments":true,"photos":[],"link":""},{"date":1373990400000,"layout":"post","title":"openGL学习（二）-- 状态管理和绘制几何物体","categories":["phgmgqv2woypuv1r"],"tags":["oe66b35huw7v2drm"],"content":"<p>在最高抽象层次上，有3种绘图是最基本的：<strong>消除窗口，绘制几何图形，以及绘制光栅对象</strong>(包括二维图像、位图和字体)。这里先介绍如何消除以及如何绘制几何物体，包括点、直接和平面多边形。</p>\n<h2 id=\"1_绘图工具箱\"><strong>1　绘图工具箱</strong></h2>\n<p>首先就是清除窗口。在计算机中，保存图片的内存通常被计算机所绘制的前一幅图像所填充，因此在绘制新场景之前，一般需要把它清除为某种背景颜色(具体为何种颜色为应用场景所定，若下一幅图像为全屏，则不清除窗口也可以，因为全屏的图像把上一幅图像全部遮住了)。</p>\n<p>这里这个问题，为什么在绘图之前清除窗口？如果画一个适当颜色的矩形，让它足够大，则和清除窗口的效果不是一样吗？但是清除窗口具有几点优势：</p>\n<ol>\n<li>清除窗口函数(glClear( ))的效率可能远远高于普通的绘图函数；</li>\n<li>OpenGL允许程序员任意设置坐标系统、观察位置和观察方向。因此判定这个用于清除窗口的矩形的大小和位置可能非常困难；<br>3.　除了屏幕上显示和像素颜色的缓冲区之外，还包括一些别的缓冲区（如深度缓冲区），而glClear( )命令可以清除按照任意形式组合的方式清除相应缓冲区，如glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)命令直接方便地清除颜色缓冲区和深度缓冲区。</li>\n</ol>\n<p>其次就是指定颜色。在OpenGL，物体的开关与它的颜色无关。当一个特定的几何物体被绘制时，它是根据当前指定的方案进行绘制的。因此，OpenGL程序员首先设置颜色或者颜色方案（如用红色绘制所有的物体，又如物体由蓝色的塑料制成，有一盏黄色的聚光灯从某个方向对准物体表面的某个点），在这种颜色或者颜色方案被修改之前，所有的物体都用这种颜色或者颜色方案进行绘制。</p>\n<p>第三就是强制完成绘图操作。绝大多数的现代图像系统都可以看成是一条装配线（如福特汽车的汽车装配线）。在高端架构的计算机中，每一种操作都是由不同的硬件执行的。在这种情况下，如果CPU在发出下一条绘图命令之前还要等待前一条命令的完成，这无疑失去了流水装配线的强大优势。另外，应用程序可能在不同计算机上运行（主程序在一台称为客户机的计算机上，绘图结果则在另一台服务机上查看），它们之间每条绘图命令都是通过网络发送。通常客户机会把一组命令收集到一个网络包中，然后再将它们一起发送。但遗憾的是，如果这个网络包未填满，则它会一直等待下去，其结果就是在服务机上永远看不到绘图结果。</p>\n<p>因此，OpenGL提供了强制完成绘图操作glFlush( )。程序员应该在每个帧或者每个场景的最后添加一个glFlush( )调用。注意，这个操作并不等待绘图完成，它只是强制绘图命令开始执行。如果需要执行一些同步性的任务，以必需等待图形硬件或者网络提示帧缓冲区的绘图已经完成，则可以使用glFinish( )操作。</p>\n<p>最后就是坐标系统工具箱。绘图一定要设置一个坐标系。以下为简单地定义了一个2维坐标系：</p>\n<pre><code>void <span class=\"function\">reshape</span>(int w, int h)\n{\n    <span class=\"function\">glViewport</span>(0, 0, (GLsizei)w, (GLsizei)h);\n    <span class=\"function\">glMatrixMode</span>(GL_PROJECTION);\n    <span class=\"function\">glLoadIdentity</span>();\n    <span class=\"function\">gluOrtho2D</span>(0<span class=\"class\">.0</span>, (GLdouble)w, 0<span class=\"class\">.0</span>, (GLdouble)h);\n}\n</code></pre><p>其定义了一个如屏幕相同像素的2维坐标系，原点(0, 0)在屏幕在左下角，屏幕右上角为点(w, h)。</p>\n<h2 id=\"2_描述点、直线和多边形\"><strong>2　描述点、直线和多边形</strong></h2>\n<p>　　OpenGL绘图都是由几个简单的几何图元构成的，如点、直线、多边形。而这几个简单的几何图元最终又是根据它们的顶点(vertex)来描述的。</p>\n<h2 id=\"3_基本状态管理\"><strong>3　基本状态管理</strong></h2>\n<p>　　OpenGL具有状态机特性，它维护了许多状态和状态变量，如光照、纹理、隐藏表面消除、雾以及其他影响物体外观的状态。在默认情况下，这些状态的大部分是处于不活动状态的，因为如果激活这些状态，OpenGL的渲染开销就会大大增大。因此，程序员应该按需对这些状态进行打开或者关闭。</p>\n<h2 id=\"4_显示点、直线和多边形\"><strong>4 　显示点、直线和多边形</strong></h2>\n<p>　　首先探讨一下点的细节。默认情况下，点被画成屏幕上的一个像素。当然，可以使用glPointSize( )控制被渲染点的大小。如果在抗锯齿功能被禁用的情况（默认）下，带小数的宽度值将四舍五入为整型值，在屏幕上所绘制的是对齐的正方形像素区域。如果启用了抗锯齿功能，则屏幕上绘制的将是一个圆形的区域，非整型的宽度值并不会四舍五入。</p>\n<p>　　其次就是直线的细节。OpenGL下的直线并不是数学中的直线，实际上为数学概念中的线段。默认情况下直线的宽度为1个像素，可以通过glLineWidth( )对直线宽度进行设置。注意，在未使用抗锯齿功能的情况下，直线的的宽度并不是根据与直线垂直的方便进行测量的。实际上，如果直接斜率的绝对值小于1.0，它是根据y轴的方向进行测量的。否则，它就根据x轴的方向进行测量。而在抗锯齿情况下，就是按照特定的宽度渲染一个填充多边形。</p>\n<p>　　然后就是多边形的细节。按照约定，多边形的顶点默认以逆时针顺序出现在屏幕上，通常称为“正面”。当然我们可以利用glFrontFace( )将顺时针方向的表面被认为是正面。另外，在默认情况下，填充多边形是用实心模式绘制的，我们可能利用glPolygonStipple( )将填充方式设定为32*32的点画模式(有点像印章)。</p>\n<h2 id=\"5_法线向量\"><strong>5　法线向量</strong></h2>\n<p>法线向量(简称法线)是一条垂直于某个表面的方向向量。物体的法线微量定义了它的表面在空间中的方向。具体地说，定义了它相对于光源的方向。OpenGL使用法线向量确定这个物体的各个顶点所接收的光照。在OpenGL中，除了之外，不能为多边形的其他地方分配法线。</p>\n<h2 id=\"6_顶点数组\"><strong>6　顶点数组</strong></h2>\n<p>OpenGL提供了一些顶点数组函数，允许只用少数几个数组指定大量的顶点相关的数据，并用少量函数调用（与顶点数组的数量相仿）访问这些数据。<br>把数据放在顶点数组中可以提高应用程序的性能。使用顶点数组可以减少函数调用的次数，从而提高性能。另外，使用顶点数组还可以避免共享顶点的冗余处理。<br>使用顶点数据对几何图形进行渲染需要3个步骤:</p>\n<ul>\n<li>步骤一，启用数组。</li>\n<li>步骤二，指定数组的数据。</li>\n<li>步骤三，解引用和渲染。</li>\n</ul>\n<h2 id=\"7_缓冲区对象\"><strong>7　缓冲区对象</strong></h2>\n<p>在许多OpenGL操作中，我们都向OpenGL发送一大块数据，例如向它传递需要处理的顶点数组数据。传输这种数据可能非常简单，如把数据从系统的内存中复制到图形卡。但是，由于OpenGL是按照客户机－服务器模式设计的，在OpenGL需要数据的任何时候，都必须把数据从客户机传输到服务器。如果数据并没有修改，或者客户机和服务器位于不同的计算机（分布式渲染），数据的传输可能会比较缓慢，或者是冗余的。</p>\n<p>所以，OpenGL在1.5开始，增加了缓冲区对象（buffer object），允许应用程序显式地指定把哪些数据存储在图形服务器中。</p>\n<ul>\n<li>第一、创建缓冲区对象。建议使用glGenBuffers( )接口让OpenGL分配标志符，以保证避免重复使用已被使用的缓冲区对象标识符，从而消除无意修改数据的风险。</li>\n<li>第二、激活缓冲区对象。激活缓冲区对象，首先需要将它绑定。绑定缓冲区对象表示选择未来的操作（对数据进行初始化或者使用缓冲区对象进行渲染）将影响到哪个缓冲区对象。</li>\n<li>第三、用数据分配和初始化缓冲区对象。具体情况参见glBufferData接口。</li>\n<li>第四、更新缓冲区对象的数据值。有两种方法可以更新存储在缓冲区对象中的数据。</li>\n</ul>\n<p>第一种方法假设我们已经在应用程序的一个缓冲区中准备了相同类型的数据。glBufferSubData( )将用我们提供的数据替换被绑定缓冲区对象的一些数据子集。</p>\n<p>第二种方法允许我们更灵活地选择需要更新的数据。即使用glMapBuffer( )返回一个指向缓冲区对象的指针，可以对这块内在进行修改更新缓冲区对象的数据。更新完毕后使用glUnmapBuffer( )取消对这个缓冲区的映射。</p>\n<p>注意，glMapBuffer( )提供了对缓冲区对象中包含的整个数据集合的访问。如果需要修改缓冲区中的大多数数据，这种方法很有用，但如果有一个很大的缓冲区并且只需要更新很小的一部分值，这种方法效率很低。在这种情况下，则使用glMapBufferRange( )效率更高。它允许只修改所需的范围内的数据值。</p>\n<ul>\n<li><p>第五，在缓冲区对象之间的复制数据。在OpenGL3.1之前，欲完成数据从一个缓冲区对象复制到别一个缓冲区对象，则必须分为两步走：首先将数据从缓冲区对象复制到应用程序的内存中，然后通过绑定到新的对象，现使用glBufferData( )初始化新的数据或者用glBufferSubData( )等方法更新缓冲区对象数据。显然这样做不是很优美，所以在3.1引入的glCopyBufferSubData( )接口直接将缓冲区对象A中的数据copy到缓冲区对象B中。</p>\n</li>\n<li><p>第六，清除缓冲区对象。对缓冲区对象的操作完成之后，调用glDeleteBuffers( )接口对缓冲区对象进行清除。</p>\n</li>\n</ul>\n<h2 id=\"8_顶点数组对象\"><strong>8　顶点数组对象</strong></h2>\n<p>随着程序的增大并且使用更多的模型，在每个帧的多组顶点数组之间切换将不可避免。根据为每个顶点使用多少个顶点属性，你对glVertexPointer( )这样的函数的调用次数可能变得很大。因此，应该采用顶点数组对象提高效率。顶点数组对象捆绑了调用的集合，以设置顶点数据的状态。在初始化之后，可以通过单次调用在不同的数组集合之间快速修改。创建过程如下：</p>\n<p>首先，创建一个顶点数组对象。利用glGenvertexArrays( )函数。</p>\n<p>其次，初始化新的对象，并且把要使用的顶点数组数据的集合与单个已分配的对象关联起来。利用gBindVertexArray( )函数。</p>\n<p>这里不得不说顶点数组对象（VAO）和顶点缓冲对象（VBO）的区别。A Vertex Array Object (VAO) is an OpenGL Object that encapsulates all of the state needed to specify vertex data (with one minor exception noted below). They define the format of the vertex data as well as the sources for the vertex arrays. Note that VAOs do not contain the arrays themselves; the arrays are stored in Buffer Objects. The VAOs simply reference already existing buffer objects. OTHERWISE, A Vertex Buffer Object (VBO) is a Buffer Object which is used as the source for vertex array data.</p>\n<h2 id=\"9_属性组\"><strong>9　属性组</strong></h2>\n<p>OpenGL可以设置或者查询一个单独的状态或状态变量。也可以用一个命令保存或恢复一组相关的状态变量的值。一般而言，使用这些函数，获取、保存和恢 复状态值的速度会更快一点。有些状态值可能是由硬件维护的，访问它们的开销可能较大。另外，如果是在远程客户机上进行操作，在获取、保存和恢复属性时，它们都要通过网络传输。但是，OpenGL实现可以把属性堆栈保存在服务器上，从而避免不必要的网络延迟。</p>\n<h2 id=\"10_创建多边形表面模型的一些提示\"><strong>10　创建多边形表面模型的一些提示</strong></h2>\n<p>用多边形近似模拟法创建多边形表面模型是一项艺术，经验是均可替代的。下面是一些创建多边形表面模型的一些技巧：</p>\n<ul>\n<li>使多边形的方向（环绕）保持一致。</li>\n<li>对表面进行细分时，要密切注意那些非三角形的多边形。由于OpenGL可能无法正确地渲染非平面多边形，所有非三角形的多边形要保证其在同一平面。</li>\n<li>在显示速度和图像质量之间总存在一种权衡关系。理想的做法是向多边形细分函数提供一个参数，表示细分所达到的精度。如果物体距离距离较远，可以使用较为粗糙的的细分，另外，在进行细分时，在表面相对较平的区域，可以使用较大的多边形，而在曲率很大的表面部分，应该使用很小的多边形。</li>\n<li>为了实现高质量的图像，在轮廓边缘进行更精细的划分显然要比在表面内部进行精细划分的效果更好。</li>\n<li>如果想创建一个闭合的表面，确保闭合环的起点和终点使用完全相同的坐标，不然可能因为数值的四舍五入而产生有缺口的环。</li>\n</ul>\n","source":"_posts/2013-07-17-0.md","raw":"---\r\ndate: 2013-07-17\r\nlayout: post\r\ntitle: openGL学习（二）-- 状态管理和绘制几何物体\r\npermalink: '/2013/07-17-0.html'\r\ncategories:\r\n- 游戏开发\r\ntags:\r\n- openGL\r\n---\r\n\r\n\r\n在最高抽象层次上，有3种绘图是最基本的：**消除窗口，绘制几何图形，以及绘制光栅对象**(包括二维图像、位图和字体)。这里先介绍如何消除以及如何绘制几何物体，包括点、直接和平面多边形。\r\n\r\n**1　绘图工具箱**\r\n-----------------\r\n首先就是清除窗口。在计算机中，保存图片的内存通常被计算机所绘制的前一幅图像所填充，因此在绘制新场景之前，一般需要把它清除为某种背景颜色(具体为何种颜色为应用场景所定，若下一幅图像为全屏，则不清除窗口也可以，因为全屏的图像把上一幅图像全部遮住了)。\r\n\r\n这里这个问题，为什么在绘图之前清除窗口？如果画一个适当颜色的矩形，让它足够大，则和清除窗口的效果不是一样吗？但是清除窗口具有几点优势：\r\n\r\n1. 清除窗口函数(glClear( ))的效率可能远远高于普通的绘图函数；\r\n2. OpenGL允许程序员任意设置坐标系统、观察位置和观察方向。因此判定这个用于清除窗口的矩形的大小和位置可能非常困难；\r\n3.　除了屏幕上显示和像素颜色的缓冲区之外，还包括一些别的缓冲区（如深度缓冲区），而glClear( )命令可以清除按照任意形式组合的方式清除相应缓冲区，如glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)命令直接方便地清除颜色缓冲区和深度缓冲区。\r\n\r\n其次就是指定颜色。在OpenGL，物体的开关与它的颜色无关。当一个特定的几何物体被绘制时，它是根据当前指定的方案进行绘制的。因此，OpenGL程序员首先设置颜色或者颜色方案（如用红色绘制所有的物体，又如物体由蓝色的塑料制成，有一盏黄色的聚光灯从某个方向对准物体表面的某个点），在这种颜色或者颜色方案被修改之前，所有的物体都用这种颜色或者颜色方案进行绘制。\r\n\r\n第三就是强制完成绘图操作。绝大多数的现代图像系统都可以看成是一条装配线（如福特汽车的汽车装配线）。在高端架构的计算机中，每一种操作都是由不同的硬件执行的。在这种情况下，如果CPU在发出下一条绘图命令之前还要等待前一条命令的完成，这无疑失去了流水装配线的强大优势。另外，应用程序可能在不同计算机上运行（主程序在一台称为客户机的计算机上，绘图结果则在另一台服务机上查看），它们之间每条绘图命令都是通过网络发送。通常客户机会把一组命令收集到一个网络包中，然后再将它们一起发送。但遗憾的是，如果这个网络包未填满，则它会一直等待下去，其结果就是在服务机上永远看不到绘图结果。\r\n\r\n因此，OpenGL提供了强制完成绘图操作glFlush( )。程序员应该在每个帧或者每个场景的最后添加一个glFlush( )调用。注意，这个操作并不等待绘图完成，它只是强制绘图命令开始执行。如果需要执行一些同步性的任务，以必需等待图形硬件或者网络提示帧缓冲区的绘图已经完成，则可以使用glFinish( )操作。\r\n\r\n最后就是坐标系统工具箱。绘图一定要设置一个坐标系。以下为简单地定义了一个2维坐标系：\r\n\r\n\tvoid reshape(int w, int h)\r\n\t{\r\n\t\tglViewport(0, 0, (GLsizei)w, (GLsizei)h);\r\n\t\tglMatrixMode(GL_PROJECTION);\r\n\t\tglLoadIdentity();\r\n\t\tgluOrtho2D(0.0, (GLdouble)w, 0.0, (GLdouble)h);\r\n\t}\r\n\r\n其定义了一个如屏幕相同像素的2维坐标系，原点(0, 0)在屏幕在左下角，屏幕右上角为点(w, h)。\r\n\r\n**2　描述点、直线和多边形**\r\n--------------------------\r\n　　OpenGL绘图都是由几个简单的几何图元构成的，如点、直线、多边形。而这几个简单的几何图元最终又是根据它们的顶点(vertex)来描述的。\r\n\r\n**3　基本状态管理**\r\n------------------\r\n　　OpenGL具有状态机特性，它维护了许多状态和状态变量，如光照、纹理、隐藏表面消除、雾以及其他影响物体外观的状态。在默认情况下，这些状态的大部分是处于不活动状态的，因为如果激活这些状态，OpenGL的渲染开销就会大大增大。因此，程序员应该按需对这些状态进行打开或者关闭。\r\n\r\n**4 　显示点、直线和多边形**\r\n--------------------------\r\n　　首先探讨一下点的细节。默认情况下，点被画成屏幕上的一个像素。当然，可以使用glPointSize( )控制被渲染点的大小。如果在抗锯齿功能被禁用的情况（默认）下，带小数的宽度值将四舍五入为整型值，在屏幕上所绘制的是对齐的正方形像素区域。如果启用了抗锯齿功能，则屏幕上绘制的将是一个圆形的区域，非整型的宽度值并不会四舍五入。\r\n\r\n　　其次就是直线的细节。OpenGL下的直线并不是数学中的直线，实际上为数学概念中的线段。默认情况下直线的宽度为1个像素，可以通过glLineWidth( )对直线宽度进行设置。注意，在未使用抗锯齿功能的情况下，直线的的宽度并不是根据与直线垂直的方便进行测量的。实际上，如果直接斜率的绝对值小于1.0，它是根据y轴的方向进行测量的。否则，它就根据x轴的方向进行测量。而在抗锯齿情况下，就是按照特定的宽度渲染一个填充多边形。\r\n\r\n　　然后就是多边形的细节。按照约定，多边形的顶点默认以逆时针顺序出现在屏幕上，通常称为“正面”。当然我们可以利用glFrontFace( )将顺时针方向的表面被认为是正面。另外，在默认情况下，填充多边形是用实心模式绘制的，我们可能利用glPolygonStipple( )将填充方式设定为32*32的点画模式(有点像印章)。\r\n\r\n**5　法线向量**\r\n---------------\r\n法线向量(简称法线)是一条垂直于某个表面的方向向量。物体的法线微量定义了它的表面在空间中的方向。具体地说，定义了它相对于光源的方向。OpenGL使用法线向量确定这个物体的各个顶点所接收的光照。在OpenGL中，除了之外，不能为多边形的其他地方分配法线。\r\n\r\n**6　顶点数组**\r\n--------------\r\nOpenGL提供了一些顶点数组函数，允许只用少数几个数组指定大量的顶点相关的数据，并用少量函数调用（与顶点数组的数量相仿）访问这些数据。\r\n把数据放在顶点数组中可以提高应用程序的性能。使用顶点数组可以减少函数调用的次数，从而提高性能。另外，使用顶点数组还可以避免共享顶点的冗余处理。\r\n使用顶点数据对几何图形进行渲染需要3个步骤:\r\n\r\n* 步骤一，启用数组。\r\n* 步骤二，指定数组的数据。\r\n* 步骤三，解引用和渲染。\r\n\r\n**7　缓冲区对象**\r\n----------------\r\n在许多OpenGL操作中，我们都向OpenGL发送一大块数据，例如向它传递需要处理的顶点数组数据。传输这种数据可能非常简单，如把数据从系统的内存中复制到图形卡。但是，由于OpenGL是按照客户机－服务器模式设计的，在OpenGL需要数据的任何时候，都必须把数据从客户机传输到服务器。如果数据并没有修改，或者客户机和服务器位于不同的计算机（分布式渲染），数据的传输可能会比较缓慢，或者是冗余的。\r\n\r\n所以，OpenGL在1.5开始，增加了缓冲区对象（buffer object），允许应用程序显式地指定把哪些数据存储在图形服务器中。\r\n\r\n* 第一、创建缓冲区对象。建议使用glGenBuffers( )接口让OpenGL分配标志符，以保证避免重复使用已被使用的缓冲区对象标识符，从而消除无意修改数据的风险。\r\n* 第二、激活缓冲区对象。激活缓冲区对象，首先需要将它绑定。绑定缓冲区对象表示选择未来的操作（对数据进行初始化或者使用缓冲区对象进行渲染）将影响到哪个缓冲区对象。\r\n* 第三、用数据分配和初始化缓冲区对象。具体情况参见glBufferData接口。\r\n* 第四、更新缓冲区对象的数据值。有两种方法可以更新存储在缓冲区对象中的数据。\r\n\r\n第一种方法假设我们已经在应用程序的一个缓冲区中准备了相同类型的数据。glBufferSubData( )将用我们提供的数据替换被绑定缓冲区对象的一些数据子集。\r\n\r\n第二种方法允许我们更灵活地选择需要更新的数据。即使用glMapBuffer( )返回一个指向缓冲区对象的指针，可以对这块内在进行修改更新缓冲区对象的数据。更新完毕后使用glUnmapBuffer( )取消对这个缓冲区的映射。\r\n\r\n注意，glMapBuffer( )提供了对缓冲区对象中包含的整个数据集合的访问。如果需要修改缓冲区中的大多数数据，这种方法很有用，但如果有一个很大的缓冲区并且只需要更新很小的一部分值，这种方法效率很低。在这种情况下，则使用glMapBufferRange( )效率更高。它允许只修改所需的范围内的数据值。\r\n\r\n* 第五，在缓冲区对象之间的复制数据。在OpenGL3.1之前，欲完成数据从一个缓冲区对象复制到别一个缓冲区对象，则必须分为两步走：首先将数据从缓冲区对象复制到应用程序的内存中，然后通过绑定到新的对象，现使用glBufferData( )初始化新的数据或者用glBufferSubData( )等方法更新缓冲区对象数据。显然这样做不是很优美，所以在3.1引入的glCopyBufferSubData( )接口直接将缓冲区对象A中的数据copy到缓冲区对象B中。\r\n\r\n* 第六，清除缓冲区对象。对缓冲区对象的操作完成之后，调用glDeleteBuffers( )接口对缓冲区对象进行清除。\r\n\r\n**8　顶点数组对象**\r\n------------------\r\n随着程序的增大并且使用更多的模型，在每个帧的多组顶点数组之间切换将不可避免。根据为每个顶点使用多少个顶点属性，你对glVertexPointer( )这样的函数的调用次数可能变得很大。因此，应该采用顶点数组对象提高效率。顶点数组对象捆绑了调用的集合，以设置顶点数据的状态。在初始化之后，可以通过单次调用在不同的数组集合之间快速修改。创建过程如下：\r\n\r\n首先，创建一个顶点数组对象。利用glGenvertexArrays( )函数。\r\n\r\n其次，初始化新的对象，并且把要使用的顶点数组数据的集合与单个已分配的对象关联起来。利用gBindVertexArray( )函数。\r\n\r\n这里不得不说顶点数组对象（VAO）和顶点缓冲对象（VBO）的区别。A Vertex Array Object (VAO) is an OpenGL Object that encapsulates all of the state needed to specify vertex data (with one minor exception noted below). They define the format of the vertex data as well as the sources for the vertex arrays. Note that VAOs do not contain the arrays themselves; the arrays are stored in Buffer Objects. The VAOs simply reference already existing buffer objects. OTHERWISE, A Vertex Buffer Object (VBO) is a Buffer Object which is used as the source for vertex array data.\r\n\r\n**9　属性组**\r\n-------------\r\nOpenGL可以设置或者查询一个单独的状态或状态变量。也可以用一个命令保存或恢复一组相关的状态变量的值。一般而言，使用这些函数，获取、保存和恢 复状态值的速度会更快一点。有些状态值可能是由硬件维护的，访问它们的开销可能较大。另外，如果是在远程客户机上进行操作，在获取、保存和恢复属性时，它们都要通过网络传输。但是，OpenGL实现可以把属性堆栈保存在服务器上，从而避免不必要的网络延迟。\r\n\r\n**10　创建多边形表面模型的一些提示**\r\n----------------------------------\r\n用多边形近似模拟法创建多边形表面模型是一项艺术，经验是均可替代的。下面是一些创建多边形表面模型的一些技巧：\r\n\r\n* 使多边形的方向（环绕）保持一致。\r\n* 对表面进行细分时，要密切注意那些非三角形的多边形。由于OpenGL可能无法正确地渲染非平面多边形，所有非三角形的多边形要保证其在同一平面。\r\n* 在显示速度和图像质量之间总存在一种权衡关系。理想的做法是向多边形细分函数提供一个参数，表示细分所达到的精度。如果物体距离距离较远，可以使用较为粗糙的的细分，另外，在进行细分时，在表面相对较平的区域，可以使用较大的多边形，而在曲率很大的表面部分，应该使用很小的多边形。\r\n* 为了实现高质量的图像，在轮廓边缘进行更精细的划分显然要比在表面内部进行精细划分的效果更好。\r\n* 如果想创建一个闭合的表面，确保闭合环的起点和终点使用完全相同的坐标，不然可能因为数值的四舍五入而产生有缺口的环。","slug":"-2013-07-17-0-html","updated":1419084672000,"excerpt":"","_id":"zaudx5zik6ej9rdq","comments":true,"photos":[],"link":""},{"date":1374854400000,"layout":"post","title":"openGL学习（三）-- 视图","categories":["phgmgqv2woypuv1r"],"tags":["oe66b35huw7v2drm"],"content":"<p>计算机图形的要点就是创建三维物体的二维图像（图像必须是二维的，因为它是在平面的屏幕上显示的）。我们要避免考虑屏幕上的像素是如何绘制的，而是要尽量在三维空间中想象物体的形状。</p>\n<p>本章主要介绍如何使用OpenGL完成如下任务：如何在三维空间中设置模型的位置和方向，以及如何确定观察者的位置（也是在三维空间中），最后能够准确地判断屏幕上所显示的图像。</p>\n<p>把一个物体的三维坐标变换为屏幕上的像素坐标，需要完成如下步骤：</p>\n<ol>\n<li>变换包括模型、视图和投影操作，它们是由矩阵乘法表示的。这些操作包括旋转、移动、缩放、反射、正投影和透视投影等。一般情况下，在绘制场景时需要组合使用几种变换。</li>\n<li>由于场景是在一个矩形窗口中渲染的，因此位于窗口之外的物体（或者物体的一部分）必须裁剪掉。在三维计算机图像中，裁剪就是丢弃位于裁剪平面之外的物体。</li>\n<li>最后，经过了变换的坐标和屏幕像素之间必须建立对应关系。这个过程称为视口(viewport)变换。</li>\n</ol>\n<h2 id=\"1_简介：用照相机打比方\"><strong>1 简介：用照相机打比方</strong></h2>\n<p>产生目标场景视图的变换过程类似于用照相机进行拍照。</p>\n<ol>\n<li>把照相机固定在三角架上，并让它对准场景（视图变换）。</li>\n<li>对场景进行安排，使各个物体在照片中的位置是我们所希望的（模型变换）。</li>\n<li>选择照相机镜头（广角镜头，标准镜头还是长焦镜头），并调整放大倍数（投影变换）。</li>\n<li>确定最终照片的大小。例如，我们很可能需要把它放大（视口变换）。</li>\n</ol>\n<p>以下具体介绍各方面：<br>首先是<strong>视图变换</strong>。通常在指定视图变换之前，需要使用glLoadIdentity( )函数把当前矩阵(current matrix)设置为单位矩阵。这个步骤是非常有必要的，因为绝大多数变换是把当前矩阵与指定的矩阵相乘，然后把结果指定为当前矩阵。如果没有通过加载单位矩阵来清除当前矩阵，它所进行的变换实际上是把当前的变换与上一次变换进行了组合。虽然有些情况下，确实需要这样的操作，但是更多情况下，还是需要清除当前矩阵。  </p>\n<p>使用gluLookAt( )函数指定了视图变换。如gluLookAt(0.0, 0.0, 5.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0)，若用照相机作比喻，则把照相机放在(0, 0, 5)的位置，把镜头瞄准(0, 0, 0)，并把朝上向量指定为(0, 1, 0)。如果没有调用gluLookAt( )函数，则照相机就被设置为默认的位置和方向。在默认情况下，照相机位于原点，指向Z轴的负方向，朝上向量为(0, 1, 0)。</p>\n<p>其次是<strong>模型变换</strong>。使用模型变换的目的是设置模型的位置和方向。例如，可以对模型进行旋转、移动和缩放，或者联合应用这些种操作。如模型变换函数glScalef(1.0, 3.0, 1.0)就是将模型y轴尺寸放大3倍。</p>\n<p>第三是<strong>投影变换</strong>。这种变换的目的是确定视野（或视景体），并因此确定哪些物体位于视野之内以及它们能够看到的程度。另外，投影变换还决定了物体是如何投影到屏幕上的。OpenGL提供了两种基本类型的投影，即透视投影（perspective projection）和正投影（orthographic projection）。透视投影类似于我们日常生活看到的景象。如果想创建现实感比较强的图像，就需要选择透视投影。而正投影直接映射到屏幕上，而不影响它们的相对大小，一般用于建筑和CAD应用程序中。</p>\n<p>与视图 / 模型变换一样，在设置投影变换之前，需要首先调用glMatrixMode(GL_PROJECTION)把当前矩阵指定为用于投影变换，再使用glLoadIdentity( )对当前的投影矩阵进行初始化。</p>\n<p>最后是<strong>视口变换</strong>。视口指定了场景在屏幕上所占据的区域，因此可以把视口变换看成是定义了最终经过处理的照片的大小和位置，如照片是否应该放大或者缩小。用glViewPort( )函数进行视口变换。</p>\n<p>视图变换、模型变换、投影变换和视口变换这四种变换一般将视图变换和模型变换分为一组，然后就剩下的再分为一组。视图变换和模型变换两种变换割裂开来是没有意义的。因为可以移动照相机（使用视图变换）来对准物体，也可以移动这个物体（模型变换）达到相同效果。而投影变换和视口变换则共同决定了场景是如何映射到计算机屏幕的。投影变换指定了映射的发生机制，而视口变换则决定了场景所映射的有效屏幕区域的形状。</p>\n<h2 id=\"2_视图变换和模型变换\"><strong>2 视图变换和模型变换</strong></h2>\n<p>注意，在执行模型或视图变换之前，必须以GL_MODELVIEW为参数调用glMatrixMode( )函数。</p>\n<p>视图变换和模型变换都是用一个4<em>4的矩阵表示的。每个后续的glMultMatrix</em>( )函数或变换函数把一个新的4*4的M与当前的模型视图C相乘，产生结果矩阵CM。最后，每个与当前的模型视图矩阵相乘。这个过程意味着程序所调用的最后一个变换函数实际上是首先应用于顶点的：CMv.</p>\n<p>如下面的代码序列，它使用3个变换绘制了1个点：</p>\n<pre><code><span class=\"function\">glMatrixMode</span>(GL_MODEVIEW);\n<span class=\"function\">glLoadIdentity</span>( );\n<span class=\"function\">glMultMatrixf</span>(N); <span class=\"comment\">/* apply transformation N */</span>\n<span class=\"function\">glMultMatrixf</span>(M); <span class=\"comment\">/* apply transformation M */</span>\n<span class=\"function\">glMultMatrixf</span>(L); <span class=\"comment\">/* apply transformation L */</span>\n<span class=\"function\">glBegin</span>(GL_POINTS);\n<span class=\"function\">glVertedx3f</span>(v); <span class=\"comment\">/* draw transformed vertex v */</span>\n<span class=\"function\">glEnd</span>( );\n</code></pre><p>在上述代码中，模型视图矩阵按顺序分别包含了I、N、NM，最后是NML，其中I表示单位矩阵。经过变换的顶点是NMLv。因此，顶点变换就是N(M(Lv))。所以，顶点v的变换是按照代码中相反的顺序发生的。</p>\n<p>在OpenGL中 ，有三个函数用于执行模型变换，分别为glTranslate<em>( )，glRotate</em>( )和glScale<em>( )。这三个函数都 相当于产生一个适当的移动、旋转或缩放矩阵，然后以这个矩阵作为参数调用glMultMatrix</em>( )。但是，使用这3个函数可能比使用glMultMatrix*( )速度更快，因为OpenGL会自动计算矩阵，一般来说比自己写的性能更高。</p>\n<p>而视图变换一般也是由移动和旋转组成的，即glTranslate<em>( )和glRotate</em>( )。为了在最终图像或照片上实现某种场景组合，可以移动照相机，也可以从相反的方向移动所有的物体。因此，一个按照逆时针方向旋转物体的模型变换相当于一个按顺时针方向旋转照相机的视图变换。<strong>最后，要记住视图变换函数必须在调用任何模型变换函数之前调用，以确何首先作用于物体的是模型变换</strong>。当然，除了直接使用移动和旋转函数之外，也可以使用工具函数gluLookAt( )实现视图变换，事实上一般也采用工具函数进行视图变换。</p>\n<h2 id=\"3_投影变换\"><strong>3 投影变换</strong></h2>\n<p>所谓投影变换就是定义投影矩阵用于对场景中的顶点进行变换。在调用手投影变换函数之前，必须首先进行以下操作：</p>\n<pre><code><span class=\"function\">glMatrixMode</span>(GL_PROJECTION);\n<span class=\"function\">glLoadIdentity</span>( );\n</code></pre><p>这样，接下来的变换函数将影响的是投影矩阵。由于每个投影变换函数都完整地描述了一个特定的变换，因此一般并不需要把投影变换与其他变换进行组合。</p>\n<p>投影变换的目的是定义一个视景体。视景体有两种用途。<strong>首先，视景体决定了一个物体是如何映射到屏幕上的（即通过透视投影还是正投影）。其次，视影体定义了哪些物体（或物体的一部分）被裁剪到最终的图像之外</strong>。</p>\n<p>投影变换分为两种，透视投影和正投影。</p>\n<p>透视投影方法常用于动画、视觉模拟以及其他要求某种程度的现实感的应用领域，因为它和我们在日常生活中观察事物的方式相同。该投影方法可以用glFrustum( )函数或者gluPerspective( )进行。</p>\n<p>正投影方法常用于建筑蓝图的计算机辅助设计（CAD）的应用程序。如果没有其他变换，投影的方向就与z轴平行，观察点的方向直接朝向z轴的负方向。该投影方法可以用glOrtho( )函数或者gluOrtho2D( )函数进行。</p>\n<h2 id=\"4_视口变换\"><strong>4 视口变换</strong></h2>\n<p>视口变换对应于选择被冲洗相片的大小这个阶段。我们希望照片像钱包一样大还是像海报一样大？在计算机图形中，视口是一个矩形的窗口区域，图像就是在这个区域中绘制的。</p>\n<p>在屏幕上打开窗口的是由窗口系统而不是OpenGL负责的。但是，在默认情况下，视口被设置为占据打开窗口的整个像素矩形。可以使用glViewPort( )函数选择一个更小的绘图区域。例如可以对窗口进行划分，在同一个窗口中显示分割屏幕的效果，以显示多个视图。</p>\n<p>使用glViewport( )函数进行视口变换，在默认情况下，礼品的初始值是(0, 0, winWidth, winHeight)，其中winWidth和winHeight分别为窗口的宽和高。</p>\n<p><strong>视口的纵横比一般和视景体的纵横比相同。如果这两个纵横比不同，当图像投影到视口时就会变形</strong>。</p>\n<p>视口变换期间同时在做另一件事，那就是进行尝试坐标的编码（以后存储在尝试缓冲区中）。可以使用glDepthRange( )函数对z值进行缩放。<strong>注意的是，与x和y窗口坐标不同，在OpenGL中，z坐标总是被认为位于0.0到1.0范围之间</strong>。</p>\n<h2 id=\"4_操纵矩阵堆栈\"><strong>4 操纵矩阵堆栈</strong></h2>\n<p>当我们对模型视图矩阵和投影矩阵进行创建、加载和乘法操作时，每一个操作针对的矩阵实际上是各自矩阵堆栈最顶部的那个元素，即栈顶的矩阵。换种说法就是，当前矩阵就是位于堆栈顶部的矩阵。</p>\n<p>可以采用glPushMatrix( )和glPopMatrix( )函数进行矩阵堆栈操作（包换模型视图矩阵和投影矩阵）。事实上，<strong>glPushMatrix( )</strong>表示“记住自己的位置”，即把当前堆栈中所有矩阵都下压一级。这个函数复制当前的顶部矩阵，并把它压到堆栈中。因此，刚调用完glPushMatrix( )函数时，堆栈最顶部的两个矩阵内容相同。而<strong>glPopMatrix( )</strong>表示“回到原来的位置”，即把堆栈顶部的矩阵弹出堆栈，销毁被弹出矩阵的内容。堆栈原先的第二个矩阵成为顶部矩阵。</p>\n<p>使用矩阵堆栈的效率要高于使用单独的堆栈，尤其是堆栈是用硬件实现时。压入一个矩阵时，并不需要把当前矩阵复制到主进程，并且硬件有可能一次能够复制多个矩阵元素。有时候，我们可能想在矩阵底部保存一个单位矩阵，以避免征象调用glLoadIdentity( )。</p>\n<h2 id=\"5_其他裁剪平面_\"><strong>5 其他裁剪平面</strong>  </h2>\n<p>除了视景体的6个裁剪平面（左、右、底、顶、近和远），还可以另外再指定最多可达6个的其他裁剪平面，对视景体进一步限制。这些裁剪平面可以用于删除场景中的无关物体，如我们可能只想显示一个物体的剖面视图。</p>\n","source":"_posts/2013-07-27-0.md","raw":"---\r\ndate: 2013-07-27\r\nlayout: post\r\ntitle: openGL学习（三）-- 视图\r\npermalink: '/2013/07-27-0.html'\r\ncategories:\r\n- 游戏开发\r\ntags:\r\n- openGL\r\n---\r\n\r\n\r\n计算机图形的要点就是创建三维物体的二维图像（图像必须是二维的，因为它是在平面的屏幕上显示的）。我们要避免考虑屏幕上的像素是如何绘制的，而是要尽量在三维空间中想象物体的形状。\r\n\r\n本章主要介绍如何使用OpenGL完成如下任务：如何在三维空间中设置模型的位置和方向，以及如何确定观察者的位置（也是在三维空间中），最后能够准确地判断屏幕上所显示的图像。\r\n\r\n把一个物体的三维坐标变换为屏幕上的像素坐标，需要完成如下步骤：\r\n\r\n1. 变换包括模型、视图和投影操作，它们是由矩阵乘法表示的。这些操作包括旋转、移动、缩放、反射、正投影和透视投影等。一般情况下，在绘制场景时需要组合使用几种变换。\r\n2. 由于场景是在一个矩形窗口中渲染的，因此位于窗口之外的物体（或者物体的一部分）必须裁剪掉。在三维计算机图像中，裁剪就是丢弃位于裁剪平面之外的物体。\r\n3. 最后，经过了变换的坐标和屏幕像素之间必须建立对应关系。这个过程称为视口(viewport)变换。\r\n\r\n**1 简介：用照相机打比方**\r\n-----------------------\r\n产生目标场景视图的变换过程类似于用照相机进行拍照。\r\n\r\n1. 把照相机固定在三角架上，并让它对准场景（视图变换）。\r\n2. 对场景进行安排，使各个物体在照片中的位置是我们所希望的（模型变换）。\r\n3. 选择照相机镜头（广角镜头，标准镜头还是长焦镜头），并调整放大倍数（投影变换）。\r\n4. 确定最终照片的大小。例如，我们很可能需要把它放大（视口变换）。\r\n\r\n以下具体介绍各方面：  \r\n首先是**视图变换**。通常在指定视图变换之前，需要使用glLoadIdentity( )函数把当前矩阵(current matrix)设置为单位矩阵。这个步骤是非常有必要的，因为绝大多数变换是把当前矩阵与指定的矩阵相乘，然后把结果指定为当前矩阵。如果没有通过加载单位矩阵来清除当前矩阵，它所进行的变换实际上是把当前的变换与上一次变换进行了组合。虽然有些情况下，确实需要这样的操作，但是更多情况下，还是需要清除当前矩阵。  \r\n\r\n使用gluLookAt( )函数指定了视图变换。如gluLookAt(0.0, 0.0, 5.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0)，若用照相机作比喻，则把照相机放在(0, 0, 5)的位置，把镜头瞄准(0, 0, 0)，并把朝上向量指定为(0, 1, 0)。如果没有调用gluLookAt( )函数，则照相机就被设置为默认的位置和方向。在默认情况下，照相机位于原点，指向Z轴的负方向，朝上向量为(0, 1, 0)。\r\n\r\n其次是**模型变换**。使用模型变换的目的是设置模型的位置和方向。例如，可以对模型进行旋转、移动和缩放，或者联合应用这些种操作。如模型变换函数glScalef(1.0, 3.0, 1.0)就是将模型y轴尺寸放大3倍。\r\n\r\n第三是**投影变换**。这种变换的目的是确定视野（或视景体），并因此确定哪些物体位于视野之内以及它们能够看到的程度。另外，投影变换还决定了物体是如何投影到屏幕上的。OpenGL提供了两种基本类型的投影，即透视投影（perspective projection）和正投影（orthographic projection）。透视投影类似于我们日常生活看到的景象。如果想创建现实感比较强的图像，就需要选择透视投影。而正投影直接映射到屏幕上，而不影响它们的相对大小，一般用于建筑和CAD应用程序中。\r\n\r\n与视图 / 模型变换一样，在设置投影变换之前，需要首先调用glMatrixMode(GL_PROJECTION)把当前矩阵指定为用于投影变换，再使用glLoadIdentity( )对当前的投影矩阵进行初始化。\r\n\r\n最后是**视口变换**。视口指定了场景在屏幕上所占据的区域，因此可以把视口变换看成是定义了最终经过处理的照片的大小和位置，如照片是否应该放大或者缩小。用glViewPort( )函数进行视口变换。\r\n\r\n视图变换、模型变换、投影变换和视口变换这四种变换一般将视图变换和模型变换分为一组，然后就剩下的再分为一组。视图变换和模型变换两种变换割裂开来是没有意义的。因为可以移动照相机（使用视图变换）来对准物体，也可以移动这个物体（模型变换）达到相同效果。而投影变换和视口变换则共同决定了场景是如何映射到计算机屏幕的。投影变换指定了映射的发生机制，而视口变换则决定了场景所映射的有效屏幕区域的形状。\r\n\r\n**2 视图变换和模型变换**\r\n----------------------\r\n注意，在执行模型或视图变换之前，必须以GL_MODELVIEW为参数调用glMatrixMode( )函数。\r\n\r\n视图变换和模型变换都是用一个4*4的矩阵表示的。每个后续的glMultMatrix*( )函数或变换函数把一个新的4*4的M与当前的模型视图C相乘，产生结果矩阵CM。最后，每个与当前的模型视图矩阵相乘。这个过程意味着程序所调用的最后一个变换函数实际上是首先应用于顶点的：CMv.\r\n\r\n如下面的代码序列，它使用3个变换绘制了1个点：\r\n\r\n\tglMatrixMode(GL_MODEVIEW);\r\n\tglLoadIdentity( );\r\n\tglMultMatrixf(N); /* apply transformation N */\r\n\tglMultMatrixf(M); /* apply transformation M */\r\n\tglMultMatrixf(L); /* apply transformation L */\r\n\tglBegin(GL_POINTS);\r\n\tglVertedx3f(v); /* draw transformed vertex v */\r\n\tglEnd( );\r\n\r\n在上述代码中，模型视图矩阵按顺序分别包含了I、N、NM，最后是NML，其中I表示单位矩阵。经过变换的顶点是NMLv。因此，顶点变换就是N(M(Lv))。所以，顶点v的变换是按照代码中相反的顺序发生的。\r\n\r\n在OpenGL中 ，有三个函数用于执行模型变换，分别为glTranslate*( )，glRotate*( )和glScale*( )。这三个函数都 相当于产生一个适当的移动、旋转或缩放矩阵，然后以这个矩阵作为参数调用glMultMatrix*( )。但是，使用这3个函数可能比使用glMultMatrix*( )速度更快，因为OpenGL会自动计算矩阵，一般来说比自己写的性能更高。\r\n\r\n而视图变换一般也是由移动和旋转组成的，即glTranslate*( )和glRotate*( )。为了在最终图像或照片上实现某种场景组合，可以移动照相机，也可以从相反的方向移动所有的物体。因此，一个按照逆时针方向旋转物体的模型变换相当于一个按顺时针方向旋转照相机的视图变换。**最后，要记住视图变换函数必须在调用任何模型变换函数之前调用，以确何首先作用于物体的是模型变换**。当然，除了直接使用移动和旋转函数之外，也可以使用工具函数gluLookAt( )实现视图变换，事实上一般也采用工具函数进行视图变换。\r\n\r\n**3 投影变换**\r\n--------------\r\n所谓投影变换就是定义投影矩阵用于对场景中的顶点进行变换。在调用手投影变换函数之前，必须首先进行以下操作：\r\n\r\n\tglMatrixMode(GL_PROJECTION);\r\n\tglLoadIdentity( );\r\n\r\n这样，接下来的变换函数将影响的是投影矩阵。由于每个投影变换函数都完整地描述了一个特定的变换，因此一般并不需要把投影变换与其他变换进行组合。\r\n\r\n投影变换的目的是定义一个视景体。视景体有两种用途。**首先，视景体决定了一个物体是如何映射到屏幕上的（即通过透视投影还是正投影）。其次，视影体定义了哪些物体（或物体的一部分）被裁剪到最终的图像之外**。\r\n\r\n投影变换分为两种，透视投影和正投影。\r\n\r\n透视投影方法常用于动画、视觉模拟以及其他要求某种程度的现实感的应用领域，因为它和我们在日常生活中观察事物的方式相同。该投影方法可以用glFrustum( )函数或者gluPerspective( )进行。\r\n\r\n正投影方法常用于建筑蓝图的计算机辅助设计（CAD）的应用程序。如果没有其他变换，投影的方向就与z轴平行，观察点的方向直接朝向z轴的负方向。该投影方法可以用glOrtho( )函数或者gluOrtho2D( )函数进行。\r\n\r\n**4 视口变换**\r\n--------------\r\n视口变换对应于选择被冲洗相片的大小这个阶段。我们希望照片像钱包一样大还是像海报一样大？在计算机图形中，视口是一个矩形的窗口区域，图像就是在这个区域中绘制的。\r\n\r\n在屏幕上打开窗口的是由窗口系统而不是OpenGL负责的。但是，在默认情况下，视口被设置为占据打开窗口的整个像素矩形。可以使用glViewPort( )函数选择一个更小的绘图区域。例如可以对窗口进行划分，在同一个窗口中显示分割屏幕的效果，以显示多个视图。\r\n\r\n使用glViewport( )函数进行视口变换，在默认情况下，礼品的初始值是(0, 0, winWidth, winHeight)，其中winWidth和winHeight分别为窗口的宽和高。\r\n\r\n**视口的纵横比一般和视景体的纵横比相同。如果这两个纵横比不同，当图像投影到视口时就会变形**。\r\n\r\n视口变换期间同时在做另一件事，那就是进行尝试坐标的编码（以后存储在尝试缓冲区中）。可以使用glDepthRange( )函数对z值进行缩放。**注意的是，与x和y窗口坐标不同，在OpenGL中，z坐标总是被认为位于0.0到1.0范围之间**。\r\n\r\n**4 操纵矩阵堆栈**\r\n------------------\r\n当我们对模型视图矩阵和投影矩阵进行创建、加载和乘法操作时，每一个操作针对的矩阵实际上是各自矩阵堆栈最顶部的那个元素，即栈顶的矩阵。换种说法就是，当前矩阵就是位于堆栈顶部的矩阵。\r\n\r\n可以采用glPushMatrix( )和glPopMatrix( )函数进行矩阵堆栈操作（包换模型视图矩阵和投影矩阵）。事实上，**glPushMatrix( )**表示“记住自己的位置”，即把当前堆栈中所有矩阵都下压一级。这个函数复制当前的顶部矩阵，并把它压到堆栈中。因此，刚调用完glPushMatrix( )函数时，堆栈最顶部的两个矩阵内容相同。而**glPopMatrix( )**表示“回到原来的位置”，即把堆栈顶部的矩阵弹出堆栈，销毁被弹出矩阵的内容。堆栈原先的第二个矩阵成为顶部矩阵。\r\n\r\n使用矩阵堆栈的效率要高于使用单独的堆栈，尤其是堆栈是用硬件实现时。压入一个矩阵时，并不需要把当前矩阵复制到主进程，并且硬件有可能一次能够复制多个矩阵元素。有时候，我们可能想在矩阵底部保存一个单位矩阵，以避免征象调用glLoadIdentity( )。\r\n\r\n**5 其他裁剪平面**  \r\n----------------\r\n除了视景体的6个裁剪平面（左、右、底、顶、近和远），还可以另外再指定最多可达6个的其他裁剪平面，对视景体进一步限制。这些裁剪平面可以用于删除场景中的无关物体，如我们可能只想显示一个物体的剖面视图。","slug":"-2013-07-27-0-html","updated":1419084646000,"excerpt":"","_id":"3vnyaifveqdp0tx4","comments":true,"photos":[],"link":""},{"date":1374940800000,"layout":"post","title":"openGL学习（四） -- 颜色","categories":["phgmgqv2woypuv1r"],"tags":["oe66b35huw7v2drm"],"content":"<h2 id=\"1_RGBA和颜色索引模式_\"><strong>1 RGBA和颜色索引模式</strong>  </h2>\n<p><strong>RGB显示模式</strong>：在此模式下，硬件为R、G、B和A成分保留一定数量的位平面（每种成分位平面数量并不一定相同）。像素可以显示的不同颜色的数量取决于位平面的数量以及硬件是如何解释这些位平面的。不同颜色的数量不能超过2的N次方，其中N是位平面的数量。  </p>\n<p>有些图形硬件使用<strong>抖动</strong>来增加可以显示的颜色数量。假定系统分别只有1个位来表示R、G、B，这样一共可以显示8种颜色：黑、白、红、蓝、绿、黄、青和洋红。现有一种颜色粉红色，这种颜色并不在系统可以显示的8种颜色中，那么系统如何实现显示呢。图形硬件仍然采用棋盘模式的方法，用红色和白色交替对像素进行着色。如果眼睛距离屏幕足够远，不能看到单独的像素，这块区域看上去就是粉红色的，那就是红色和白色的均值。但是，如果是从帧缓冲区读取像素信息，所得到的是实际的红色和白色的像素值，因为帧缓冲区中不存在“粉红色”。  </p>\n<p>如果分别用8位来表示R、G和B值，即使不借助抖动也可以创建高质量的图像。但是，并不是说，如果计算机具有24位的位平面，就可以不需要使用抖动了。例如，如果是在双缓冲模式下运行，位平面可能被分成两组，每组12位，这样每种颜色成分实际上只有4位。在许多情况下，如果不使用抖动，每种分4位的颜色是无法产生令人满意的效果的。<br>可以用GL_DITHER为参数调用glEnable( )或glDisable( )函数，分别启用或禁用抖动功能。<strong>注意，和其他许多特性不同，抖动在默认情况下是启用的</strong>。</p>\n<p><strong>颜色索引模式</strong>:在颜色索引模式下，OpenGL使用一个颜色映射表（或颜色查找表），类似于使用调色板来混合颜料，准备根据颜色编号来绘制场景。颜色映射表的大小是由专用的硬件决定的。</p>\n<h2 id=\"2_在RGBA和颜色索引模式中进行选择_\"><strong>2 在RGBA和颜色索引模式中进行选择</strong>  </h2>\n<p>应该根据可用的硬件和应用程序的要求来选择使用RGBA模式还是颜色索引模式。在绝大多数系统中，RGBA模式可以显示的颜色数量要远远多于颜色索引模式。另外，对于有些效果（如着色、光照、纹理贴图和雾），RGBA模式能够提供更大的灵活性。  </p>\n<p>一般而言，应该尽可能使用RGBA模式。RGBA模式可以在纹理贴图中使用，并且在使用光照、着色、雾和抗锯齿功能时更为灵活。</p>\n<h2 id=\"3_指定颜色和着色模型_\"><strong>3 指定颜色和着色模型</strong>  </h2>\n<p>OpenGL维护一种当前颜色（在RGBA模式下）或一个当前颜色索引（在颜色索引模式下）。一般每个物体都是用当前颜色（或当前颜色索引）绘制的，除非使用了一些更为复杂的着色模型，例如光照和纹理贴图。  </p>\n<p>在RGBA模式下，使用glColor<em>( )函数选择一种当前颜色。在颜色索引模式下，可以使用glIndex</em>( )函数选择一个单值颜色索引，把它作为当前的颜色索引。  </p>\n<p>直线或填充多边形可以用一种颜色进行绘制（<strong>单调着色</strong>），也可以用多种颜色进行绘制（<strong>平滑着色</strong>，也称Gouraud着色）。可以用glShadeModel( )函数指定所需的着色模型。在单调着色模型下，整个图元的颜色就是它任何一个顶点的颜色。在平滑着色模型下，每个顶点都是单独进行处理的。如果图元是直线，线段的颜色将根据两个顶点的颜色进行均匀插值。如果图元是多边形，多边形的内部颜色是所有顶点颜色的均匀插值。</p>\n","source":"_posts/2013-07-28-0.md","raw":"---\r\ndate: 2013-07-28\r\nlayout: post\r\ntitle: openGL学习（四） -- 颜色\r\npermalink: '/2013/07-28-0.html'\r\ncategories:\r\n- 游戏开发\r\ntags:\r\n- openGL\r\n---\r\n\r\n\r\n**1 RGBA和颜色索引模式**  \r\n--------------------\r\n**RGB显示模式**：在此模式下，硬件为R、G、B和A成分保留一定数量的位平面（每种成分位平面数量并不一定相同）。像素可以显示的不同颜色的数量取决于位平面的数量以及硬件是如何解释这些位平面的。不同颜色的数量不能超过2的N次方，其中N是位平面的数量。  \r\n\r\n有些图形硬件使用**抖动**来增加可以显示的颜色数量。假定系统分别只有1个位来表示R、G、B，这样一共可以显示8种颜色：黑、白、红、蓝、绿、黄、青和洋红。现有一种颜色粉红色，这种颜色并不在系统可以显示的8种颜色中，那么系统如何实现显示呢。图形硬件仍然采用棋盘模式的方法，用红色和白色交替对像素进行着色。如果眼睛距离屏幕足够远，不能看到单独的像素，这块区域看上去就是粉红色的，那就是红色和白色的均值。但是，如果是从帧缓冲区读取像素信息，所得到的是实际的红色和白色的像素值，因为帧缓冲区中不存在“粉红色”。  \r\n\r\n如果分别用8位来表示R、G和B值，即使不借助抖动也可以创建高质量的图像。但是，并不是说，如果计算机具有24位的位平面，就可以不需要使用抖动了。例如，如果是在双缓冲模式下运行，位平面可能被分成两组，每组12位，这样每种颜色成分实际上只有4位。在许多情况下，如果不使用抖动，每种分4位的颜色是无法产生令人满意的效果的。  \r\n可以用GL_DITHER为参数调用glEnable( )或glDisable( )函数，分别启用或禁用抖动功能。**注意，和其他许多特性不同，抖动在默认情况下是启用的**。\r\n\r\n**颜色索引模式**:在颜色索引模式下，OpenGL使用一个颜色映射表（或颜色查找表），类似于使用调色板来混合颜料，准备根据颜色编号来绘制场景。颜色映射表的大小是由专用的硬件决定的。\r\n\r\n**2 在RGBA和颜色索引模式中进行选择**  \r\n--------------------\r\n应该根据可用的硬件和应用程序的要求来选择使用RGBA模式还是颜色索引模式。在绝大多数系统中，RGBA模式可以显示的颜色数量要远远多于颜色索引模式。另外，对于有些效果（如着色、光照、纹理贴图和雾），RGBA模式能够提供更大的灵活性。  \r\n\r\n一般而言，应该尽可能使用RGBA模式。RGBA模式可以在纹理贴图中使用，并且在使用光照、着色、雾和抗锯齿功能时更为灵活。\r\n\r\n**3 指定颜色和着色模型**  \r\n--------------------\r\nOpenGL维护一种当前颜色（在RGBA模式下）或一个当前颜色索引（在颜色索引模式下）。一般每个物体都是用当前颜色（或当前颜色索引）绘制的，除非使用了一些更为复杂的着色模型，例如光照和纹理贴图。  \r\n\r\n在RGBA模式下，使用glColor*( )函数选择一种当前颜色。在颜色索引模式下，可以使用glIndex*( )函数选择一个单值颜色索引，把它作为当前的颜色索引。  \r\n\r\n直线或填充多边形可以用一种颜色进行绘制（**单调着色**），也可以用多种颜色进行绘制（**平滑着色**，也称Gouraud着色）。可以用glShadeModel( )函数指定所需的着色模型。在单调着色模型下，整个图元的颜色就是它任何一个顶点的颜色。在平滑着色模型下，每个顶点都是单独进行处理的。如果图元是直线，线段的颜色将根据两个顶点的颜色进行均匀插值。如果图元是多边形，多边形的内部颜色是所有顶点颜色的均匀插值。","slug":"-2013-07-28-0-html","updated":1419084636000,"excerpt":"","_id":"kce2wwsnwx6zzbc6","comments":true,"photos":[],"link":""},{"date":1404316800000,"layout":"post","title":"时间都去哪了","categories":["5uqjpmh62j3bpyf3"],"tags":[],"content":"<p>“我有太多的事要做，但却没有足够的时间。”<br>“为什么我每天都忙的不可开交，有些人却一切井井有条?”<br>“每次周末我都计划了一堆事，看书，运动，见朋友，但每次却都没有完成。”<br>……</p>\n<p>这些曾经困扰我的问题，现在似乎已全都不存在了。因为我懂得了，时间是整理出来的。鲁迅先生说“时间就像海绵里的水，只要愿意挤，总还是有的”。</p>\n<p>为什么会想做的事情太多，而时间太少？其实并不是这样的，也许你想做的事情并不多，其实你的时间也并不少，只是你的时间花在了不该花的地方。每次面对你杂乱无章的桌面，你是不是都无动于衷？你有多久没整理电脑里的文件了？没错，时间花错了地。当你要做某件事时，是不是总是要花点时间去寻找东西？既然如此，定时整理，让杂乱的生活离你远去，你的时间就会增多，你再也不会觉得时间不够了。</p>\n<p>你是否一直觉得自己很拖拉，是位不折不扣的拖延症患者？如果你不了解什么是拖延症，请移步<a href=\"http://book.douban.com/subject/4180711/\" target=\"_blank\" rel=\"external\">《拖延心理学》</a>。对于拖延，我只想说，你拖延不拖延，事情就在那里，不会多，也不会少。所以，马上“治愈”拖延症，说干就干，do it right now!</p>\n<p>时间最大的杀手事实上是不断打断你的环境。电话，email, IM工具，同事聊天等等，这些每天不间断地扼杀你的时间。也许你会认为，收个email, 说几句话也占用不了几分钟时间，那么你就错了。如果做事时不断被打断，那么进入<a href=\"http://en.wikipedia.org/wiki/Flow_\\(psychology\\\" target=\"_blank\" rel=\"external\">Flow</a>)（心流，俗称神驰）就几乎不可能，而效率最大的时刻就是进入Flow的阶段。另外，当你收了一封email，你心里有个小人就会说，浏览会网页吧，反正也花不了多少时间。然后，你就去浏览下今天的新闻，看看天气如何，当你回到现实时，又到了吃饭的时间了，糟了，我事还没干呢！</p>\n<p>“为什么加班的总是我？” 我每天白天一直在忙，晚上还要加班，事情总是干不完似的。那么，请你想想，你一天中有多少会，每次开会又花多少时间。开会的时候，是不是都在讨论相关的事。有没有在会上拉家常？另外，有没有每天被email所淹没，大量的时间花在收email, 回email上？</p>\n<p>最后，给你的时间加把劲。多用用你手边的高科技产品，随时记录将要做的事，必要的按时提醒，“科技是以人为本”的，学会善用它们。</p>\n","source":"_posts/2014-07-03-0.md","raw":"---\r\ndate: 2014-07-03\r\nlayout: post\r\ntitle: 时间都去哪了\r\npermalink: '/2014/07-03-0.html'\r\ncategories:\r\n- 杂感\r\ntags:\r\n---\r\n\r\n\r\n“我有太多的事要做，但却没有足够的时间。”  \r\n“为什么我每天都忙的不可开交，有些人却一切井井有条?”  \r\n“每次周末我都计划了一堆事，看书，运动，见朋友，但每次却都没有完成。”  \r\n……\r\n\r\n这些曾经困扰我的问题，现在似乎已全都不存在了。因为我懂得了，时间是整理出来的。鲁迅先生说“时间就像海绵里的水，只要愿意挤，总还是有的”。\r\n\r\n为什么会想做的事情太多，而时间太少？其实并不是这样的，也许你想做的事情并不多，其实你的时间也并不少，只是你的时间花在了不该花的地方。每次面对你杂乱无章的桌面，你是不是都无动于衷？你有多久没整理电脑里的文件了？没错，时间花错了地。当你要做某件事时，是不是总是要花点时间去寻找东西？既然如此，定时整理，让杂乱的生活离你远去，你的时间就会增多，你再也不会觉得时间不够了。\r\n\r\n你是否一直觉得自己很拖拉，是位不折不扣的拖延症患者？如果你不了解什么是拖延症，请移步[《拖延心理学》](http://book.douban.com/subject/4180711/)。对于拖延，我只想说，你拖延不拖延，事情就在那里，不会多，也不会少。所以，马上“治愈”拖延症，说干就干，do it right now!\r\n\r\n时间最大的杀手事实上是不断打断你的环境。电话，email, IM工具，同事聊天等等，这些每天不间断地扼杀你的时间。也许你会认为，收个email, 说几句话也占用不了几分钟时间，那么你就错了。如果做事时不断被打断，那么进入[Flow](http://en.wikipedia.org/wiki/Flow_\\(psychology\\))（心流，俗称神驰）就几乎不可能，而效率最大的时刻就是进入Flow的阶段。另外，当你收了一封email，你心里有个小人就会说，浏览会网页吧，反正也花不了多少时间。然后，你就去浏览下今天的新闻，看看天气如何，当你回到现实时，又到了吃饭的时间了，糟了，我事还没干呢！\r\n\r\n“为什么加班的总是我？” 我每天白天一直在忙，晚上还要加班，事情总是干不完似的。那么，请你想想，你一天中有多少会，每次开会又花多少时间。开会的时候，是不是都在讨论相关的事。有没有在会上拉家常？另外，有没有每天被email所淹没，大量的时间花在收email, 回email上？\r\n\r\n最后，给你的时间加把劲。多用用你手边的高科技产品，随时记录将要做的事，必要的按时提醒，“科技是以人为本”的，学会善用它们。","slug":"-2014-07-03-0-html","updated":1419084685000,"excerpt":"","_id":"pe19jypww9l70vkc","comments":true,"photos":[],"link":""},{"date":1407513600000,"layout":"post","title":"高效使用I/O","categories":["35dfvdhzm65go8n5"],"tags":["p203pmw1debposhm"],"content":"<p>网络编程中，遇到最多而且必定会遇到的就是I/O了。那么，如何正确使用I/O模型，使程序能高效率运行呢?首先，我们要了解下具体有哪些I/O模型。</p>\n<p><strong>I/O模型</strong><br>基本I/O模型一般有同步和异步，阻塞和非阻塞，<strong>基本可以分为阻塞型，非阻塞型，多路复用型和异步型4类</strong>。</p>\n<p><strong>阻塞型</strong><br>阻塞型即最简单使用read(2)等方法。由于read(2)方法是阻塞型函数，当程序使用read(2)向输入读取数据时，如果没有任何数据读取，则read(2)函数就会阻塞，直到输入中有数据可读并读出为止。如图2中简单程序，用read(2)实现阻塞型输入操作。</p>\n<pre><code><span class=\"keyword\">void</span> read_input(<span class=\"keyword\">int</span> fd, <span class=\"keyword\">void</span>* data)\n{\n     <span class=\"keyword\">char</span> buf[BUFSIZ];\n     <span class=\"keyword\">int</span> n;\n\n     n = <span class=\"keyword\">read</span>(fd, buf, BUFSIZ);\n     <span class=\"keyword\">if</span> (n &lt; <span class=\"number\">0</span>)      <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;  <span class=\"comment\">/* failed */</span>\n     <span class=\"keyword\">if</span> (n == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;       <span class=\"comment\">/* EOF */</span>\n     process(fd, buf, n);      <span class=\"comment\">/* success */</span>\n\n     <span class=\"keyword\">return</span> <span class=\"number\">1</span>;\n}\n</code></pre><p>图2中代码向输入读取最多BUFSIZ长度的数据，如果read(2)返回&lt;0, 则read(2)调用失败，可能为遇到中断信号等错误，如果read(2)返回==0，则为读到文件尾，在网络通信中即对端关闭了socket连接。如果返回其他值，则说明read(2)读取输入正常，且读取n长度的数据。但是，如果输入数据大于读取的最大长度BUFSIZ时，read(2)返回BUFSIZ长度，剩下的数据等待下次read(2)进行读取。当然，这里可能出现这样的情况，输入数据正好等于BUFSIZ长度时，read(2)也返回BUFSIZ值，这时就无法判断输入数据到底还有没有剩下，只能等待下次read(2)调用时才得认证。</p>\n<p>阻塞型模型必须循环调用read(2)以保证当有输入数据时，程序能得到这些数据。因为阻塞型模型无法知晓何时有数据可读，而且有多少数据也无从知道。在常见的网络编程中，并发存在成千上万个socket连接是很正常的现象，而阻塞型模型对每一个连接都要循环调用read(2)函数以保证每一个连接上有数据可读时能及时准备读取，这样就不得不开启N个线程（进程）进行read(2)调用，而且当大量空闲连接存在时，大量线程阻塞在read(2)上，显然这不是一个可行的方案。</p>\n<p>可见，阻塞型模型并不是现代网络编程可以采用的网络模型。</p>\n<p><strong>非阻塞型</strong><br>非阻塞型，依旧调用read(2)等方法。但不同的是，read(2)并不会阻塞，而是立即返回。若该连接的fd被设置为O_NONBLOCK时，则read(2)表现就会略有不同。当内核有数据可读取时，则返回读取的数据，返回数据的规则和阻塞型中read(2)相同；但是当内核没有数据可读时，read(2)并不会一直阻塞直到有数据可读，而是立即返回EAGAIN或者EWOULDBLOCK。具体情况见图3中代码。</p>\n<pre><code><span class=\"keyword\">void</span> read_input(<span class=\"keyword\">int</span> fd, <span class=\"keyword\">void</span>*data)\n{\n     <span class=\"keyword\">char</span> buf[BUFSIZ];\n     <span class=\"keyword\">int</span> n;\n\n     <span class=\"comment\">// 由于read(2)最多只能读取BUFSIZ数据，所以循环读取至无数据为止</span>\n     <span class=\"keyword\">for</span> ( ; ; ) {\n          n = <span class=\"keyword\">read</span>(fd, buf, BUFSIZ);\n          <span class=\"keyword\">if</span> (n &lt; <span class=\"number\">0</span>) {\n               <span class=\"comment\">// 事先设置fd为O_NONBLOCK，所以当无数据可读时，返回error</span>\n               <span class=\"keyword\">if</span> (errno == EAGAIN || errno == EWOULDBLOCK) {\n                    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;\n               }\n               <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;\n          }\n          <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (n == <span class=\"number\">0</span>) {\n               <span class=\"comment\">// 对端关闭连接</span>\n               <span class=\"keyword\">return</span> <span class=\"number\">0</span>;\n          }\n          <span class=\"keyword\">else</span> {\n               <span class=\"comment\">// 数据已读取，处理</span>\n               process(fd, buf, n);\n          }\n     }\n}\n</code></pre><p>图3中代码，事先对连接fd设置O_NONBLOCK（代码中无体现），所以当调用read(2)时，若内核中无数据可读时，则直接返回fail(值为-1)， 同时设置错误码为EAGAIN或者EWOULDBLOCK。同样，若返回0则表示对端可能关闭了相应的连接，现也没有数据过来了，而当返回&gt;0时，则接收数据正常，但同样无法保证数据已读取完毕。所以，代码中采用循环读取数据，由于当内核中无数据可读时，read(2)也会立即返回，并对错误码进行置位，如此可判断数据已读取完毕。综上所述图3中代码不会对程序造成阻塞，而且也读取数据时也不会因为数据长度超过BUFSZIZ而造成读取不完整，可见，与阻塞型相比，非阻塞型解决了调用read(2)阻塞和数据可能读取不完整的问题，但是同样，在现代服务器动辄上万连接的情况下，开启同样数据线程并定时读取的方法并不可行。</p>\n<p><strong>多路复用型</strong><br>无论是阻塞型和非阻塞型，两都均不适用于现代服务器。若是出现一位管家，当fd上有数据可读时，再通知应用程序，那不是很方便。这时，多路复用就登场了。目前支持多路复用的系统调用包括select, poll, epoll, kqueue等。</p>\n<p>说到这位管家，那就不得不说明下这管家有两种型号，分别对应在事件监视中同步的工作形态，即边沿触发和电平触发。这本来是在机械领域的两个概念，边沿触发是指只在状态变化的瞬间发出通知，而电平触发是指在状态发生变化的整个过程中都持续发出通知，具体可自行google。而在网络编程中，边沿触发和电平触发又是如何体现的呢？边沿触发，只在数据到达的瞬间产生通知，即每次数据到达只会通知一次，具体读取还是不读取，就要看应用程序了。而电平触发，只有内核缓冲区中有数据，它就会持续通知应用程序，多么敬业的一位管家啊。当然，在效率上，边沿触发还是占有绝对的优势。<br>下面举下select的例子，伪代码如图4。</p>\n<pre><code>int fd_socket = socket(<span class=\"keyword\">...</span>);     // 监听新连接socket\nbind(<span class=\"keyword\">...</span>);\nlisten(<span class=\"keyword\">...</span>);\n\nint fd_in[MAX];     // 监听已连接socket\n\nfd_set fs;\n\n<span class=\"keyword\">while</span>(<span class=\"number\">1</span>){\n  FD_ZERO(fs...);\n  // 对所有已连接socket进行监听\n  for_each(fd_in) {\n       FD_SET(fd, fs);\n  }\n  // 对接收新连接socket进行监听\n  FD_SET(fd_socket, fs);\n\n  // 若没有任何fd可读，则阻塞\n  select(<span class=\"keyword\">...</span>);\n\n  <span class=\"keyword\">if</span>(FD_ISSET(fd_socket...)) {\n        accept(<span class=\"keyword\">...</span>);\n    }\n\n  <span class=\"keyword\">if</span>(FD_ISSET(fd_stdin...)) {\n        read(<span class=\"keyword\">...</span>);\n  }\n}\n</code></pre><p>这里，select总管所有可能有数据可读的fd, 并阻塞调用直到至少有一个fd可读。当然，读者可能觉得该代码中有个小问题，就是之前描述过的read(2)数据读取不完全的情况。当然，这是个必须考虑的问题。但是select只支持电平触发，所以read(2)未读取完全，下次调用select时内核也会继续通知该fd可读，所以理论上是不会出现数据读取不完整的情况，但是由于要等到下次循环时才能读取数据，对性能有追求的情况下，依然还是可以对fd设置O_NONBLOCK，循环读取fd直到读取完毕为止。当然，在边沿触发情况下（epoll可设置），则必须使用O_NONBLOCK读取完全，否则有可能出现数据读取不完整的情况。<br>当然非阻塞型非常适合现代服务器的编写，即不会造成大量线程阻塞，也不会需要成千上万的线程对每一个连接进行数据读取，这不得不说多路复用真是个好管家。</p>\n<p><strong>异步型</strong><br>若是采用异步模型，则必须使用异步接口I/O接口了。异步模型可以说是最理想的网络模型，因为CPU只是在有必要的时候参与，对CPU的利用没有一点浪费。当然，若是采用异步模型，直接采用异步接口进行编程就可以了，这里就不再赘述。</p>\n","source":"_posts/2014-08-09-0.md","raw":"---\r\ndate: 2014-08-09\r\nlayout: post\r\ntitle: 高效使用I/O\r\npermalink: '/2014/08-09-0.html'\r\ncategories:\r\n- 服务器编程\r\ntags:\r\n- 网络I/O\r\n---\r\n\r\n\r\n网络编程中，遇到最多而且必定会遇到的就是I/O了。那么，如何正确使用I/O模型，使程序能高效率运行呢?首先，我们要了解下具体有哪些I/O模型。\r\n\r\n**I/O模型**  \r\n基本I/O模型一般有同步和异步，阻塞和非阻塞，**基本可以分为阻塞型，非阻塞型，多路复用型和异步型4类**。\r\n\r\n**阻塞型**  \r\n阻塞型即最简单使用read(2)等方法。由于read(2)方法是阻塞型函数，当程序使用read(2)向输入读取数据时，如果没有任何数据读取，则read(2)函数就会阻塞，直到输入中有数据可读并读出为止。如图2中简单程序，用read(2)实现阻塞型输入操作。\r\n\r\n\tvoid read_input(int fd, void* data)\r\n\t{\r\n\t     char buf[BUFSIZ];\r\n\t     int n;\r\n\t \r\n\t     n = read(fd, buf, BUFSIZ);\r\n\t     if (n < 0)      return -1;  /* failed */\r\n\t     if (n == 0) return 0;       /* EOF */\r\n\t     process(fd, buf, n);      /* success */\r\n\t \r\n\t     return 1;\r\n\t}\r\n\r\n图2中代码向输入读取最多BUFSIZ长度的数据，如果read(2)返回<0, 则read(2)调用失败，可能为遇到中断信号等错误，如果read(2)返回==0，则为读到文件尾，在网络通信中即对端关闭了socket连接。如果返回其他值，则说明read(2)读取输入正常，且读取n长度的数据。但是，如果输入数据大于读取的最大长度BUFSIZ时，read(2)返回BUFSIZ长度，剩下的数据等待下次read(2)进行读取。当然，这里可能出现这样的情况，输入数据正好等于BUFSIZ长度时，read(2)也返回BUFSIZ值，这时就无法判断输入数据到底还有没有剩下，只能等待下次read(2)调用时才得认证。\r\n\r\n阻塞型模型必须循环调用read(2)以保证当有输入数据时，程序能得到这些数据。因为阻塞型模型无法知晓何时有数据可读，而且有多少数据也无从知道。在常见的网络编程中，并发存在成千上万个socket连接是很正常的现象，而阻塞型模型对每一个连接都要循环调用read(2)函数以保证每一个连接上有数据可读时能及时准备读取，这样就不得不开启N个线程（进程）进行read(2)调用，而且当大量空闲连接存在时，大量线程阻塞在read(2)上，显然这不是一个可行的方案。\r\n\r\n可见，阻塞型模型并不是现代网络编程可以采用的网络模型。\r\n\r\n**非阻塞型**  \r\n非阻塞型，依旧调用read(2)等方法。但不同的是，read(2)并不会阻塞，而是立即返回。若该连接的fd被设置为O_NONBLOCK时，则read(2)表现就会略有不同。当内核有数据可读取时，则返回读取的数据，返回数据的规则和阻塞型中read(2)相同；但是当内核没有数据可读时，read(2)并不会一直阻塞直到有数据可读，而是立即返回EAGAIN或者EWOULDBLOCK。具体情况见图3中代码。\r\n\r\n\tvoid read_input(int fd, void*data)\r\n\t{\r\n\t     char buf[BUFSIZ];\r\n\t     int n;\r\n\t \r\n\t     // 由于read(2)最多只能读取BUFSIZ数据，所以循环读取至无数据为止\r\n\t     for ( ; ; ) {\r\n\t          n = read(fd, buf, BUFSIZ);\r\n\t          if (n < 0) {\r\n\t               // 事先设置fd为O_NONBLOCK，所以当无数据可读时，返回error\r\n\t               if (errno == EAGAIN || errno == EWOULDBLOCK) {\r\n\t                    return 1;\r\n\t               }\r\n\t               return -1;\r\n\t          }\r\n\t          else if (n == 0) {\r\n\t               // 对端关闭连接\r\n\t               return 0;\r\n\t          }\r\n\t          else {\r\n\t               // 数据已读取，处理\r\n\t               process(fd, buf, n);\r\n\t          }\r\n\t     }\r\n\t}\r\n\r\n图3中代码，事先对连接fd设置O_NONBLOCK（代码中无体现），所以当调用read(2)时，若内核中无数据可读时，则直接返回fail(值为-1)， 同时设置错误码为EAGAIN或者EWOULDBLOCK。同样，若返回0则表示对端可能关闭了相应的连接，现也没有数据过来了，而当返回>0时，则接收数据正常，但同样无法保证数据已读取完毕。所以，代码中采用循环读取数据，由于当内核中无数据可读时，read(2)也会立即返回，并对错误码进行置位，如此可判断数据已读取完毕。综上所述图3中代码不会对程序造成阻塞，而且也读取数据时也不会因为数据长度超过BUFSZIZ而造成读取不完整，可见，与阻塞型相比，非阻塞型解决了调用read(2)阻塞和数据可能读取不完整的问题，但是同样，在现代服务器动辄上万连接的情况下，开启同样数据线程并定时读取的方法并不可行。\r\n\r\n**多路复用型**  \r\n无论是阻塞型和非阻塞型，两都均不适用于现代服务器。若是出现一位管家，当fd上有数据可读时，再通知应用程序，那不是很方便。这时，多路复用就登场了。目前支持多路复用的系统调用包括select, poll, epoll, kqueue等。\r\n\r\n说到这位管家，那就不得不说明下这管家有两种型号，分别对应在事件监视中同步的工作形态，即边沿触发和电平触发。这本来是在机械领域的两个概念，边沿触发是指只在状态变化的瞬间发出通知，而电平触发是指在状态发生变化的整个过程中都持续发出通知，具体可自行google。而在网络编程中，边沿触发和电平触发又是如何体现的呢？边沿触发，只在数据到达的瞬间产生通知，即每次数据到达只会通知一次，具体读取还是不读取，就要看应用程序了。而电平触发，只有内核缓冲区中有数据，它就会持续通知应用程序，多么敬业的一位管家啊。当然，在效率上，边沿触发还是占有绝对的优势。  \r\n下面举下select的例子，伪代码如图4。\r\n\r\n\tint fd_socket = socket(...);     // 监听新连接socket\r\n\tbind(...);\r\n\tlisten(...);\r\n\t \r\n\tint fd_in[MAX];     // 监听已连接socket\r\n\t \r\n\tfd_set fs;\r\n\t \r\n\twhile(1){\r\n\t  FD_ZERO(fs...);\r\n\t  // 对所有已连接socket进行监听\r\n\t  for_each(fd_in) {\r\n\t       FD_SET(fd, fs);\r\n\t  }\r\n\t  // 对接收新连接socket进行监听\r\n\t  FD_SET(fd_socket, fs);\r\n\t \r\n\t  // 若没有任何fd可读，则阻塞\r\n\t  select(...);\r\n\t \r\n\t  if(FD_ISSET(fd_socket...)) {\r\n\t        accept(...);\r\n\t    }\r\n\t \r\n\t  if(FD_ISSET(fd_stdin...)) {\r\n\t        read(...);\r\n\t  }\r\n\t}\r\n\r\n这里，select总管所有可能有数据可读的fd, 并阻塞调用直到至少有一个fd可读。当然，读者可能觉得该代码中有个小问题，就是之前描述过的read(2)数据读取不完全的情况。当然，这是个必须考虑的问题。但是select只支持电平触发，所以read(2)未读取完全，下次调用select时内核也会继续通知该fd可读，所以理论上是不会出现数据读取不完整的情况，但是由于要等到下次循环时才能读取数据，对性能有追求的情况下，依然还是可以对fd设置O_NONBLOCK，循环读取fd直到读取完毕为止。当然，在边沿触发情况下（epoll可设置），则必须使用O_NONBLOCK读取完全，否则有可能出现数据读取不完整的情况。  \r\n当然非阻塞型非常适合现代服务器的编写，即不会造成大量线程阻塞，也不会需要成千上万的线程对每一个连接进行数据读取，这不得不说多路复用真是个好管家。\r\n\r\n**异步型**  \r\n若是采用异步模型，则必须使用异步接口I/O接口了。异步模型可以说是最理想的网络模型，因为CPU只是在有必要的时候参与，对CPU的利用没有一点浪费。当然，若是采用异步模型，直接采用异步接口进行编程就可以了，这里就不再赘述。","slug":"-2014-08-09-0-html","updated":1419077189000,"excerpt":"","_id":"uq6cghl8it3qc3fl","comments":true,"photos":[],"link":""},{"date":1407513600000,"layout":"post","title":"如何用lua实现面向对象","categories":["mszl38ac5o7gyin7"],"tags":["v05jjt7gz3zyzrsd"],"content":"<p>lua作为一门非面向对象的轻量级语言，如何才能方便的用面向对象的方法来进行编程呢？</p>\n<p>首先,编程范型对面向对象编程（OOP）是如何定义的呢？<strong>通常，OOP被理解为一种将程序分解为封装数据及相关操作的模块而进行的编程方式</strong>。有别于其他编程方式，OOP中的与某些数据类型相关的一系列操作都被有机地封装到该数据类型当中，而非散放于其外，因而<strong>OPP中的数据类型不仅有着状态，还有着相关的操作</strong>。（来自wikipedia）</p>\n<p>以一言蔽之，就是数据中包含对数据的操作行为。如此甚好，在lua中只要有<strong>强力类型table</strong>即实现了。</p>\n<pre><code><span class=\"comment\">-- 定义table类型</span>\npoint = { }\n\n<span class=\"comment\">-- 在table中增加x, y两个数据</span>\npoint.x = <span class=\"number\">3</span>\npoint.y = <span class=\"number\">4</span>\n\n<span class=\"comment\">-- 在table中增加magnitude方法</span>\npoint.magnitude = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span></span>\n    <span class=\"keyword\">return</span> <span class=\"built_in\">math</span>.sqrt(point.x^<span class=\"number\">2</span> + point.y^<span class=\"number\">2</span>)\n<span class=\"keyword\">end</span>\n\n<span class=\"comment\">-- 调用point中方法处理数据</span>\n<span class=\"built_in\">print</span>(point.magnitude())\n</code></pre><p>确实，数据的行为被封装在table类型point中了，但是，这看上去也太不专业了，我们不能这么没追求是吧。而且，继承呢，多态呢？完全没有面向对象的影子嘛。模仿也要有模仿的样子嘛。</p>\n<p>当然，这并不是我们可以接受的版本。在讲解可用版本之前，先来解释下lua中的一大利器–metatable。先来看其官方定义：<strong>metatable用来定义原始值在特定操作下的行为</strong>。你可以通过在metatable中的特定域设一值来改变拥有这个metatable的值的指定操作行为。举例来说，当一个非数字的值作加法操作的时候，Lua会检查它的metatable中的“__add“域中是否有一个函数，如果有这么一个函数的，Lua调用这个函数来执行一次加法（来自lua中文手册）。人们说，“光说不练，假把式”，所以show the code(加法改用add方法)。</p>\n<pre><code>-- 定义table point\npoint = <span class=\"comment\">{ }</span>\n<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">point</span>:</span><span class=\"keyword\">add</span>(p)\n    <span class=\"keyword\">self</span>.x = <span class=\"keyword\">self</span>.x + p.x \n    <span class=\"keyword\">self</span>.y = <span class=\"keyword\">self</span>.y + p.y \n<span class=\"keyword\">end</span>\n\n-- 定义table point_a和point_b\npoint_a = <span class=\"comment\">{ x = 1, y = 2 }</span>\npoint_b = <span class=\"comment\">{ x = 2, y = 1 }</span>\n\n-- 对point_a设置元表\nsetmetatable(point_a, <span class=\"comment\">{ __index = point }</span>)\n\n-- 调用point_a的<span class=\"keyword\">add</span>方法，由于point_a为没有<span class=\"keyword\">add</span>方法，所以向其元表point中查询，发现有<span class=\"keyword\">add</span>方法，调用之\npoint_a:<span class=\"keyword\">add</span>(point_b)\n\n-- 打印调用<span class=\"keyword\">add</span>方法后的point_a\nprint(point_a.x, point_a.y)\n</code></pre><p>这里定义了一个table point，其包含add方法，并将其设置为point_a的元表。当调用point_a的add方法时，首在在point_a中寻找add方法，但是point_a中并没有add方法，所以再次在point_a的元表，即point中寻找add方法并进行调用。</p>\n<p>在一个table中找不到某个方法，就向其元表中寻找。这个特性不就如同面向对象中子类方法找不到时，在其父类中寻找。既然如此，那么利用Lua的metatable，很容易就实现类似面向对象的功能。</p>\n<p>首先，定义一个全局的Class做为“类的关键字”。</p>\n<pre><code>-- Object为所有对象的上级\nObject = { }\n\n-- 创建现有对象副本的方法\n<span class=\"keyword\">function</span> Object:clone()\n    local object = { }\n    <span class=\"keyword\">for</span> k, v <span class=\"keyword\">in</span> pairs(self) do\n        object[k] = v\n    end\n\n    setmetatable(object, { __index = self })\n\n    <span class=\"keyword\">return</span> object\nend\n\n-- 允许类似基于类编程的用法\n<span class=\"keyword\">function</span> Object:new(<span class=\"keyword\">...</span>)\n    local object = { }\n\n    setmetatable(object, { __index = self })\n\n    object:initialize(<span class=\"keyword\">...</span>)\n\n    <span class=\"keyword\">return</span> object\nend\n\n<span class=\"keyword\">function</span> Object:initialize(<span class=\"keyword\">...</span>)\n    -- do nothing \nend\n\n-- 定义Class原型\nClass = Object:new()\n</code></pre><p>里面定义了一个名为Object的table, 然后在该table中分别定义了clone(),new(…)和initialize(…)三个方法。</p>\n<p>首先看clone方法，该方法对Object自身制作了一份copy，同时又将Object自身作为copy对象的元表的__index域的值。这样，当copy对象对某一变量或者方法进行索引时，并且发现copy对象并不包含索引对象时，就再次对被copy对象进行索引。如此便可实现上文中metatable.lua文件中的功能。</p>\n<p>然后看new方法。该方法中定义一个object table, 并对其进行初始化操作后直接返回。</p>\n<p>最后，直接定义Class原型，作为“类关键字”，方便以后调用。</p>\n<p>定义完”Class关键字”后，实现类似面向对象的编程就非常简单了。直接附上经典示例。</p>\n<pre><code><span class=\"built_in\">require</span> <span class=\"string\">'lua/class'</span>\n\n<span class=\"comment\">-- 定义Point类</span>\nPoint = Class:<span class=\"built_in\">new</span>()\n\n<span class=\"comment\">-- 定义Point类的初始化方法</span>\n<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Point</span>:<span class=\"title\">initialize</span>(<span class=\"title\">x</span>, <span class=\"title\">y</span>)</span>\n    self.x = x\n    self.y = y\n<span class=\"function\"><span class=\"keyword\">end</span></span>\n\n<span class=\"comment\">-- 定义Point类的距离方法</span>\n<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Point</span>:<span class=\"title\">magnitude</span>()</span>\n    <span class=\"constant\">return</span> math.<span class=\"built_in\">sqrt</span>(self.x^<span class=\"number\">2</span> + self.y^<span class=\"number\">2</span>)\n<span class=\"function\"><span class=\"keyword\">end</span></span>\n\n<span class=\"comment\">-- 打印point(3, 4)的距离</span>\nprint(Point:<span class=\"built_in\">new</span>(<span class=\"number\">3</span>, <span class=\"number\">4</span>):magnitude())\n\n\n<span class=\"built_in\">require</span> <span class=\"string\">'lua/point'</span>\n\n<span class=\"comment\">-- 定义Point3D类, 该类继承自Point类</span>\nPoint3D = Point:clone()\n\n<span class=\"comment\">-- 定义Point3D类的初始化方法</span>\n<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Point3D</span>:<span class=\"title\">initialize</span>(<span class=\"title\">x</span>, <span class=\"title\">y</span>, <span class=\"title\">z</span>)</span>\n    Point.initialize(self, x, y)\n    self.z = z\n<span class=\"function\"><span class=\"keyword\">end</span></span>\n\n<span class=\"comment\">-- 定义Point3D类的距离方法</span>\n<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Point3D</span>:<span class=\"title\">magnitude</span>()</span>\n    <span class=\"constant\">return</span> math.<span class=\"built_in\">sqrt</span>(self.x^<span class=\"number\">2</span> + self.y^<span class=\"number\">2</span> + self.z^<span class=\"number\">2</span>)\n<span class=\"function\"><span class=\"keyword\">end</span></span>\n\n<span class=\"comment\">-- 打印point(1, 2, 3)的距离</span>\nprint(Point3D:<span class=\"built_in\">new</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>):magnitude())\n</code></pre><p><strong>[REFERENCE]</strong>    </p>\n<ul>\n<li>wikipedia    </li>\n<li>lua中文手册    </li>\n<li>代码的未来    </li>\n</ul>\n","source":"_posts/2014-08-09-1.md","raw":"---\r\ndate: 2014-08-09\r\nlayout: post\r\ntitle: 如何用lua实现面向对象\r\npermalink: '/2014/08-09-1.html'\r\ncategories:\r\n- lua\r\ntags:\r\n- 面向对象\r\n---\r\n\r\n\r\nlua作为一门非面向对象的轻量级语言，如何才能方便的用面向对象的方法来进行编程呢？\r\n\r\n首先,编程范型对面向对象编程（OOP）是如何定义的呢？**通常，OOP被理解为一种将程序分解为封装数据及相关操作的模块而进行的编程方式**。有别于其他编程方式，OOP中的与某些数据类型相关的一系列操作都被有机地封装到该数据类型当中，而非散放于其外，因而**OPP中的数据类型不仅有着状态，还有着相关的操作**。（来自wikipedia）\r\n\r\n以一言蔽之，就是数据中包含对数据的操作行为。如此甚好，在lua中只要有**强力类型table**即实现了。\r\n\r\n    -- 定义table类型\r\n    point = { }\r\n     \r\n    -- 在table中增加x, y两个数据\r\n    point.x = 3\r\n    point.y = 4\r\n     \r\n    -- 在table中增加magnitude方法\r\n    point.magnitude = function ()\r\n        return math.sqrt(point.x^2 + point.y^2)\r\n    end\r\n     \r\n    -- 调用point中方法处理数据\r\n    print(point.magnitude())\r\n\r\n确实，数据的行为被封装在table类型point中了，但是，这看上去也太不专业了，我们不能这么没追求是吧。而且，继承呢，多态呢？完全没有面向对象的影子嘛。模仿也要有模仿的样子嘛。\r\n\r\n当然，这并不是我们可以接受的版本。在讲解可用版本之前，先来解释下lua中的一大利器–metatable。先来看其官方定义：**metatable用来定义原始值在特定操作下的行为**。你可以通过在metatable中的特定域设一值来改变拥有这个metatable的值的指定操作行为。举例来说，当一个非数字的值作加法操作的时候，Lua会检查它的metatable中的“__add“域中是否有一个函数，如果有这么一个函数的，Lua调用这个函数来执行一次加法（来自lua中文手册）。人们说，“光说不练，假把式”，所以show the code(加法改用add方法)。\r\n\r\n    -- 定义table point\r\n    point = { }\r\n    function point:add(p)\r\n        self.x = self.x + p.x \r\n        self.y = self.y + p.y \r\n    end\r\n     \r\n    -- 定义table point_a和point_b\r\n    point_a = { x = 1, y = 2 }\r\n    point_b = { x = 2, y = 1 }\r\n     \r\n    -- 对point_a设置元表\r\n    setmetatable(point_a, { __index = point })\r\n     \r\n    -- 调用point_a的add方法，由于point_a为没有add方法，所以向其元表point中查询，发现有add方法，调用之\r\n    point_a:add(point_b)\r\n     \r\n    -- 打印调用add方法后的point_a\r\n    print(point_a.x, point_a.y)\r\n\r\n这里定义了一个table point，其包含add方法，并将其设置为point_a的元表。当调用point_a的add方法时，首在在point_a中寻找add方法，但是point_a中并没有add方法，所以再次在point_a的元表，即point中寻找add方法并进行调用。\r\n\r\n在一个table中找不到某个方法，就向其元表中寻找。这个特性不就如同面向对象中子类方法找不到时，在其父类中寻找。既然如此，那么利用Lua的metatable，很容易就实现类似面向对象的功能。\r\n\r\n首先，定义一个全局的Class做为“类的关键字”。\r\n\r\n    -- Object为所有对象的上级\r\n    Object = { }\r\n     \r\n    -- 创建现有对象副本的方法\r\n    function Object:clone()\r\n        local object = { }\r\n        for k, v in pairs(self) do\r\n            object[k] = v\r\n        end\r\n     \r\n        setmetatable(object, { __index = self })\r\n     \r\n        return object\r\n    end\r\n     \r\n    -- 允许类似基于类编程的用法\r\n    function Object:new(...)\r\n        local object = { }\r\n     \r\n        setmetatable(object, { __index = self })\r\n     \r\n        object:initialize(...)\r\n     \r\n        return object\r\n    end\r\n     \r\n    function Object:initialize(...)\r\n        -- do nothing \r\n    end\r\n     \r\n    -- 定义Class原型\r\n    Class = Object:new()\r\n\r\n里面定义了一个名为Object的table, 然后在该table中分别定义了clone(),new(…)和initialize(…)三个方法。\r\n\r\n首先看clone方法，该方法对Object自身制作了一份copy，同时又将Object自身作为copy对象的元表的__index域的值。这样，当copy对象对某一变量或者方法进行索引时，并且发现copy对象并不包含索引对象时，就再次对被copy对象进行索引。如此便可实现上文中metatable.lua文件中的功能。\r\n\r\n然后看new方法。该方法中定义一个object table, 并对其进行初始化操作后直接返回。\r\n\r\n最后，直接定义Class原型，作为“类关键字”，方便以后调用。\r\n\r\n定义完”Class关键字”后，实现类似面向对象的编程就非常简单了。直接附上经典示例。\r\n\r\n    require 'lua/class'\r\n     \r\n    -- 定义Point类\r\n    Point = Class:new()\r\n     \r\n    -- 定义Point类的初始化方法\r\n    function Point:initialize(x, y)\r\n        self.x = x\r\n        self.y = y\r\n    end\r\n     \r\n    -- 定义Point类的距离方法\r\n    function Point:magnitude()\r\n        return math.sqrt(self.x^2 + self.y^2)\r\n    end\r\n     \r\n    -- 打印point(3, 4)的距离\r\n    print(Point:new(3, 4):magnitude())\r\n\r\n\r\n    require 'lua/point'\r\n     \r\n    -- 定义Point3D类, 该类继承自Point类\r\n    Point3D = Point:clone()\r\n     \r\n    -- 定义Point3D类的初始化方法\r\n    function Point3D:initialize(x, y, z)\r\n        Point.initialize(self, x, y)\r\n        self.z = z\r\n    end\r\n     \r\n    -- 定义Point3D类的距离方法\r\n    function Point3D:magnitude()\r\n        return math.sqrt(self.x^2 + self.y^2 + self.z^2)\r\n    end\r\n     \r\n    -- 打印point(1, 2, 3)的距离\r\n    print(Point3D:new(1, 2, 3):magnitude())\r\n\r\n**[REFERENCE]**    \r\n\r\n* wikipedia    \r\n* lua中文手册    \r\n* 代码的未来    ","slug":"-2014-08-09-1-html","updated":1419078146000,"excerpt":"","_id":"5bwoyzieku6pckfy","comments":true,"photos":[],"link":""},{"date":1407513600000,"layout":"post","title":"编程语言的发展之路 — 读《代码的未来》","categories":["c6jb1xulxw9ix8l0"],"tags":["h69hdiekkpvpaizu","5f03qmnxcygbefny"],"content":"<p>本书是Matz在《日经Linux》上连载的各期内容的合集，虽然内容有些部分重复，但是内容还是很丰富的，主题也比较鲜明，与国内的某些合集甩开太远。    </p>\n<p>通书下来，个人觉得最精华的还是第2章：编程语言的过去、现在和未来。Matz通过简单回顾编程语言的过去，着重分析现在和未来的发展。主要分为以下几类：<strong>DSL，meta-programming，内存管理，异常处理，闭包</strong>。     </p>\n<p><strong>DSL</strong>，即特定领域语言，将几乎只有程序员的编程语言进化成符合具体领域业务的特定语言，而且该语言与自然语言类似，方便非编程人员也可用其进行编程，可以解决开发人员对业务透视程度不够，业务人员无能力进行编码的矛盾。回想还在前东家码程序时，由于是游戏工作室，经常出现小工具方便策划实现自己的想法，这几乎是与DSL方向不谋而合。做为攻城师，如何把自己从代码中解放出来，如何让非编程人员方便的进行编程工作也是一种能力啊。  </p>\n<p><strong>元编程</strong>，即可以自己写程序的程序。身为苦逼码农，还记得需求一日一变的痛若吗？还记得数据库迁移时，代码大动的尴尬吗？请用元编程利器，让你一劳永逸，面对千变万化，不动任何代码就是完善支持。善哉，这才是程序员的理想生活。当然，元编程并不是所有语言都支持，当然上古语言Lisp可以说是其始祖，但是便于理解，还是举个Ruby的例子，如下：</p>\n<pre><code><span class=\"xml\"><span class=\"tag\"><span class=\"attribute\">require</span> '<span class=\"attribute\">builder</span>'\n<span class=\"attribute\">builder</span> = <span class=\"attribute\">Builder::XmlMarkup.new</span>\n<span class=\"attribute\">xml</span> = <span class=\"attribute\">builder.person</span> { |<span class=\"attribute\">b</span>| \n     <span class=\"attribute\">b.name</span>(\"<span class=\"attribute\">Jay</span>\") \n     <span class=\"attribute\">b.phone</span>(\"<span class=\"attribute\">123-123321</span>\") \n} \n#=&gt;</span> <span class=\"tag\">&lt;<span class=\"title\">person</span>&gt;</span><span class=\"tag\">&lt;<span class=\"title\">name</span>&gt;</span>Jay<span class=\"tag\">&lt;/<span class=\"title\">name</span>&gt;</span><span class=\"tag\">&lt;<span class=\"title\">phone</span>&gt;</span>123-123321<span class=\"tag\">&lt;/<span class=\"title\">phone</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"title\">person</span>&gt;</span> </span>\n</code></pre><p>代码中对person, name, phone标签是用方法调用实现的，但这些方法并不是Builder库所定义的。因为XML中的标签是任意定义的，不可能在Builder库中事先全部准备好所有方法，所以这就是元编程的力量。若要增加home标签，无须动Builder库的任何代码，只需直接调用home方法即可。完美生活啊。  </p>\n<p><strong>内存管理</strong>。说到这个，不得不提业务说c/c++是如何难用，很大一部分是由于要开发者进行内存管理。虽然现代c++语言经过一定的封装可以做到不用自己进行内存管理，但是曾经坑害多少无知码农的阴影是不会这么轻易散去。所以，垃圾回收，将内存管理从程序员手上释放出来是巨大的福利。  </p>\n<p><strong>异常处理</strong>。C代码中对各种异常返回值的判断，往往在程序中占有很大的比例，如下：  </p>\n<pre><code><span class=\"keyword\">int</span> main() \n{ \n     <span class=\"keyword\">FILE</span>* f = open(<span class=\"string\">\"/path/to/file\"</span>); \n     <span class=\"keyword\">if</span> (f == <span class=\"keyword\">NULL</span>) { \n        puts(<span class=\"string\">\"file open failed\"</span>); \n     } <span class=\"keyword\">else</span> { \n        puts(<span class=\"string\">\"file open succeeded\"</span>); \n    } \n    f.close(); \n    <span class=\"keyword\">return</span> <span class=\"number\">0</span>; \n} \n</code></pre><p>当然，这里只是举个简单的例子，现实情况比这个糟糕太多。写一个并不复杂的业务，假设只需要10行代码，但是对异常情况的判断并且处理，往往占据了大量的代码量，也许从开始的10行渐渐臃肿到了100行。这不仅对编码人员造成了大量的工作量，而且对维护人员进行代码学习也是一种负担。若采用异常机制，很容量让编码人员只关注重要的逻辑，而不用一头淹没在异常处理代码中。上文的例子，同样实现一个Ruby版本：  </p>\n<pre><code>begin\n    <span class=\"built_in\">open</span>(<span class=\"string\">\"path/to/file\"</span>, <span class=\"string\">\"r\"</span>) <span class=\"built_in\">do</span> |f| \n    puts<span class=\"string\">\"file open succeed\"</span>\n<span class=\"function\"><span class=\"keyword\">end</span></span>\nrescue\n    puts<span class=\"string\">\"file open failed\"</span>\n<span class=\"function\"><span class=\"keyword\">end</span></span>\n</code></pre><p><strong>闭包</strong>，含有“包含”的意思。如其名称，闭包就是将数据包含在函数内，与面向对象正好相反，面向对象是将数据的行为包含在数据内。对于闭包，我目前还没有体会到其带来的好处，当然是巨大的好处，值得做为编程语言未来发展的方法的好处，所以就先搁着，等到感受到其巨大力量再来补上。  </p>\n","source":"_posts/2014-08-09-2.md","raw":"---\r\ndate: 2014-08-09\r\nlayout: post\r\ntitle: 编程语言的发展之路 — 读《代码的未来》\r\npermalink: '/2014/08-09-2.html'\r\ncategories: 编程思维\r\ntags:\r\n- 元编程\r\n- 内存管理\r\n---\r\n\r\n\r\n本书是Matz在《日经Linux》上连载的各期内容的合集，虽然内容有些部分重复，但是内容还是很丰富的，主题也比较鲜明，与国内的某些合集甩开太远。    \r\n\r\n通书下来，个人觉得最精华的还是第2章：编程语言的过去、现在和未来。Matz通过简单回顾编程语言的过去，着重分析现在和未来的发展。主要分为以下几类：**DSL，meta-programming，内存管理，异常处理，闭包**。     \r\n\r\n**DSL**，即特定领域语言，将几乎只有程序员的编程语言进化成符合具体领域业务的特定语言，而且该语言与自然语言类似，方便非编程人员也可用其进行编程，可以解决开发人员对业务透视程度不够，业务人员无能力进行编码的矛盾。回想还在前东家码程序时，由于是游戏工作室，经常出现小工具方便策划实现自己的想法，这几乎是与DSL方向不谋而合。做为攻城师，如何把自己从代码中解放出来，如何让非编程人员方便的进行编程工作也是一种能力啊。  \r\n\r\n**元编程**，即可以自己写程序的程序。身为苦逼码农，还记得需求一日一变的痛若吗？还记得数据库迁移时，代码大动的尴尬吗？请用元编程利器，让你一劳永逸，面对千变万化，不动任何代码就是完善支持。善哉，这才是程序员的理想生活。当然，元编程并不是所有语言都支持，当然上古语言Lisp可以说是其始祖，但是便于理解，还是举个Ruby的例子，如下：\r\n\r\n\trequire 'builder'\r\n\tbuilder = Builder::XmlMarkup.new\r\n\txml = builder.person { |b| \r\n\t     b.name(\"Jay\") \r\n\t     b.phone(\"123-123321\") \r\n\t} \r\n\t#=> <person><name>Jay</name><phone>123-123321</phone></person> \r\n\r\n代码中对person, name, phone标签是用方法调用实现的，但这些方法并不是Builder库所定义的。因为XML中的标签是任意定义的，不可能在Builder库中事先全部准备好所有方法，所以这就是元编程的力量。若要增加home标签，无须动Builder库的任何代码，只需直接调用home方法即可。完美生活啊。  \r\n\r\n**内存管理**。说到这个，不得不提业务说c/c++是如何难用，很大一部分是由于要开发者进行内存管理。虽然现代c++语言经过一定的封装可以做到不用自己进行内存管理，但是曾经坑害多少无知码农的阴影是不会这么轻易散去。所以，垃圾回收，将内存管理从程序员手上释放出来是巨大的福利。  \r\n\r\n**异常处理**。C代码中对各种异常返回值的判断，往往在程序中占有很大的比例，如下：  \r\n\r\n\tint main() \r\n\t{ \r\n\t     FILE* f = open(\"/path/to/file\"); \r\n\t     if (f == NULL) { \r\n\t        puts(\"file open failed\"); \r\n\t     } else { \r\n\t        puts(\"file open succeeded\"); \r\n\t    } \r\n\t    f.close(); \r\n\t    return 0; \r\n\t} \r\n\r\n当然，这里只是举个简单的例子，现实情况比这个糟糕太多。写一个并不复杂的业务，假设只需要10行代码，但是对异常情况的判断并且处理，往往占据了大量的代码量，也许从开始的10行渐渐臃肿到了100行。这不仅对编码人员造成了大量的工作量，而且对维护人员进行代码学习也是一种负担。若采用异常机制，很容量让编码人员只关注重要的逻辑，而不用一头淹没在异常处理代码中。上文的例子，同样实现一个Ruby版本：  \r\n\r\n\tbegin\r\n\t    open(\"path/to/file\", \"r\") do |f| \r\n\t    puts\"file open succeed\"\r\n\tend\r\n\trescue\r\n\t    puts\"file open failed\"\r\n\tend\r\n\t\r\n**闭包**，含有“包含”的意思。如其名称，闭包就是将数据包含在函数内，与面向对象正好相反，面向对象是将数据的行为包含在数据内。对于闭包，我目前还没有体会到其带来的好处，当然是巨大的好处，值得做为编程语言未来发展的方法的好处，所以就先搁着，等到感受到其巨大力量再来补上。  ","slug":"-2014-08-09-2-html","updated":1422085853000,"excerpt":"","_id":"qcy06vx1vsr2dvxr","comments":true,"photos":[],"link":""},{"date":1415894400000,"layout":"post","title":"Go中实现Set类型","categories":["uj90suj8si8uefy9"],"tags":["bb6h8yibk35esu2a"],"content":"<p>这几天用go实现项目原有的xml数据导入服务器新设计的数据库中，以实现数据从客户机向服务器的转移。由于服务器的接口协议为json,所以面临的问题就是从xml解析出相应的struct，并将其转换为json。在这个过程中，go中xml与json库就不得不赞一下了。</p>\n<p>只需简单的定义struct的结构，并用相应的标签表示xml或者json中的字段名称即可，编码方便性不言而喻。具体定义可以参见如下：</p>\n<pre><code><span class=\"typedef\"><span class=\"keyword\">type</span> <span class=\"type\">XmlSample</span> struct <span class=\"container\">{\n    <span class=\"type\">A</span> <span class=\"title\">int</span> `<span class=\"title\">xml</span>:\"<span class=\"type\">AField</span>\"`\n    <span class=\"type\">B</span> <span class=\"title\">string</span> `<span class=\"title\">xml</span>:\"<span class=\"type\">BField</span>\"`\n}</span></span>\n\n<span class=\"typedef\"><span class=\"keyword\">type</span> <span class=\"type\">JsonSample</span> struct <span class=\"container\">{\n    <span class=\"type\">A</span> <span class=\"title\">int</span> `<span class=\"title\">json</span>:\"<span class=\"type\">AField</span>\"`\n    <span class=\"type\">B</span> <span class=\"title\">string</span> `<span class=\"title\">json</span>:\"<span class=\"type\">BField</span>\"`\n}</span></span>\n</code></pre><p>那么这个和“go中如何实现set”有半毛钱关系？是没有关系，鄙人好闲扯。那么，再来看下go中如何实现set。</p>\n<p>起因是这样的：某天，鄙人欲实现一不重复随机数生成器，即将产生的随机数放入set中，如何可保证产生的随机数的唯一性。但是，鄙人发现go中没有set这样的container！这可怎么破？只能自己实现个了。既然go中有map,索性基于map实现个吧。纳尼？map是map,如何将其转成set!哈哈，map中的keys不是需要保证其唯一性么，我们只是利用map中keys而已。</p>\n<p>首先我们定义一个struct，以存放set中元素，定义如下：</p>\n<pre><code>type Set <span class=\"class\"><span class=\"keyword\">struct</span> {</span>\n    set map[<span class=\"class\"><span class=\"keyword\">interface</span>{</span>}]<span class=\"class\"><span class=\"keyword\">struct</span>{</span>}\n}\n</code></pre><p>map[interface{}]struct{}中keys的类型比较容易理解，因为set要适合所有类型元素，所以interface{}类型最为合适。但是values的类型是个什么东东？可以是个简单的bool型么，或者int型也可以嘛。是的，values的具体类型当然可以是bool,int，如果想作孽，可以定义成map[stirng]string也可，但是为什么要选择struct{}呢？嗯，原因么，因为鄙人在google group上看到说,struct{}可以占有较少的空间（其实是不占空间，具体鄙人才疏学浅，未能得证），所以采用以上定义方法。</p>\n<p>如此一定义，便可亮出Set可以接收的方法，无非是InSet(), Insert(), Size(), Clear()这几样，如下：</p>\n<pre><code><span class=\"func\"><span class=\"keyword\">func</span></span> (s *<span class=\"type\">Set</span>) <span class=\"type\">InSet</span>(e interface{}) bool {\n    <span class=\"number\">_</span>, ok := s.<span class=\"keyword\">set</span>[e]\n    <span class=\"keyword\">return</span> ok\n}\n\n<span class=\"func\"><span class=\"keyword\">func</span></span> (s *<span class=\"type\">Set</span>) <span class=\"type\">Insert</span>(e interface{}) bool {\n    <span class=\"keyword\">in</span> := s.<span class=\"type\">InSet</span>(e)\n    s.<span class=\"keyword\">set</span>[e] = <span class=\"class\"><span class=\"keyword\">struct</span></span>{}{}\n    <span class=\"keyword\">return</span> <span class=\"keyword\">in</span>\n}\n\n<span class=\"func\"><span class=\"keyword\">func</span></span> (s *<span class=\"type\">Set</span>) <span class=\"type\">Clear</span>() {\n    s.<span class=\"keyword\">set</span> = make(<span class=\"built_in\">map</span>[interface{}]<span class=\"type\">Struct</span>{})\n}\n\n<span class=\"func\"><span class=\"keyword\">func</span></span> (s *<span class=\"type\">Set</span>) <span class=\"type\">Size</span>() int {\n    <span class=\"keyword\">return</span> len(s.<span class=\"keyword\">set</span>)\n}\n</code></pre><p>额，好像还少了点东西。怎么遍历元素呢？当然，我是指不暴露其内部实现的遍历。go中range又只能支持slice,map,chan。那么，再增加个方法，将内部set返回，如下：</p>\n<pre><code><span class=\"func\"><span class=\"keyword\">func</span></span> (s *<span class=\"type\">Set</span>) <span class=\"type\">Range</span>() <span class=\"built_in\">map</span>[interface{}]<span class=\"class\"><span class=\"keyword\">struct</span></span>{}{\n    <span class=\"keyword\">return</span> s.<span class=\"keyword\">set</span>\n}\n</code></pre><p>Set需要遍历时，只需for i, v := range s.Range()即可。嗯，不是说不暴露其内部实现么，Range方法一出，看返回值大家都知道啦。额，鄙人未曾想到更甚的方法，暂时就这样吧。</p>\n<p>BTW, 这述代码中可以将struct{}先type成自定义None类型，这样代码就更具体美感了。嘿嘿。</p>\n","source":"_posts/2014-11-14-0.md","raw":"---\r\ndate: 2014-11-14\r\nlayout: post\r\ntitle: Go中实现Set类型\r\npermalink: '/2014/11-14-0.html'\r\ncategories:\r\n- golang\r\ntags:\r\n- 小技巧\r\n---\r\n\r\n\r\n这几天用go实现项目原有的xml数据导入服务器新设计的数据库中，以实现数据从客户机向服务器的转移。由于服务器的接口协议为json,所以面临的问题就是从xml解析出相应的struct，并将其转换为json。在这个过程中，go中xml与json库就不得不赞一下了。\r\n\r\n只需简单的定义struct的结构，并用相应的标签表示xml或者json中的字段名称即可，编码方便性不言而喻。具体定义可以参见如下：\r\n\r\n\ttype XmlSample struct {\r\n\t    A int `xml:\"AField\"`\r\n\t    B string `xml:\"BField\"`\r\n\t}\r\n\r\n\ttype JsonSample struct {\r\n\t    A int `json:\"AField\"`\r\n\t    B string `json:\"BField\"`\r\n\t}\r\n\r\n那么这个和“go中如何实现set”有半毛钱关系？是没有关系，鄙人好闲扯。那么，再来看下go中如何实现set。\r\n\r\n起因是这样的：某天，鄙人欲实现一不重复随机数生成器，即将产生的随机数放入set中，如何可保证产生的随机数的唯一性。但是，鄙人发现go中没有set这样的container！这可怎么破？只能自己实现个了。既然go中有map,索性基于map实现个吧。纳尼？map是map,如何将其转成set!哈哈，map中的keys不是需要保证其唯一性么，我们只是利用map中keys而已。\r\n\r\n首先我们定义一个struct，以存放set中元素，定义如下：\r\n\r\n\ttype Set struct {\r\n\t    set map[interface{}]struct{}\r\n\t}\r\n\r\nmap[interface{}]struct{}中keys的类型比较容易理解，因为set要适合所有类型元素，所以interface{}类型最为合适。但是values的类型是个什么东东？可以是个简单的bool型么，或者int型也可以嘛。是的，values的具体类型当然可以是bool,int，如果想作孽，可以定义成map[stirng]string也可，但是为什么要选择struct{}呢？嗯，原因么，因为鄙人在google group上看到说,struct{}可以占有较少的空间（其实是不占空间，具体鄙人才疏学浅，未能得证），所以采用以上定义方法。\r\n\r\n如此一定义，便可亮出Set可以接收的方法，无非是InSet(), Insert(), Size(), Clear()这几样，如下：\r\n\r\n\tfunc (s *Set) InSet(e interface{}) bool {\r\n\t    _, ok := s.set[e]\r\n\t    return ok\r\n\t}\r\n\r\n\tfunc (s *Set) Insert(e interface{}) bool {\r\n\t    in := s.InSet(e)\r\n\t    s.set[e] = struct{}{}\r\n\t    return in\r\n\t}\r\n\r\n\tfunc (s *Set) Clear() {\r\n\t    s.set = make(map[interface{}]Struct{})\r\n\t}\r\n\r\n\tfunc (s *Set) Size() int {\r\n\t    return len(s.set)\r\n\t}\r\n\r\n额，好像还少了点东西。怎么遍历元素呢？当然，我是指不暴露其内部实现的遍历。go中range又只能支持slice,map,chan。那么，再增加个方法，将内部set返回，如下：\r\n\r\n\tfunc (s *Set) Range() map[interface{}]struct{}{\r\n\t    return s.set\r\n\t}\r\n\r\nSet需要遍历时，只需for i, v := range s.Range()即可。嗯，不是说不暴露其内部实现么，Range方法一出，看返回值大家都知道啦。额，鄙人未曾想到更甚的方法，暂时就这样吧。\r\n\r\nBTW, 这述代码中可以将struct{}先type成自定义None类型，这样代码就更具体美感了。嘿嘿。","slug":"-2014-11-14-0-html","updated":1419076647000,"excerpt":"","_id":"zy1lplodx9wtciw4","comments":true,"photos":[],"link":""},{"date":1416067200000,"layout":"post","title":"如何生成不重复随机数","categories":["8jwkgptl4juxqcvd"],"tags":["t5iizbepdikhme90"],"content":"<p>如何生成不重复随机数？</p>\n<p>当然，简单粗暴的方法永远是可行的。生成一个随机数，在已生成的随机数中遍历，若未在其中，则归入随机数数组中，否则重新生成一随机数再重复此过程。</p>\n<p>具体代码可参照如下：</p>\n<pre><code>N =<span class=\"number\"> 10</span>\nna := <span class=\"built_in\">make</span>([]<span class=\"typename\">int32</span>,<span class=\"number\"> 0</span>, N)\n<span class=\"keyword\">for</span> {\n    n := rand.Int31()\n    <span class=\"keyword\">for</span> _, v := <span class=\"keyword\">range</span> na {\n        <span class=\"keyword\">if</span> n == v {\n            <span class=\"keyword\">continue</span>\n        }\n    }\n    na = <span class=\"built_in\">append</span>(na, n)\n    <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(na) == N {\n        <span class=\"keyword\">break</span>\n    }\n}\nlog.Println(na)\n</code></pre><p>当然，这个方法很很黄很暴力。首先，此方法复杂度为N^2,在生成随机数量较小的情况下还可以接受，但随着问题规模的增大，此法顿时露出其狰狞的面孔，指数复杂度可不是盖的。其次，此法有个极端情况，那就是若每次生成的随机数都在之前的生成数组中，那不是个死循环。oh,no.</p>\n<p>那么没有其他方法了吗？额，可以牺牲空间来实现这个功能。首先，预先生成好所有随机数的可能范围，然后再每次随机一个数，取该数所指的位置的数将其做为新生成的数, 最后将该位置的数删除以确保取到不重复的随机数。代码如下：</p>\n<pre><code>N = <span class=\"number\">10</span>\nna := make([]int, <span class=\"number\">0</span>, N)\npna := make([]int, <span class=\"number\">0</span>, <span class=\"number\">2</span>*N)\n<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">2</span>*N; i++ {\n    pna = append(pna, i)\n}\n<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; N; i++ {\n    p := rand.Intn(<span class=\"number\">2</span>*N - i)\n    na = append(na, pna[p])\n    pna = append(pna[:p], pna[p+<span class=\"number\">1</span>:]<span class=\"keyword\">...</span>)\n}\nlog.Println(na)\n</code></pre><p>这里，我们用slice存放预先生成的数，事实上存在一定的性能问题。slice的随机读虽然性能比较高，但是从slice中删除元素性能就不太理想了。如果想解决删除元素的性能问题，我们可以采用list代替slice,上述代码转换成如下：</p>\n<pre><code>N = <span class=\"number\">10</span>\nna := make([]<span class=\"keyword\">int</span>, <span class=\"number\">0</span>, N)\npna := list.<span class=\"keyword\">New</span>()\n<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">2</span>*N; i++ {\n    pna.PushBack(i)\n}\n<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; N; i++ {\n    p := rand.Intn(<span class=\"number\">2</span>*N - i)\n    na = <span class=\"keyword\">append</span>(na, func(l *list.List, pos <span class=\"keyword\">int</span>) <span class=\"keyword\">int</span> {\n        e := l.Front()\n        <span class=\"keyword\">for</span> j := <span class=\"number\">0</span>; j &lt; pos; j++ {\n            e = e.<span class=\"keyword\">Next</span>()\n        }\n        l.Remove(e)\n        <span class=\"keyword\">return</span> e.Value.(<span class=\"keyword\">int</span>)\n    }(pna, p))\n}\nlog.<span class=\"keyword\">Println</span>(na)\n</code></pre><p>但是，删除元素的性能问题虽然已经解决，但是list的随机读性能便成大问题了。所以上述方法并没有解决根本问题。</p>\n<p>让我们想想，既然slice的随机读性能高，但是删除元素性能不理想，索性我们就不删除元素，只是将其移动至最后，将其排除在下一轮随机选择之外，代码如下：</p>\n<pre><code>N =<span class=\"number\"> 10</span>\nna := <span class=\"built_in\">make</span>([]<span class=\"typename\">int</span>,<span class=\"number\"> 0</span>, N)\npna := <span class=\"built_in\">make</span>([]<span class=\"typename\">int</span>,<span class=\"number\"> 0</span>,<span class=\"number\"> 2</span>*N)\n<span class=\"keyword\">for</span> i :=<span class=\"number\"> 0</span>; i &lt;<span class=\"number\"> 2</span>*N; i++ {\n    pna = <span class=\"built_in\">append</span>(pna, i)\n}\n<span class=\"keyword\">for</span> i :=<span class=\"number\"> 0</span>; i &lt; N; i++ {\n    p := rand.Intn<span class=\"number\">(2</span>*N - i)\n    na = <span class=\"built_in\">append</span>(na, pna[p])\n    pna[p], pna<span class=\"number\">[2</span>*N-i<span class=\"number\">-1</span>] = pna<span class=\"number\">[2</span>*N-i<span class=\"number\">-1</span>], pna[p]\n}\nlog.Println(na)\n</code></pre><p>至此，我们得到了一个牺牲空间，但是性能上可接受，在最坏情况下又不会进入死循环的无重复随机数生成方法。以上4种方法具体性能如下（仅供参考）:</p>\n<pre><code><span class=\"tag\">forceMethod</span><span class=\"pseudo\">:94</span><span class=\"class\">.0661ms</span>\n<span class=\"tag\">arrayMethod</span><span class=\"pseudo\">:42</span><span class=\"class\">.0317ms</span>\n<span class=\"tag\">listMethod</span><span class=\"pseudo\">:302</span><span class=\"class\">.211ms</span>\n<span class=\"tag\">betterMethod</span><span class=\"pseudo\">:1</span><span class=\"class\">.0043ms</span>\n</code></pre>","source":"_posts/2014-11-16-0.md","raw":"---\r\ndate: 2014-11-16\r\nlayout: post\r\ntitle: 如何生成不重复随机数\r\npermalink: '/2014/11-16-0.html'\r\ncategories:\r\n- 算法\r\ntags:\r\n- 面试题\r\n---\r\n\r\n\r\n如何生成不重复随机数？\r\n\r\n当然，简单粗暴的方法永远是可行的。生成一个随机数，在已生成的随机数中遍历，若未在其中，则归入随机数数组中，否则重新生成一随机数再重复此过程。\r\n\r\n具体代码可参照如下：\r\n\r\n\tN = 10\r\n\tna := make([]int32, 0, N)\r\n\tfor {\r\n\t    n := rand.Int31()\r\n\t    for _, v := range na {\r\n\t        if n == v {\r\n\t            continue\r\n\t        }\r\n\t    }\r\n\t    na = append(na, n)\r\n\t    if len(na) == N {\r\n\t        break\r\n\t    }\r\n\t}\r\n\tlog.Println(na)\r\n\r\n当然，这个方法很很黄很暴力。首先，此方法复杂度为N^2,在生成随机数量较小的情况下还可以接受，但随着问题规模的增大，此法顿时露出其狰狞的面孔，指数复杂度可不是盖的。其次，此法有个极端情况，那就是若每次生成的随机数都在之前的生成数组中，那不是个死循环。oh,no.\r\n\r\n那么没有其他方法了吗？额，可以牺牲空间来实现这个功能。首先，预先生成好所有随机数的可能范围，然后再每次随机一个数，取该数所指的位置的数将其做为新生成的数, 最后将该位置的数删除以确保取到不重复的随机数。代码如下：\r\n\r\n\tN = 10\r\n\tna := make([]int, 0, N)\r\n\tpna := make([]int, 0, 2*N)\r\n\tfor i := 0; i < 2*N; i++ {\r\n\t    pna = append(pna, i)\r\n\t}\r\n\tfor i := 0; i < N; i++ {\r\n\t    p := rand.Intn(2*N - i)\r\n\t    na = append(na, pna[p])\r\n\t    pna = append(pna[:p], pna[p+1:]...)\r\n\t}\r\n\tlog.Println(na)\r\n\r\n这里，我们用slice存放预先生成的数，事实上存在一定的性能问题。slice的随机读虽然性能比较高，但是从slice中删除元素性能就不太理想了。如果想解决删除元素的性能问题，我们可以采用list代替slice,上述代码转换成如下：\r\n\r\n\tN = 10\r\n\tna := make([]int, 0, N)\r\n\tpna := list.New()\r\n\tfor i := 0; i < 2*N; i++ {\r\n\t    pna.PushBack(i)\r\n\t}\r\n\tfor i := 0; i < N; i++ {\r\n\t    p := rand.Intn(2*N - i)\r\n\t    na = append(na, func(l *list.List, pos int) int {\r\n\t        e := l.Front()\r\n\t        for j := 0; j < pos; j++ {\r\n\t            e = e.Next()\r\n\t        }\r\n\t        l.Remove(e)\r\n\t        return e.Value.(int)\r\n\t    }(pna, p))\r\n\t}\r\n\tlog.Println(na)\r\n\r\n但是，删除元素的性能问题虽然已经解决，但是list的随机读性能便成大问题了。所以上述方法并没有解决根本问题。\r\n\r\n让我们想想，既然slice的随机读性能高，但是删除元素性能不理想，索性我们就不删除元素，只是将其移动至最后，将其排除在下一轮随机选择之外，代码如下：\r\n\r\n\tN = 10\r\n\tna := make([]int, 0, N)\r\n\tpna := make([]int, 0, 2*N)\r\n\tfor i := 0; i < 2*N; i++ {\r\n\t    pna = append(pna, i)\r\n\t}\r\n\tfor i := 0; i < N; i++ {\r\n\t    p := rand.Intn(2*N - i)\r\n\t    na = append(na, pna[p])\r\n\t    pna[p], pna[2*N-i-1] = pna[2*N-i-1], pna[p]\r\n\t}\r\n\tlog.Println(na)\r\n\r\n至此，我们得到了一个牺牲空间，但是性能上可接受，在最坏情况下又不会进入死循环的无重复随机数生成方法。以上4种方法具体性能如下（仅供参考）:\r\n\r\n\tforceMethod:94.0661ms\r\n\tarrayMethod:42.0317ms\r\n\tlistMethod:302.211ms\r\n\tbetterMethod:1.0043ms\r\n","slug":"-2014-11-16-0-html","updated":1419076319000,"excerpt":"","_id":"ocfi8fe0ex3sqqgz","comments":true,"photos":[],"link":""},{"date":1416240000000,"layout":"post","title":"投掷色子10次，所投点数总数为50点的可能性是多少种","categories":["8jwkgptl4juxqcvd"],"tags":["t5iizbepdikhme90"],"content":"<p><strong>问</strong>：投掷色子10次，所投点数总数为50点的可能性是多少种？</p>\n<p>这是道经典的面试问题，当然，面试时可能让你编程实现，也可能用数学知识做答。这里我们就从这两方面分别解析下如何破题。</p>\n<p><strong>一、编程实现</strong><br>事实上，编程解决这题目着实不麻烦。首先我们定义一个过程f(x,y)表示投掷色子x次，所投点数为y点的可能性种数。分析投色子的过程，由于投掷一次色子可能的点数为1~6点,不难发现如下公式：</p>\n<pre><code><span class=\"function\"><span class=\"title\">f</span><span class=\"params\">(x,y)</span>=<span class=\"title\">f</span><span class=\"params\">(x-<span class=\"number\">1</span>,y-<span class=\"number\">1</span>)</span>+<span class=\"title\">f</span><span class=\"params\">(x-<span class=\"number\">1</span>,y-<span class=\"number\">2</span>)</span>+<span class=\"title\">f</span><span class=\"params\">(x-<span class=\"number\">1</span>,y-<span class=\"number\">3</span>)</span>+<span class=\"title\">f</span><span class=\"params\">(x-<span class=\"number\">1</span>,y-<span class=\"number\">4</span>)</span>+<span class=\"title\">f</span><span class=\"params\">(x-<span class=\"number\">1</span>,y-<span class=\"number\">5</span>)</span>+<span class=\"title\">f</span><span class=\"params\">(x-<span class=\"number\">1</span>,y-<span class=\"number\">6</span>)</span></span>\n</code></pre><p>而f(x,y)在当6<em>xy时，值为0，当6</em>x=y时，值为1，当x=y时，值为1。<br>到这里，其实已经可以用递归解决这个问题了，代码如下：</p>\n<pre><code><span class=\"comment\">// 投times次数色子，得到points点数，有多少种可能投法</span>\nfunc ThrowDice(<span class=\"keyword\">times</span> <span class=\"keyword\">int</span>, points <span class=\"keyword\">int</span>) <span class=\"keyword\">int</span> {\n    <span class=\"keyword\">if</span> <span class=\"keyword\">times</span>*MaxPoint &lt; points {\n        <span class=\"keyword\">return</span> <span class=\"number\">0</span>\n    }\n    <span class=\"keyword\">if</span> <span class=\"keyword\">times</span>*MaxPoint == points {\n        <span class=\"keyword\">return</span> <span class=\"number\">1</span>\n    }\n    <span class=\"keyword\">if</span> <span class=\"keyword\">times</span>*MinPoint &gt; points {\n        <span class=\"keyword\">return</span> <span class=\"number\">0</span>\n    }\n    <span class=\"keyword\">if</span> <span class=\"keyword\">times</span>*MinPoint == points {\n        <span class=\"keyword\">return</span> <span class=\"number\">1</span>\n    }\n    <span class=\"keyword\">if</span> <span class=\"keyword\">times</span> == <span class=\"number\">1</span> {\n        <span class=\"keyword\">return</span> <span class=\"number\">1</span>\n    }\n    nextTimes := <span class=\"keyword\">times</span> - <span class=\"number\">1</span>\n    <span class=\"keyword\">return</span> ThrowDice(nextTimes, points-OnePoint) + ThrowDice(nextTimes, points-TwoPoint) + ThrowDice(nextTimes, points-ThreePoint) + ThrowDice(nextTimes, points-FourPoint) + ThrowDice(nextTimes, points-FivePoint) + ThrowDice(nextTimes, points-SixPoint)\n}\n</code></pre><p><strong>二、数学实现</strong><br>这个问题的数学解法事实上用组合数学的知识很容易解决。</p>\n<p>首先，投一次色子的过程我们可以用一多项式表示：<strong>x+x^2+x^3+x^4+x^5+x^6</strong>,具体各项的系数为投掷的可能种类数，如上述多项式中x^5表示投掷一次色子，得到点数为5的可能种类数为1。</p>\n<p>既然有这种表示方法，原来投掷10次色子的问题用多项式表示如下：<strong>(x+x^2+x^3+x^4+x^5+x^6)^10</strong>。 原来问题的解即为多项式中x^50的系数。当然，这个多项式可以用数学公式解出来，我们就直接用python的sympy库计算，得出解为85225次。  </p>\n","source":"_posts/2014-11-18-0.md","raw":"---\r\ndate: 2014-11-18\r\nlayout: post\r\ntitle: 投掷色子10次，所投点数总数为50点的可能性是多少种\r\npermalink: '/2014/11-18-0.html'\r\ncategories:\r\n- 算法\r\ntags:\r\n- 面试题\r\n---\r\n\r\n\r\n\r\n**问**：投掷色子10次，所投点数总数为50点的可能性是多少种？\r\n\r\n这是道经典的面试问题，当然，面试时可能让你编程实现，也可能用数学知识做答。这里我们就从这两方面分别解析下如何破题。\r\n\r\n**一、编程实现**  \r\n事实上，编程解决这题目着实不麻烦。首先我们定义一个过程f(x,y)表示投掷色子x次，所投点数为y点的可能性种数。分析投色子的过程，由于投掷一次色子可能的点数为1~6点,不难发现如下公式：\r\n\r\n\tf(x,y)=f(x-1,y-1)+f(x-1,y-2)+f(x-1,y-3)+f(x-1,y-4)+f(x-1,y-5)+f(x-1,y-6)\r\n\r\n而f(x,y)在当6*xy时，值为0，当6*x=y时，值为1，当x=y时，值为1。\r\n到这里，其实已经可以用递归解决这个问题了，代码如下：\r\n\r\n\t// 投times次数色子，得到points点数，有多少种可能投法\r\n\tfunc ThrowDice(times int, points int) int {\r\n\t    if times*MaxPoint < points {\r\n\t        return 0\r\n\t    }\r\n\t    if times*MaxPoint == points {\r\n\t        return 1\r\n\t    }\r\n\t    if times*MinPoint > points {\r\n\t        return 0\r\n\t    }\r\n\t    if times*MinPoint == points {\r\n\t        return 1\r\n\t    }\r\n\t    if times == 1 {\r\n\t        return 1\r\n\t    }\r\n\t    nextTimes := times - 1\r\n\t    return ThrowDice(nextTimes, points-OnePoint) + ThrowDice(nextTimes, points-TwoPoint) + ThrowDice(nextTimes, points-ThreePoint) + ThrowDice(nextTimes, points-FourPoint) + ThrowDice(nextTimes, points-FivePoint) + ThrowDice(nextTimes, points-SixPoint)\r\n\t}\r\n\r\n**二、数学实现**  \r\n这个问题的数学解法事实上用组合数学的知识很容易解决。\r\n\r\n首先，投一次色子的过程我们可以用一多项式表示：**x+x^2+x^3+x^4+x^5+x^6**,具体各项的系数为投掷的可能种类数，如上述多项式中x^5表示投掷一次色子，得到点数为5的可能种类数为1。\r\n\r\n既然有这种表示方法，原来投掷10次色子的问题用多项式表示如下：**(x+x^2+x^3+x^4+x^5+x^6)^10**。 原来问题的解即为多项式中x^50的系数。当然，这个多项式可以用数学公式解出来，我们就直接用python的sympy库计算，得出解为85225次。  ","slug":"-2014-11-18-0-html","updated":1419076163000,"excerpt":"","_id":"ihpxsh4esyt3fc11","comments":true,"photos":[],"link":""},{"date":1416412800000,"layout":"post","title":"Golang性能分析工具","categories":["uj90suj8si8uefy9"],"tags":["896a48ftk42dc3bz","i6bn89xm1x5dsn4q"],"content":"<p>作为一名合格的开发人员，对自己开发程序的性能分析是必不可少的技能。c++可以采用gperftools进行性能分析，那么go呢？是否也有同样逼格的工具？当当当当~当然有，她就是pprof!</p>\n<p>pprof是go自带的性能分析工具，当然她优雅，美丽，易操作。see~</p>\n<pre><code><span class=\"keyword\">package</span> main\n\n<span class=\"keyword\">import</span> (\n    <span class=\"string\">\"os\"</span>\n    <span class=\"string\">\"runtime/pprof\"</span>\n)\n\n<span class=\"keyword\">func</span> main() {\n    f, _ := os.Create(<span class=\"string\">\"profile_file\"</span>)\n    pprof.StartCPUProfile(f)     <span class=\"comment\">// 开始cpu profile，结果写到文件f中</span>\n    <span class=\"keyword\">defer</span> pprof.StopCPUProfile() <span class=\"comment\">// 结束profile</span>\n\n    doSomething();\n}\n</code></pre><p>上述程序具体鄙人就不解释了。运行app，生成profile_file文件，直接采用go tool pprof进行分析。</p>\n<p>更多信息，可以参见<a href=\"http://golang.org/pkg/net/http/pprof/\" target=\"_blank\" rel=\"external\">go官方文档</a>。</p>\n","source":"_posts/2014-11-20-0.md","raw":"---\r\ndate: 2014-11-20\r\nlayout: post\r\ntitle: Golang性能分析工具\r\npermalink: '/2014/11-20-0.html'\r\ncategories:\r\n- golang\r\ntags:\r\n- 性能\r\n- pprof\r\n---\r\n\r\n\r\n作为一名合格的开发人员，对自己开发程序的性能分析是必不可少的技能。c++可以采用gperftools进行性能分析，那么go呢？是否也有同样逼格的工具？当当当当~当然有，她就是pprof!\r\n\r\npprof是go自带的性能分析工具，当然她优雅，美丽，易操作。see~\r\n\r\n\tpackage main\r\n\t \r\n\timport (\r\n\t    \"os\"\r\n\t    \"runtime/pprof\"\r\n\t)\r\n\t \r\n\tfunc main() {\r\n\t    f, _ := os.Create(\"profile_file\")\r\n\t    pprof.StartCPUProfile(f)     // 开始cpu profile，结果写到文件f中\r\n\t    defer pprof.StopCPUProfile() // 结束profile\r\n\t \r\n\t    doSomething();\r\n\t}\r\n\r\n上述程序具体鄙人就不解释了。运行app，生成profile_file文件，直接采用go tool pprof进行分析。\r\n\r\n更多信息，可以参见[go官方文档](http://golang.org/pkg/net/http/pprof/)。","slug":"-2014-11-20-0-html","updated":1419075206000,"excerpt":"","_id":"64o7getbynp33mvl","comments":true,"photos":[],"link":""},{"date":1417363200000,"layout":"post","title":"案例研究：union-find算法(一) -- 问题","categories":["8jwkgptl4juxqcvd"],"tags":["acpvv0jmps70bh8p"],"content":"<p><strong>问题描述</strong>:<br>问题的输入是一列整数对，其中每个整数都表示一个某种类型的对象，一对整数p, q可以被理解为”p和q是相连的”。假设”相连”是一种等价关系，这就意味着相连满足以下3个性质： </p>\n<ul>\n<li><strong>自反性</strong>: p和p是相连的。 </li>\n<li><strong>对称性</strong>: 如果p和q是相连的，则q和p也是相连的。 </li>\n<li><strong>传递性</strong>: 如果p和q是相连的，而且q和r也是相连的，则p和r也是相连的。 </li>\n</ul>\n<p>等价关系能够将对象分为多个等价类。在这里，当且仅当两个对象相连时它们才属于同一个等价类。现在寻找这样一种解决方法，过滤序列中所有无意义的整数对，即输入整数对为p,q时，如果已知的所有整数对都不能说明p和q是相连的话，则认为p，q是不相连的，并将p，q写入到输入中，否则认为p，q已经是相连的，应该抛弃这个整数对。 </p>\n<p><strong>问题解法</strong>:<br>当然，这个问题如果用在问题规则增大的情况下，想要快速实现这个功能将会愈发困难，所以需要某种算法，将问题简单化，即使在问题规则增大的时候，在可接受的时间范围内等到结果。 </p>\n<p>就目前对问题的描述，由于没有具体业务的渗入，所以我们将以网络方面的术语对问题相关变量进行命名。这里，我们将对象称之为<strong>触点</strong>，将整数对称为<strong>连接</strong>，而将等价类称为连通分量，简称<strong>分量</strong>。 </p>\n<p><strong>众所周知，数据结构的性质将直接影响到算法的效率</strong>。所以我们用int类型的数组id[ ]直接表示所有对象它所在的分量值，如id[i](假设其值为I)表示对象i所在的分量值为I。因此，我们可以这样定义保存必要信息的struct: </p>\n<pre><code>type UF <span class=\"keyword\">struct</span> {\n    <span class=\"keyword\">id</span>    []<span class=\"keyword\">int</span>     <span class=\"comment\">//  各触点包含分量信息 </span>\n    count <span class=\"keyword\">int</span>       <span class=\"comment\">//  包含分量总数</span>\n}\n</code></pre><p>当然，接口也可以事先定义： </p>\n<pre><code>type UFI <span class=\"keyword\">interface</span> {\n    Init(n <span class=\"keyword\">int</span>)                         <span class=\"comment\">// 初始化</span>\n    Union(p <span class=\"keyword\">int</span>, q <span class=\"keyword\">int</span>)                 <span class=\"comment\">// 连通触点p和q</span>\n    <span class=\"keyword\">Find</span>(p <span class=\"keyword\">int</span>) <span class=\"keyword\">int</span>                     <span class=\"comment\">// 寻找触点p对应的分量</span>\n    Connected(<span class=\"keyword\">find</span> func(<span class=\"keyword\">int</span>)<span class=\"keyword\">int</span>, p <span class=\"keyword\">int</span>, q <span class=\"keyword\">int</span>) bool         \n                                        <span class=\"comment\">// 检查触点p和q是否连通</span>\n    <span class=\"keyword\">Count</span>() <span class=\"keyword\">int</span>                         <span class=\"comment\">// 分量总数</span>\n}\n</code></pre><p>首先，我们假设一开始有N个触点，每个触点都构成了一个只包含有它自己的分量，因此可以将id[i]的值初始化为i，具体Init方法如下： </p>\n<pre><code><span class=\"keyword\">func</span> (u *UF) Init(n <span class=\"typename\">int</span>) {\n    u.count = n\n    u.id = <span class=\"built_in\">make</span>([]<span class=\"typename\">int</span>,<span class=\"number\"> 0</span>, n)\n    <span class=\"keyword\">for</span> i :=<span class=\"number\"> 0</span>; i &lt; n; i++ {\n        u.id = <span class=\"built_in\">append</span>(u.id, i)\n    }\n}\n</code></pre><p>当然，返回当前分量总数和检查触点是否连通都比较直接，如下： </p>\n<pre><code><span class=\"func\"><span class=\"keyword\">func</span></span> (u *<span class=\"type\">UF</span>) <span class=\"type\">Count</span>() int {\n    <span class=\"keyword\">return</span> u.<span class=\"built_in\">count</span>\n}\n\n<span class=\"func\"><span class=\"keyword\">func</span></span> (u *<span class=\"type\">UF</span>) <span class=\"type\">Connected</span>(<span class=\"built_in\">find</span> <span class=\"func\"><span class=\"keyword\">func</span><span class=\"params\">(int)</span><span class=\"title\">int</span></span>, p int, q int) bool {\n    <span class=\"keyword\">return</span> <span class=\"built_in\">find</span>(p) == <span class=\"built_in\">find</span>(q)\n}\n</code></pre><p>那么, 具体算法事实上就是剩下两个接口，即Union和Find的不同实现了。 </p>\n<p>下面就是Union和Find不同实现产生的几种不同算法：  </p>\n<ol>\n<li><a href=\"https://zhujiefirst.github.io/2014/12-07-0.html\" target=\"_blank\" rel=\"external\">Quick-Find算法</a>  </li>\n<li><a href=\"https://zhujiefirst.github.io/2014/12-08-0.html\" target=\"_blank\" rel=\"external\">Quick-Union算法</a>    </li>\n<li><a href=\"https://zhujiefirst.github.io/2014/12-12-0.html\" target=\"_blank\" rel=\"external\">加权Quick-Union算法</a>  </li>\n</ol>\n","source":"_posts/2014-12-01-0.md","raw":"---\ndate: 2014-12-01\nlayout: post\ntitle: 案例研究：union-find算法(一) -- 问题\npermalink: '/2014/12-01-0.html'\ncategories:\n- 算法\ntags:\n- union-find\n---\n\n**问题描述**:  \n问题的输入是一列整数对，其中每个整数都表示一个某种类型的对象，一对整数p, q可以被理解为”p和q是相连的”。假设”相连”是一种等价关系，这就意味着相连满足以下3个性质： \n\n* __自反性__: p和p是相连的。 \n* __对称性__: 如果p和q是相连的，则q和p也是相连的。 \n* __传递性__: 如果p和q是相连的，而且q和r也是相连的，则p和r也是相连的。 \n\n等价关系能够将对象分为多个等价类。在这里，当且仅当两个对象相连时它们才属于同一个等价类。现在寻找这样一种解决方法，过滤序列中所有无意义的整数对，即输入整数对为p,q时，如果已知的所有整数对都不能说明p和q是相连的话，则认为p，q是不相连的，并将p，q写入到输入中，否则认为p，q已经是相连的，应该抛弃这个整数对。 \n\n**问题解法**:  \n当然，这个问题如果用在问题规则增大的情况下，想要快速实现这个功能将会愈发困难，所以需要某种算法，将问题简单化，即使在问题规则增大的时候，在可接受的时间范围内等到结果。 \n\n就目前对问题的描述，由于没有具体业务的渗入，所以我们将以网络方面的术语对问题相关变量进行命名。这里，我们将对象称之为**触点**，将整数对称为**连接**，而将等价类称为连通分量，简称**分量**。 \n\n**众所周知，数据结构的性质将直接影响到算法的效率**。所以我们用int类型的数组id[ ]直接表示所有对象它所在的分量值，如id\\[i\\](假设其值为I)表示对象i所在的分量值为I。因此，我们可以这样定义保存必要信息的struct: \n\n    type UF struct {\n        id    []int     //  各触点包含分量信息 \n        count int       //  包含分量总数\n    }\n\n当然，接口也可以事先定义： \n\n    type UFI interface {\n        Init(n int)                         // 初始化\n        Union(p int, q int)                 // 连通触点p和q\n        Find(p int) int                     // 寻找触点p对应的分量\n        Connected(find func(int)int, p int, q int) bool         \n                                            // 检查触点p和q是否连通\n        Count() int                         // 分量总数\n    }\n\n首先，我们假设一开始有N个触点，每个触点都构成了一个只包含有它自己的分量，因此可以将id[i]的值初始化为i，具体Init方法如下： \n\n    func (u *UF) Init(n int) {\n        u.count = n\n        u.id = make([]int, 0, n)\n        for i := 0; i < n; i++ {\n            u.id = append(u.id, i)\n        }\n    }\n\n当然，返回当前分量总数和检查触点是否连通都比较直接，如下： \n\n    func (u *UF) Count() int {\n        return u.count\n    }\n     \n    func (u *UF) Connected(find func(int)int, p int, q int) bool {\n        return find(p) == find(q)\n    }\n\n那么, 具体算法事实上就是剩下两个接口，即Union和Find的不同实现了。 \n\n下面就是Union和Find不同实现产生的几种不同算法：  \n1. [Quick-Find算法](https://zhujiefirst.github.io/2014/12-07-0.html)  \n2. [Quick-Union算法](https://zhujiefirst.github.io/2014/12-08-0.html)    \n3. [加权Quick-Union算法](https://zhujiefirst.github.io/2014/12-12-0.html)  ","slug":"-2014-12-01-0-html","updated":1422079574000,"excerpt":"","_id":"tqu8qrc2igkrkc7u","comments":true,"photos":[],"link":""},{"date":1417881600000,"layout":"post","title":"案例研究：union-find算法(二) -- quick-find算法","categories":["8jwkgptl4juxqcvd"],"tags":["acpvv0jmps70bh8p"],"content":"<p>所谓<strong>Quick-Find算法</strong>，顾名思义就是Find实现是Quick版本，而相对于Union，则显得不那么Quick了。当然，这是通过结论推导原因，放在这里是十分牵强的。所以，还是正常思维，如果要实现这个功能，当然，暴力算法是不可少的。而恰巧，这个暴力算法正好就是<strong>Quick-Find算法</strong>。</p>\n<p>首先，我们考虑Find的实现。寻找触点p对应的分量，由于id[ ]存放着各触点对应的分量，所以简单粗暴的id[p]就是触点p对应的分量。所以，Find的实现如下：</p>\n<pre><code>func (u *UFQuickFind) <span class=\"keyword\">Find</span>(p <span class=\"keyword\">int</span>) <span class=\"keyword\">int</span> {\n    <span class=\"keyword\">return</span> u.id[p]\n}\n</code></pre><p>其次，再来考虑Union的实现。由于id[ ]存放着各触点对应的分量，而Union的功能就是把触点p和触点q的分量统一，即id[p]==id[q]即可，当然，原来与p(q)处于同一分量的触点也满足上式即可。所以，具体实现可参考如下：</p>\n<pre><code>func (u *UFQuickFind) Union(p <span class=\"keyword\">int</span>, q <span class=\"keyword\">int</span>) {\n    pID := u.<span class=\"keyword\">Find</span>(p)\n    qID := u.<span class=\"keyword\">Find</span>(q)\n\n    <span class=\"keyword\">if</span> pID == qID {\n        <span class=\"keyword\">return</span>\n    }\n\n    <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; len(u.id); i++ {\n        <span class=\"keyword\">if</span> u.id[i] == pID {\n            u.id[i] = qID\n        }\n    }\n\n    u.<span class=\"keyword\">count</span>--\n}\n</code></pre><p>分析上述Union方法的实现，简单来说就是触点p和触点q的分量如果不统一，则遍历所有触点，将原来属于触点p的分量的所有触点，全部统一成触点q的分量，如此做法即可达到触点p和触点q的分量统一，同时原先与触点p属于相同分量的其他触点依然保持处于相同分量的条件。</p>\n<p>那么，我们来分析下Quick-Find算法是否符合我们所说的，当问题规模增大时，解决问题所花的时间是否我们依然可以接受。</p>\n<p>首先，我们来看下Find方法。Find方法的速度显然是很快的，因为它只需要访问id[ ]数组一次。<br>那么，Union方法呢。很明显，Union方法的实现并不是很理想，因为每一次调用Union方法均要遍历一次id[ ]数组。我们可以具体算一下Union方法到底访问id[ ]数组多少次。归并两个分量操作首先会调用两次Find方法，而每个Find方法都会访问id[ ]数组一次，所以Union方法最起码要访问id[ ]数组2次。然后，Union方法在需要归并的时候，必须遍历id[ ]数组一次，所以Union方法最起码要访问id[ ]数组2+N次，其中N为id[ ]数组的大小。最后，检查id[ ]数组时，如果触点的分量需要改变时，则又需要访问id[ ]数组一次，所以还要加上1 ~ N-1次数组访问（至少有一个触点是q,一个触点是p)。综上所述，归并两个分量的Union方法访问数组的次数在N+3与2N+1之间。<br>单次调用Union方法其实我们并没有感觉该方法复杂度有多高（线性，id[ ]数组的访问为耗时单元），但是当我们具体处理问题时，比如我们用Quick-Find算法来解决之前说的动态连通性问题时，假设最后只得到了一个连通分量，那么根据上面的分析，我们<strong>至少需要访问数组(N+3)(N+1) ~ N^2次</strong>。因此，可以猜想，Quick-Find算法的复杂度是平方级别的（在最后得到少数连通分量的情况下，比如分析时的1条连通分量）。  </p>\n<p>可见，<strong>Quick-Find算法的复杂度是平方级别的</strong>，即当问题规则增长为原来的2倍时，计算所需的时间则为原来的2^2(4)倍。所以，Quick-Find算法并不是十分优秀。</p>\n","source":"_posts/2014-12-07-0.md","raw":"---\ndate: 2014-12-07\nlayout: post\ntitle: 案例研究：union-find算法(二) -- quick-find算法\npermalink: '/2014/12-07-0.html'\ncategories:\n- 算法\ntags:\n- union-find\n---\n\n所谓**Quick-Find算法**，顾名思义就是Find实现是Quick版本，而相对于Union，则显得不那么Quick了。当然，这是通过结论推导原因，放在这里是十分牵强的。所以，还是正常思维，如果要实现这个功能，当然，暴力算法是不可少的。而恰巧，这个暴力算法正好就是**Quick-Find算法**。\n\n首先，我们考虑Find的实现。寻找触点p对应的分量，由于id[ ]存放着各触点对应的分量，所以简单粗暴的id[p]就是触点p对应的分量。所以，Find的实现如下：\n\n\tfunc (u *UFQuickFind) Find(p int) int {\n\t    return u.id[p]\n\t}\n\n其次，再来考虑Union的实现。由于id[ ]存放着各触点对应的分量，而Union的功能就是把触点p和触点q的分量统一，即id[p]==id[q]即可，当然，原来与p(q)处于同一分量的触点也满足上式即可。所以，具体实现可参考如下：\n\n\tfunc (u *UFQuickFind) Union(p int, q int) {\n\t    pID := u.Find(p)\n\t    qID := u.Find(q)\n\t \n\t    if pID == qID {\n\t        return\n\t    }\n\t \n\t    for i := 0; i < len(u.id); i++ {\n\t        if u.id[i] == pID {\n\t            u.id[i] = qID\n\t        }\n\t    }\n\t \n\t    u.count--\n\t}\n\n分析上述Union方法的实现，简单来说就是触点p和触点q的分量如果不统一，则遍历所有触点，将原来属于触点p的分量的所有触点，全部统一成触点q的分量，如此做法即可达到触点p和触点q的分量统一，同时原先与触点p属于相同分量的其他触点依然保持处于相同分量的条件。\n\n那么，我们来分析下Quick-Find算法是否符合我们所说的，当问题规模增大时，解决问题所花的时间是否我们依然可以接受。\n\n首先，我们来看下Find方法。Find方法的速度显然是很快的，因为它只需要访问id[ ]数组一次。  \n那么，Union方法呢。很明显，Union方法的实现并不是很理想，因为每一次调用Union方法均要遍历一次id[ ]数组。我们可以具体算一下Union方法到底访问id[ ]数组多少次。归并两个分量操作首先会调用两次Find方法，而每个Find方法都会访问id[ ]数组一次，所以Union方法最起码要访问id[ ]数组2次。然后，Union方法在需要归并的时候，必须遍历id[ ]数组一次，所以Union方法最起码要访问id[ ]数组2+N次，其中N为id[ ]数组的大小。最后，检查id[ ]数组时，如果触点的分量需要改变时，则又需要访问id[ ]数组一次，所以还要加上1 ~ N-1次数组访问（至少有一个触点是q,一个触点是p)。综上所述，归并两个分量的Union方法访问数组的次数在N+3与2N+1之间。  \n单次调用Union方法其实我们并没有感觉该方法复杂度有多高（线性，id[ ]数组的访问为耗时单元），但是当我们具体处理问题时，比如我们用Quick-Find算法来解决之前说的动态连通性问题时，假设最后只得到了一个连通分量，那么根据上面的分析，我们**至少需要访问数组(N+3)(N+1) ~ N^2次**。因此，可以猜想，Quick-Find算法的复杂度是平方级别的（在最后得到少数连通分量的情况下，比如分析时的1条连通分量）。  \n\n可见，**Quick-Find算法的复杂度是平方级别的**，即当问题规则增长为原来的2倍时，计算所需的时间则为原来的2^2(4)倍。所以，Quick-Find算法并不是十分优秀。","slug":"-2014-12-07-0-html","updated":1422079618000,"excerpt":"","_id":"epd6clafna760k2x","comments":true,"photos":[],"link":""},{"date":1417968000000,"layout":"post","title":"案例研究：union-find算法(三) -- quick-union算法","categories":["8jwkgptl4juxqcvd"],"tags":["acpvv0jmps70bh8p"],"content":"<p><strong>Quick-Union算法</strong>，就是提高Union方法的速度。在<a href=\"https://zhujiefirst.github.io/2014/12-07-0.html\" target=\"_blank\" rel=\"external\">Quick-Find算法</a>中，Union方法每次调用均会遍历id[ ]数组，那么如何才能提高Union方法的效率呢。当然，这里我们先要赋予数组id[ ]不同的意义。Quick-Find中，id[i]表示第i个触点所有的分量为id[i]的值。而这里，<strong>id[i]的值表示与触点i具有相同分量的触点，即触点i和触点id[i]具有相同的分量</strong>。</p>\n<p>当然，id[i]必须构成一棵树，当达到根节点时，id[i]=i，即触点i的同一分量的下一个触点为其本身。</p>\n<p>根据id[ ]数组被赋予的新的意义，Find方法也需要修改。具体实现如下：</p>\n<pre><code>func (u *UFQuickUnion) <span class=\"keyword\">Find</span>(p <span class=\"keyword\">int</span>) <span class=\"keyword\">int</span> {\n    <span class=\"keyword\">for</span> p != u.id[p] {\n        p = u.id[p]\n    }\n    <span class=\"keyword\">return</span> p\n}\n</code></pre><p>上述代码就是找到触点p所在树的根节点，其根节点触点的索引即为我们所需的分量值。</p>\n<p>另外，Union方法也修改为如下：</p>\n<pre><code>func (u *UFQuickUnion) Union(p <span class=\"keyword\">int</span>, q <span class=\"keyword\">int</span>) {\n    pRoot := u.<span class=\"keyword\">Find</span>(p)\n    qRoot := u.<span class=\"keyword\">Find</span>(q)\n\n    <span class=\"keyword\">if</span> pRoot == qRoot {\n        <span class=\"keyword\">return</span>\n    }\n\n    u.id[pRoot] = qRoot\n    u.<span class=\"keyword\">count</span>--\n}\n</code></pre><p>先通过Find方法找到触点p和触点q所在的分量值，然后直接修改触点p所有的分量值与触点q相同即可，即将触点p的下一个触点设置为触点q。</p>\n<p>通过Find方法和Union方法的代码展示，<strong>Quick-Union算法看起来比Quick-Find算法更快</strong>，因为它不需要遍历整个id[ ]数组。那么，事实上呢？</p>\n<p>首先我们来看Find方法。在最好的情况下，Find方法只需要一次数组访问即可(触点p恰巧为树的根节点)；在最坏的情况下，Find方法需要2N-1次数组访问(触点p恰巧在树叶上且所有触点组成了一个链表)，其中条件判断语句N次，赋值语句N-1次。</p>\n<p>然后，我们再分析下Union方法。在Union方法中，调用了两次Find方法，最后归并分量时又对数组进行了1次访问。所以，Union方法在最好的情况下，需要访问id[ ]数组3次，而在最坏的情况下，需要访问数组2N-1次。</p>\n<p>因此，假设我们使用Quick-Union算法来解决动态连通性问题并且最后只得到了一个连通分量，那么至少需要调用N-1次Union方法，即在最好的情况下，至少需要访问(N-1)<em>3 ~ N次数组，而在最坏的情况下，需要调用(N-1)</em>(2N-1) ~ N^2次数组。所以，同样可以推断，Quick-Union算法在最好的情况下，是线性复杂度的，在最坏的情况下，是平方复杂度的。</p>\n<p>可见，<strong>Quick-Union算法的复杂度是在最好情况下是线性级别的，在最坏情况下是平方级别的</strong>。所以，Quick-Find算法可以作为Quick-Find算法的改进。那么，Quick-Union算法是不是还有改进的余地？当然有。请移步<a href=\"https://zhujiefirst.github.io/2014/12-12-0.html\" target=\"_blank\" rel=\"external\">加权Quick-Union算法</a>。</p>\n","source":"_posts/2014-12-08-0.md","raw":"---\r\ndate: 2014-12-08\r\nlayout: post\r\ntitle: 案例研究：union-find算法(三) -- quick-union算法\r\npermalink: '/2014/12-08-0.html'\r\ncategories:\r\n- 算法\r\ntags:\r\n- union-find\r\n---\r\n\r\n\r\n**Quick-Union算法**，就是提高Union方法的速度。在[Quick-Find算法](https://zhujiefirst.github.io/2014/12-07-0.html)中，Union方法每次调用均会遍历id[ ]数组，那么如何才能提高Union方法的效率呢。当然，这里我们先要赋予数组id[ ]不同的意义。Quick-Find中，id[i]表示第i个触点所有的分量为id[i]的值。而这里，**id[i]的值表示与触点i具有相同分量的触点，即触点i和触点id[i]具有相同的分量**。\r\n\r\n当然，id[i]必须构成一棵树，当达到根节点时，id[i]=i，即触点i的同一分量的下一个触点为其本身。\r\n\r\n根据id[ ]数组被赋予的新的意义，Find方法也需要修改。具体实现如下：\r\n\r\n\tfunc (u *UFQuickUnion) Find(p int) int {\r\n\t    for p != u.id[p] {\r\n\t        p = u.id[p]\r\n\t    }\r\n\t    return p\r\n\t}\r\n\r\n上述代码就是找到触点p所在树的根节点，其根节点触点的索引即为我们所需的分量值。\r\n\r\n另外，Union方法也修改为如下：\r\n\r\n\tfunc (u *UFQuickUnion) Union(p int, q int) {\r\n\t    pRoot := u.Find(p)\r\n\t    qRoot := u.Find(q)\r\n\t \r\n\t    if pRoot == qRoot {\r\n\t        return\r\n\t    }\r\n\t \r\n\t    u.id[pRoot] = qRoot\r\n\t    u.count--\r\n\t}\r\n\r\n先通过Find方法找到触点p和触点q所在的分量值，然后直接修改触点p所有的分量值与触点q相同即可，即将触点p的下一个触点设置为触点q。\r\n\r\n通过Find方法和Union方法的代码展示，**Quick-Union算法看起来比Quick-Find算法更快**，因为它不需要遍历整个id[ ]数组。那么，事实上呢？\r\n\r\n首先我们来看Find方法。在最好的情况下，Find方法只需要一次数组访问即可(触点p恰巧为树的根节点)；在最坏的情况下，Find方法需要2N-1次数组访问(触点p恰巧在树叶上且所有触点组成了一个链表)，其中条件判断语句N次，赋值语句N-1次。\r\n\r\n然后，我们再分析下Union方法。在Union方法中，调用了两次Find方法，最后归并分量时又对数组进行了1次访问。所以，Union方法在最好的情况下，需要访问id[ ]数组3次，而在最坏的情况下，需要访问数组2N-1次。\r\n\r\n因此，假设我们使用Quick-Union算法来解决动态连通性问题并且最后只得到了一个连通分量，那么至少需要调用N-1次Union方法，即在最好的情况下，至少需要访问(N-1)*3 ~ N次数组，而在最坏的情况下，需要调用(N-1)*(2N-1) ~ N^2次数组。所以，同样可以推断，Quick-Union算法在最好的情况下，是线性复杂度的，在最坏的情况下，是平方复杂度的。\r\n\r\n可见，**Quick-Union算法的复杂度是在最好情况下是线性级别的，在最坏情况下是平方级别的**。所以，Quick-Find算法可以作为Quick-Find算法的改进。那么，Quick-Union算法是不是还有改进的余地？当然有。请移步[加权Quick-Union算法](https://zhujiefirst.github.io/2014/12-12-0.html)。","slug":"-2014-12-08-0-html","updated":1422079626000,"excerpt":"","_id":"wm3xhgckychaxe59","comments":true,"photos":[],"link":""},{"date":1418313600000,"layout":"post","title":"案例研究：union-find算法(四) — 加权quick-union算法","categories":["8jwkgptl4juxqcvd"],"tags":["acpvv0jmps70bh8p"],"content":"<p>在<a href=\"https://zhujiefirst.github.io/2014/12-08-0.html\" target=\"_blank\" rel=\"external\">Quick-Union算法</a>中，在Union方法中归并两个分量时，我们始终是分量p归并至分量q。事实上，这里我们可以进行简单的优化，将含有节点少的分量归并至含有节点多的分量，如此做法可以减少分量形成的树的高度，从而在Find方法中寻找根节点时，适当增加效率。</p>\n<p>加权Quick-Union算法首先就要保存各分量包含的节点数，struct具体修改成如下：</p>\n<pre><code><span class=\"typedef\"><span class=\"keyword\">type</span> <span class=\"type\">UFWeightQuickUnion</span> struct <span class=\"container\">{\n    <span class=\"type\">UF</span>\n    <span class=\"title\">sz</span> []<span class=\"title\">int</span>\n}</span></span>\n</code></pre><p>当然Init方法也要做相应的修改：</p>\n<pre><code><span class=\"keyword\">func</span> (u *UFWeightQuickUnion) Init(n <span class=\"typename\">int</span>) {\n    u.count = n\n    u.id = <span class=\"built_in\">make</span>([]<span class=\"typename\">int</span>,<span class=\"number\"> 0</span>, n)\n    u.sz = <span class=\"built_in\">make</span>([]<span class=\"typename\">int</span>,<span class=\"number\"> 0</span>, n)\n    <span class=\"keyword\">for</span> i :=<span class=\"number\"> 0</span>; i &lt; n; i++ {\n        u.id = <span class=\"built_in\">append</span>(u.id, i)\n        u.sz = <span class=\"built_in\">append</span>(u.sz,<span class=\"number\"> 1</span>)\n    }\n}\n</code></pre><p>具体归并两个分量时，首先判断分量p与q含有节点数的多少，再将节点数少的分量归并至节点数多的分量，具体做法如下：</p>\n<pre><code>func (u *UFWeightQuickUnion) Union(p <span class=\"keyword\">int</span>, q <span class=\"keyword\">int</span>) {\n    pRoot := u.<span class=\"keyword\">Find</span>(p)\n    qRoot := u.<span class=\"keyword\">Find</span>(q)\n\n    <span class=\"keyword\">if</span> pRoot == qRoot {\n        <span class=\"keyword\">return</span>\n    }\n\n    <span class=\"keyword\">if</span> u.sz[pRoot] &lt; u.sz[qRoot] {\n        u.id[pRoot] = qRoot\n        u.sz[qRoot] = u.sz[qRoot] + u.sz[pRoot]\n    } <span class=\"keyword\">else</span> {\n        u.id[qRoot] = pRoot\n        u.sz[pRoot] = u.sz[pRoot] + u.sz[qRoot]\n    }\n    u.<span class=\"keyword\">count</span>--\n}\n</code></pre><p>当然，Find方法与Quick-Union保持一样：</p>\n<pre><code>func (u *UFWeightQuickUnion) <span class=\"keyword\">Find</span>(p <span class=\"keyword\">int</span>) <span class=\"keyword\">int</span> {\n    <span class=\"keyword\">for</span> p != u.id[p] {\n        p = u.id[p]\n    }\n    <span class=\"keyword\">return</span> p\n}\n</code></pre><p>那么，加权Quick-Union算法到底效率如何呢？首先，我们可以分析得到分量所形成的树高度最大为logN,那么，Find方法访问数组的次数为1到logN次。所以，Union方法访问数组的次数相应为3到2logN+1次，即最多2logN+1~logN次。</p>\n<p>可见，<strong>加权Quick-Union算法解决之前提出的问题时，最多访问数组NlogN次</strong>，完全可以用于现实项目。</p>\n","source":"_posts/2014-12-12-0.md","raw":"---\r\ndate: 2014-12-12\r\nlayout: post\r\ntitle: 案例研究：union-find算法(四) — 加权quick-union算法\r\npermalink: '/2014/12-12-0.html'\r\ncategories:\r\n- 算法\r\ntags:\r\n- union-find\r\n---\r\n\r\n\r\n在[Quick-Union算法](https://zhujiefirst.github.io/2014/12-08-0.html)中，在Union方法中归并两个分量时，我们始终是分量p归并至分量q。事实上，这里我们可以进行简单的优化，将含有节点少的分量归并至含有节点多的分量，如此做法可以减少分量形成的树的高度，从而在Find方法中寻找根节点时，适当增加效率。\r\n\r\n加权Quick-Union算法首先就要保存各分量包含的节点数，struct具体修改成如下：\r\n\r\n\ttype UFWeightQuickUnion struct {\r\n\t    UF\r\n\t    sz []int\r\n\t}\r\n\r\n当然Init方法也要做相应的修改：\r\n\r\n\tfunc (u *UFWeightQuickUnion) Init(n int) {\r\n\t    u.count = n\r\n\t    u.id = make([]int, 0, n)\r\n\t    u.sz = make([]int, 0, n)\r\n\t    for i := 0; i < n; i++ {\r\n\t        u.id = append(u.id, i)\r\n\t        u.sz = append(u.sz, 1)\r\n\t    }\r\n\t}\r\n\r\n具体归并两个分量时，首先判断分量p与q含有节点数的多少，再将节点数少的分量归并至节点数多的分量，具体做法如下：\r\n\r\n\tfunc (u *UFWeightQuickUnion) Union(p int, q int) {\r\n\t    pRoot := u.Find(p)\r\n\t    qRoot := u.Find(q)\r\n\t \r\n\t    if pRoot == qRoot {\r\n\t        return\r\n\t    }\r\n\t \r\n\t    if u.sz[pRoot] < u.sz[qRoot] {\r\n\t        u.id[pRoot] = qRoot\r\n\t        u.sz[qRoot] = u.sz[qRoot] + u.sz[pRoot]\r\n\t    } else {\r\n\t        u.id[qRoot] = pRoot\r\n\t        u.sz[pRoot] = u.sz[pRoot] + u.sz[qRoot]\r\n\t    }\r\n\t    u.count--\r\n\t}\r\n\r\n当然，Find方法与Quick-Union保持一样：\r\n\r\n\tfunc (u *UFWeightQuickUnion) Find(p int) int {\r\n\t    for p != u.id[p] {\r\n\t        p = u.id[p]\r\n\t    }\r\n\t    return p\r\n\t}\r\n\r\n那么，加权Quick-Union算法到底效率如何呢？首先，我们可以分析得到分量所形成的树高度最大为logN,那么，Find方法访问数组的次数为1到logN次。所以，Union方法访问数组的次数相应为3到2logN+1次，即最多2logN+1~logN次。\r\n\r\n可见，**加权Quick-Union算法解决之前提出的问题时，最多访问数组NlogN次**，完全可以用于现实项目。","slug":"-2014-12-12-0-html","updated":1422079634000,"excerpt":"","_id":"auk648ncwkswxa2a","comments":true,"photos":[],"link":""},{"date":1419609600000,"layout":"post","title":"经典算法巡礼(一) -- 排序之冒泡排序","categories":["8jwkgptl4juxqcvd"],"tags":["64673jg048ygbdcb"],"content":"<p><a href=\"http://en.wikipedia.org/wiki/Bubble_sort\" target=\"_blank\" rel=\"external\"><strong>冒泡排序</strong></a>是一种简单的排序算法，相信绝大多数人学会的第一种排序算法就是她了。</p>\n<p>事实上，她重复地遍历需要排序的元素，一次比较相邻的两个元素，如果不满足预先定义的比较条件，则交换；否则继续下一组元素比较，直至遍历完成需要排序的所有元素。当然，遍历需要排序的元素需要重复进行，直到没有需要排序的元素为止。遍历需要排序的元素时，每一次交换不满足顺序条件的元素就如同气泡一样，从元素序列的一端慢慢“上升”到序列的另一端，此现象如同水中冒气泡一样，此排序算法以此得名。</p>\n<p>具体实现也较为简单，用<a href=\"https://golang.org/\" target=\"_blank\" rel=\"external\">golang</a>表示如下：</p>\n<pre><code>// Sort方法从数组头开始冒泡，将最小元素位置上升到最后，直到数组排序完成为止<span class=\"comment\">\n// Sort中参数类型Comparable为统一的可比较接口，若为整数数组排序，则Comparable为int即可</span><span class=\"comment\">\n// Sort中参数类型Compare为配合Comparable接口的比较方法，若为整数数组排序，则Compare即满足a int &lt; a int即可</span>\nfunc (this *BubbleSort) Sort(<span class=\"operator\">a</span> []Comparable, compare Compare) {\n    <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">len</span>(<span class=\"operator\">a</span>); i++ {\n        <span class=\"keyword\">for</span> j := <span class=\"number\">1</span>; j &lt; <span class=\"built_in\">len</span>(<span class=\"operator\">a</span>)-i; j++ {\n            <span class=\"keyword\">if</span> this.less(<span class=\"operator\">a</span>[j], <span class=\"operator\">a</span>[j-<span class=\"number\">1</span>], compare) {\n                this.exch(<span class=\"operator\">a</span>, j-<span class=\"number\">1</span>, j)\n            }\n        }\n    }\n}\n</code></pre><p>那么，冒泡排序的效率如何呢？事实上，她不咋滴。且看上述代码中的两重循环吧，这可是复杂度的恶梦啊。当然，很明显，她的<a href=\"http://en.wikipedia.org/wiki/Time_complexity\" target=\"_blank\" rel=\"external\">时间复杂度</a>是<strong>O(N^2)</strong>。</p>\n<p>为了方便，我们以一次比较作为一次时间复杂度操作。根据冒泡排序的实现的思路，对长度为N的数组进行排序所需要的比较次数为<strong>N-1 + N-2 + … + 1 + 0</strong>，即<strong>(N-1)/2*N = (N^2-N)/2 ~ N^2</strong>。可见，通用简单的数学计算，冒泡排序的时间复杂度确实就是<strong>O(N^2)</strong>。</p>\n<p>换种通俗的方式来说，<strong>冒泡排序的时间复杂度是平方级别的</strong>。因此，她只<strong>适合对少量元素进行排序，而无法用于大规模数据的排序</strong>，可谓是中看不中用啊。</p>\n","source":"_posts/2014-12-27-0.md","raw":"---\r\ndate: 2014-12-27\r\nlayout: post\r\ntitle: 经典算法巡礼(一) -- 排序之冒泡排序\r\npermalink: '/2014/12-27-0.html'\r\ncategories:\r\n- 算法\r\ntags:\r\n- 排序\r\n---\r\n\r\n[**冒泡排序**](http://en.wikipedia.org/wiki/Bubble_sort)是一种简单的排序算法，相信绝大多数人学会的第一种排序算法就是她了。\r\n\r\n事实上，她重复地遍历需要排序的元素，一次比较相邻的两个元素，如果不满足预先定义的比较条件，则交换；否则继续下一组元素比较，直至遍历完成需要排序的所有元素。当然，遍历需要排序的元素需要重复进行，直到没有需要排序的元素为止。遍历需要排序的元素时，每一次交换不满足顺序条件的元素就如同气泡一样，从元素序列的一端慢慢“上升”到序列的另一端，此现象如同水中冒气泡一样，此排序算法以此得名。\r\n\r\n具体实现也较为简单，用[golang](https://golang.org/)表示如下：\r\n\r\n\t// Sort方法从数组头开始冒泡，将最小元素位置上升到最后，直到数组排序完成为止\r\n\t// Sort中参数类型Comparable为统一的可比较接口，若为整数数组排序，则Comparable为int即可\r\n\t// Sort中参数类型Compare为配合Comparable接口的比较方法，若为整数数组排序，则Compare即满足a int < a int即可\r\n\tfunc (this *BubbleSort) Sort(a []Comparable, compare Compare) {\r\n\t\tfor i := 0; i < len(a); i++ {\r\n\t\t\tfor j := 1; j < len(a)-i; j++ {\r\n\t\t\t\tif this.less(a[j], a[j-1], compare) {\r\n\t\t\t\t\tthis.exch(a, j-1, j)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n那么，冒泡排序的效率如何呢？事实上，她不咋滴。且看上述代码中的两重循环吧，这可是复杂度的恶梦啊。当然，很明显，她的[时间复杂度](http://en.wikipedia.org/wiki/Time_complexity)是**O(N^2)**。\r\n\r\n为了方便，我们以一次比较作为一次时间复杂度操作。根据冒泡排序的实现的思路，对长度为N的数组进行排序所需要的比较次数为**N-1 + N-2 + ... + 1 + 0**，即**(N-1)/2*N = (N^2-N)/2 ~ N^2**。可见，通用简单的数学计算，冒泡排序的时间复杂度确实就是**O(N^2)**。\r\n\r\n换种通俗的方式来说，**冒泡排序的时间复杂度是平方级别的**。因此，她只**适合对少量元素进行排序，而无法用于大规模数据的排序**，可谓是中看不中用啊。","slug":"-2014-12-27-0-html","updated":1419660801000,"excerpt":"","_id":"5i05thmr7dltojdg","comments":true,"photos":[],"link":""},{"date":1419609600000,"layout":"post","title":"经典算法巡礼(二) -- 排序之选择排序","categories":["8jwkgptl4juxqcvd"],"tags":["64673jg048ygbdcb"],"content":"<p><a href=\"http://en.wikipedia.org/wiki/Selection_sort\" target=\"_blank\" rel=\"external\">选择排序</a>，如<a href=\"http://codingforever.cn/2014/12-27-0.html\" target=\"_blank\" rel=\"external\">冒泡排序</a>一样，从名字中即可大概猜测其排序的原理。其工作原理就是从未排序的数组中选出最大（小）的元素，将其放置至数组的首（尾）部，重复此过程直至没有未排序的子数组。</p>\n<p>当然，在分析该排序算法前还是先将<a href=\"https://golang.org/\" target=\"_blank\" rel=\"external\">golang</a>实现版本放置出来献下丑：</p>\n<pre><code>// Sort方法从数组头开始，将未排序的元素做为子数组，并在子数组中选择中最小的元素，将其放置子数组的最首位置做为已排序元素，重复此过程，直到所有数组元素排序完成为止<span class=\"comment\">\n// Sort中参数类型Comparable为统一的可比较接口，若为整数数组排序，则Comparable为int即可</span><span class=\"comment\">\n// Sort中参数类型Compare为配合Comparable接口的比较方法，若为整数数组排序，则Compare即满足a int &lt; a int即可</span>\nfunc (this *SelectSort) Sort(<span class=\"operator\">a</span> []Comparable, compare Compare) {\n    <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">len</span>(<span class=\"operator\">a</span>); i++ {\n        <span class=\"built_in\">min</span> := i\n        <span class=\"keyword\">for</span> j := i + <span class=\"number\">1</span>; j &lt; <span class=\"built_in\">len</span>(<span class=\"operator\">a</span>); j++ {\n            <span class=\"keyword\">if</span> this.less(<span class=\"operator\">a</span>[j], <span class=\"operator\">a</span>[<span class=\"built_in\">min</span>], compare) == <span class=\"constant\">true</span> {\n                <span class=\"built_in\">min</span> = j\n            }\n        }\n        this.exch(<span class=\"operator\">a</span>, i, <span class=\"built_in\">min</span>)\n    }\n}\n</code></pre><p>同样，我们用与<a href=\"http://codingforever.cn/2014/12-27-0.html\" target=\"_blank\" rel=\"external\">冒泡排序</a>相同的方法分析其效率。观察选择排序的代码实现，明显她也是<strong>时间复杂度为O(N^2)</strong>的排序算法。同样以元素比较作为单元操作，完成一个长度为N的数组的排序工作需要<strong>N-1 + N-2 + … + 2 + 1</strong>次比较操作，简化后为<strong>(N-1)/2*N = (N^2-N)/2 ~ N^2</strong>。</p>\n<p>与<a href=\"http://codingforever.cn/2014/12-27-0.html\" target=\"_blank\" rel=\"external\">冒泡排序</a>不同的是，虽然两种排序算法的比较次数是相同的，但是其元素交换操作数目并不是相同的。选择排序的交换操作<strong>最多为N次</strong>，而冒泡排序的交换操作却与数组中不满足顺序的元素对数量相同，即与被排序数组相关，在最差情况下，其次数与比较次数相同，即<strong>N^2</strong>。</p>\n<p>虽然选择排序在元素交换方面比<a href=\"http://codingforever.cn/2014/12-27-0.html\" target=\"_blank\" rel=\"external\">冒泡排序</a>具有一定的优势，但是其时间复杂度依然是万恶的<strong>平方级别的，即O(N^2)</strong>，所以其依然<strong>只适用于小型数组的排序，不能满足大量数据的排序</strong>。</p>\n","source":"_posts/2014-12-27-1.md","raw":"---\r\ndate: 2014-12-27\r\nlayout: post\r\ntitle: 经典算法巡礼(二) -- 排序之选择排序\r\npermalink: '/2014/12-27-1.html'\r\ncategories:\r\n- 算法\r\ntags:\r\n- 排序\r\n---\r\n\r\n[选择排序](http://en.wikipedia.org/wiki/Selection_sort)，如[冒泡排序](http://codingforever.cn/2014/12-27-0.html)一样，从名字中即可大概猜测其排序的原理。其工作原理就是从未排序的数组中选出最大（小）的元素，将其放置至数组的首（尾）部，重复此过程直至没有未排序的子数组。\r\n\r\n当然，在分析该排序算法前还是先将[golang](https://golang.org/)实现版本放置出来献下丑：\r\n\r\n\t// Sort方法从数组头开始，将未排序的元素做为子数组，并在子数组中选择中最小的元素，将其放置子数组的最首位置做为已排序元素，重复此过程，直到所有数组元素排序完成为止\r\n\t// Sort中参数类型Comparable为统一的可比较接口，若为整数数组排序，则Comparable为int即可\r\n\t// Sort中参数类型Compare为配合Comparable接口的比较方法，若为整数数组排序，则Compare即满足a int < a int即可\r\n\tfunc (this *SelectSort) Sort(a []Comparable, compare Compare) {\r\n\t\tfor i := 0; i < len(a); i++ {\r\n\t\t\tmin := i\r\n\t\t\tfor j := i + 1; j < len(a); j++ {\r\n\t\t\t\tif this.less(a[j], a[min], compare) == true {\r\n\t\t\t\t\tmin = j\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis.exch(a, i, min)\r\n\t\t}\r\n\t}\r\n\r\n同样，我们用与[冒泡排序](http://codingforever.cn/2014/12-27-0.html)相同的方法分析其效率。观察选择排序的代码实现，明显她也是**时间复杂度为O(N^2)**的排序算法。同样以元素比较作为单元操作，完成一个长度为N的数组的排序工作需要**N-1 + N-2 + ... + 2 + 1**次比较操作，简化后为**(N-1)/2*N = (N^2-N)/2 ~ N^2**。\r\n\r\n与[冒泡排序](http://codingforever.cn/2014/12-27-0.html)不同的是，虽然两种排序算法的比较次数是相同的，但是其元素交换操作数目并不是相同的。选择排序的交换操作**最多为N次**，而冒泡排序的交换操作却与数组中不满足顺序的元素对数量相同，即与被排序数组相关，在最差情况下，其次数与比较次数相同，即**N^2**。\r\n\r\n虽然选择排序在元素交换方面比[冒泡排序](http://codingforever.cn/2014/12-27-0.html)具有一定的优势，但是其时间复杂度依然是万恶的**平方级别的，即O(N^2)**，所以其依然**只适用于小型数组的排序，不能满足大量数据的排序**。","slug":"-2014-12-27-1-html","updated":1419662821000,"excerpt":"","_id":"j2elszw2ui6ii3m6","comments":true,"photos":[],"link":""},{"date":1419609600000,"layout":"post","title":"经典算法巡礼(三) -- 排序之插入排序","categories":["8jwkgptl4juxqcvd"],"tags":["64673jg048ygbdcb"],"content":"<p><a href=\"http://en.wikipedia.org/wiki/Insertion_sort\" target=\"_blank\" rel=\"external\">插入排序</a>，与之前的<a href=\"http://codingforever.cn/2014/12-27-0.html\" target=\"_blank\" rel=\"external\">冒泡排序</a>和<a href=\"http://codingforever.cn/2014/12-27-1.html\" target=\"_blank\" rel=\"external\">选择排序</a>一样，其名称就说明了她的原理。所谓插入排序，就是对于数组中未排序的元素，依次遍历寻找合适的位置并插入到已排序的子数组中。当数组中没有未排序的元素时，插入排序即完成。</p>\n<p>同样，还是先展示<a href=\"https://golang.org/\" target=\"_blank\" rel=\"external\">golang</a>实现的版本：</p>\n<pre><code><span class=\"comment\">// Sort方法从数组头开始，将未排序的元素依次选择合适的位置插入已排序的子数组中</span>\n<span class=\"comment\">// 这里并不是找到合适位置后再将元素插入，而是交换元素至合适位置</span>\n<span class=\"comment\">// Sort中参数类型Comparable为统一的可比较接口，若为整数数组排序，则Comparable为int即可</span>\n<span class=\"comment\">// Sort中参数类型Compare为配合Comparable接口的比较方法，若为整数数组排序，则Compare即满足a int &lt; a int即可</span>\nfunc (this *InsertionSort) <span class=\"function\">Sort</span>(<span class=\"tag\">a</span> <span class=\"attr_selector\">[]</span>Comparable, compare Compare) {\n    for <span class=\"tag\">i</span> <span class=\"value\">:= <span class=\"number\">1</span>;</span> <span class=\"tag\">i</span> &lt; <span class=\"function\">len</span>(<span class=\"tag\">a</span>); <span class=\"tag\">i</span>++ {\n        for j <span class=\"value\">:= i;</span> j &gt; 0 &amp;&amp; this<span class=\"class\">.less</span>(<span class=\"tag\">a</span><span class=\"attr_selector\">[j]</span>, <span class=\"tag\">a</span><span class=\"attr_selector\">[j-1]</span>, compare); j-- {\n            this<span class=\"class\">.exch</span>(<span class=\"tag\">a</span>, j, j-1)\n        }\n    }\n}要\n</code></pre><p>还是与之前一样，我们以数组元素的比较作为一次操作，分析插入排序其效率如何。事实上，在最差情况下，采用插入排序需要的比较次数为<strong>0+1+2+…+N-1</strong>次，简化后即为<strong>(N-1)/2*N = (N^2-N)/2 ~ N^2</strong>。而在最好的情况下，排入排序需要的比较次数则为<strong>N-1</strong>次。</p>\n<p>可见，插入排序的<strong>时间复杂度是O(N^2)</strong>，同样是万恶的<strong>平方级别</strong>。但是，与<a href=\"http://codingforever.cn/2014/12-27-0.html\" target=\"_blank\" rel=\"external\">冒泡排序</a>和<a href=\"http://codingforever.cn/2014/12-27-1.html\" target=\"_blank\" rel=\"external\">选择排序</a>不同，插入排序所需的比较次数是<strong>与输入数组相关的</strong>，在最差的情况下才需要N^2次的操作。然而事实就是事实，插入排序还是<strong>只适用于小型数组的排序，不能满足大量数据的排序</strong>。</p>\n","source":"_posts/2014-12-27-2.md","raw":"---\r\ndate: 2014-12-27\r\nlayout: post\r\ntitle: 经典算法巡礼(三) -- 排序之插入排序\r\npermalink: '/2014/12-27-2.html'\r\ncategories:\r\n- 算法\r\ntags:\r\n- 排序\r\n---\r\n\r\n[插入排序](http://en.wikipedia.org/wiki/Insertion_sort)，与之前的[冒泡排序](http://codingforever.cn/2014/12-27-0.html)和[选择排序](http://codingforever.cn/2014/12-27-1.html)一样，其名称就说明了她的原理。所谓插入排序，就是对于数组中未排序的元素，依次遍历寻找合适的位置并插入到已排序的子数组中。当数组中没有未排序的元素时，插入排序即完成。\r\n\r\n同样，还是先展示[golang](https://golang.org/)实现的版本：\r\n\r\n\t// Sort方法从数组头开始，将未排序的元素依次选择合适的位置插入已排序的子数组中\r\n\t// 这里并不是找到合适位置后再将元素插入，而是交换元素至合适位置\r\n\t// Sort中参数类型Comparable为统一的可比较接口，若为整数数组排序，则Comparable为int即可\r\n\t// Sort中参数类型Compare为配合Comparable接口的比较方法，若为整数数组排序，则Compare即满足a int < a int即可\r\n\tfunc (this *InsertionSort) Sort(a []Comparable, compare Compare) {\r\n\t\tfor i := 1; i < len(a); i++ {\r\n\t\t\tfor j := i; j > 0 && this.less(a[j], a[j-1], compare); j-- {\r\n\t\t\t\tthis.exch(a, j, j-1)\r\n\t\t\t}\r\n\t\t}\r\n\t}要\r\n\r\n还是与之前一样，我们以数组元素的比较作为一次操作，分析插入排序其效率如何。事实上，在最差情况下，采用插入排序需要的比较次数为**0+1+2+...+N-1**次，简化后即为**(N-1)/2*N = (N^2-N)/2 ~ N^2**。而在最好的情况下，排入排序需要的比较次数则为**N-1**次。\r\n\r\n可见，插入排序的**时间复杂度是O(N^2)**，同样是万恶的**平方级别**。但是，与[冒泡排序](http://codingforever.cn/2014/12-27-0.html)和[选择排序](http://codingforever.cn/2014/12-27-1.html)不同，插入排序所需的比较次数是**与输入数组相关的**，在最差的情况下才需要N^2次的操作。然而事实就是事实，插入排序还是**只适用于小型数组的排序，不能满足大量数据的排序**。","slug":"-2014-12-27-2-html","updated":1419674101000,"excerpt":"","_id":"2unx7rlf3unad7pe","comments":true,"photos":[],"link":""},{"date":1419609600000,"layout":"post","title":"经典算法巡礼(四) -- 排序之希尔排序","categories":["8jwkgptl4juxqcvd"],"tags":["64673jg048ygbdcb"],"content":"<p><a href=\"http://en.wikipedia.org/wiki/Shellsort\" target=\"_blank\" rel=\"external\">希尔排序</a>与之前的排序算法不同，她是以她的发明者<a href=\"http://en.wikipedia.org/wiki/Donald_Shell\" target=\"_blank\" rel=\"external\">Donald Shell</a>来命名的。她是<a href=\"http://codingforever.cn/2014/12-27-2.html\" target=\"_blank\" rel=\"external\">插入排序</a>的一种改进版本。</p>\n<p>希尔排序是基于<a href=\"http://codingforever.cn/2014/12-27-2.html\" target=\"_blank\" rel=\"external\">插入排序</a>的以下两点性质而提出的改进算法：</p>\n<ul>\n<li>插入排序的效率与输入序列有关，当输入序列处于基本排好序的情况下可以达到线性排序的效率；</li>\n<li>插入排序在大规模乱序情况下，效率是比较低的，因为她只会交换相邻的元素，因此元素只能一点点从数组的一端移动到另一端，即最差情况下的平方级别的效率。</li>\n</ul>\n<p>希尔排序为了加快速度简单地改进了<a href=\"http://codingforever.cn/2014/12-27-2.html\" target=\"_blank\" rel=\"external\">插入排序</a>，交换不相邻的元素以对数组的局部进行排序，并最终用插入排序将局部有序的数组排序。</p>\n<p><strong>希尔排序的思想是使数组中任意间隔为h的元素都是有序的</strong>。换句话说，<strong>希尔排序就是将数组中任意间隔为h的元素组成的新数组排列有序</strong>，当h为1时，该数组就排序完成了。事实上，h为1时，希尔排序就是<a href=\"http://codingforever.cn/2014/12-27-2.html\" target=\"_blank\" rel=\"external\">插入排序</a>。</p>\n<p>那么，为什么希尔排序会比较高效呢？首先，我们知道<strong><a href=\"http://codingforever.cn/2014/12-27-2.html\" target=\"_blank\" rel=\"external\">插入排序</a>对于基本有序的数组排序效率是线性的</strong>。希尔排序在排序之初，间隔为h的元素组成的新数组都很短，而且基本处于有序状态，所以采用<a href=\"http://codingforever.cn/2014/12-27-2.html\" target=\"_blank\" rel=\"external\">插入排序</a>对子数组排序是很高效的。然后当h递减时，又由于已进行过几轮排序的原因，子数组又是基本牌有状态的，所以很适合采用<a href=\"http://codingforever.cn/2014/12-27-2.html\" target=\"_blank\" rel=\"external\">插入排序</a>。</p>\n<p>说了这么多，其实希尔排序就是将数组中元素以h为间隔取出元素组成新的数组，并用<a href=\"http://codingforever.cn/2014/12-27-2.html\" target=\"_blank\" rel=\"external\">插入排序</a>将新数组排列有序。递减h的值，重复以上过程，直到h==1为止。</p>\n<p>那么，h应该如何递减呢？事实上要回答这个问题并不简单。希尔算法的性能不仅取决于h，还取决于各h之间的数学性质，比如它们的公因子等。这里，我们以h=h*3+1做为h的递增方法，用<a href=\"https://golang.org/\" target=\"_blank\" rel=\"external\">golang</a>实现如下：</p>\n<pre><code>// Sort方法从将间隔为h的元素组成的子数组进行插入排序，重复此过程直到h==<span class=\"number\">1</span><span class=\"comment\">\n// Sort中参数类型Comparable为统一的可比较接口，若为整数数组排序，则Comparable为int即可</span><span class=\"comment\">\n// Sort中参数类型Compare为配合Comparable接口的比较方法，若为整数数组排序，则Compare即满足a int &lt; a int即可</span>\nfunc (this *ShellSort) Sort(<span class=\"operator\">a</span> []Comparable, compare Compare) {\n    arrayLen := <span class=\"built_in\">len</span>(<span class=\"operator\">a</span>)\n\n    h := <span class=\"number\">1</span>\n    <span class=\"keyword\">for</span> h &lt; arrayLen/<span class=\"number\">3</span> {\n        h = <span class=\"number\">3</span>*h + <span class=\"number\">1</span>\n    }\n\n    <span class=\"keyword\">for</span> h &gt;= <span class=\"number\">1</span> {\n       <span class=\"comment\"> // 对间隔为h的子数组进行插入排序</span>\n        <span class=\"keyword\">for</span> i := h; i &lt; <span class=\"built_in\">len</span>(<span class=\"operator\">a</span>); i++ {\n            <span class=\"keyword\">for</span> j := i; j &gt;= h &amp;&amp; this.less(<span class=\"operator\">a</span>[j], <span class=\"operator\">a</span>[j-h], compare); j -= h {\n                this.exch(<span class=\"operator\">a</span>, j, j-h)\n            }\n        }\n        h = h / <span class=\"number\">3</span>\n    }\n}\n</code></pre><p>这里，我们并<strong>不讨论希尔排序的时间复杂度，因为这个问题至今还没有确定的答案</strong>，但肯定的是，她是可以用于进行大规模数据的排序，在最坏情况下<strong>时间复杂度可以达到O(NlogN*logN)</strong>。</p>\n","source":"_posts/2014-12-27-3.md","raw":"---\r\ndate: 2014-12-27\r\nlayout: post\r\ntitle: 经典算法巡礼(四) -- 排序之希尔排序\r\npermalink: '/2014/12-27-3.html'\r\ncategories:\r\n- 算法\r\ntags:\r\n- 排序\r\n---\r\n\r\n[希尔排序](http://en.wikipedia.org/wiki/Shellsort)与之前的排序算法不同，她是以她的发明者[Donald Shell](http://en.wikipedia.org/wiki/Donald_Shell)来命名的。她是[插入排序](http://codingforever.cn/2014/12-27-2.html)的一种改进版本。\r\n\r\n希尔排序是基于[插入排序](http://codingforever.cn/2014/12-27-2.html)的以下两点性质而提出的改进算法：\r\n\r\n* 插入排序的效率与输入序列有关，当输入序列处于基本排好序的情况下可以达到线性排序的效率；\r\n* 插入排序在大规模乱序情况下，效率是比较低的，因为她只会交换相邻的元素，因此元素只能一点点从数组的一端移动到另一端，即最差情况下的平方级别的效率。\r\n\r\n希尔排序为了加快速度简单地改进了[插入排序](http://codingforever.cn/2014/12-27-2.html)，交换不相邻的元素以对数组的局部进行排序，并最终用插入排序将局部有序的数组排序。\r\n\r\n**希尔排序的思想是使数组中任意间隔为h的元素都是有序的**。换句话说，**希尔排序就是将数组中任意间隔为h的元素组成的新数组排列有序**，当h为1时，该数组就排序完成了。事实上，h为1时，希尔排序就是[插入排序](http://codingforever.cn/2014/12-27-2.html)。\r\n\r\n那么，为什么希尔排序会比较高效呢？首先，我们知道**[插入排序](http://codingforever.cn/2014/12-27-2.html)对于基本有序的数组排序效率是线性的**。希尔排序在排序之初，间隔为h的元素组成的新数组都很短，而且基本处于有序状态，所以采用[插入排序](http://codingforever.cn/2014/12-27-2.html)对子数组排序是很高效的。然后当h递减时，又由于已进行过几轮排序的原因，子数组又是基本牌有状态的，所以很适合采用[插入排序](http://codingforever.cn/2014/12-27-2.html)。\r\n\r\n说了这么多，其实希尔排序就是将数组中元素以h为间隔取出元素组成新的数组，并用[插入排序](http://codingforever.cn/2014/12-27-2.html)将新数组排列有序。递减h的值，重复以上过程，直到h==1为止。\r\n\r\n那么，h应该如何递减呢？事实上要回答这个问题并不简单。希尔算法的性能不仅取决于h，还取决于各h之间的数学性质，比如它们的公因子等。这里，我们以h=h*3+1做为h的递增方法，用[golang](https://golang.org/)实现如下：\r\n\r\n\t// Sort方法从将间隔为h的元素组成的子数组进行插入排序，重复此过程直到h==1\r\n\t// Sort中参数类型Comparable为统一的可比较接口，若为整数数组排序，则Comparable为int即可\r\n\t// Sort中参数类型Compare为配合Comparable接口的比较方法，若为整数数组排序，则Compare即满足a int < a int即可\r\n\tfunc (this *ShellSort) Sort(a []Comparable, compare Compare) {\r\n\t\tarrayLen := len(a)\r\n\r\n\t\th := 1\r\n\t\tfor h < arrayLen/3 {\r\n\t\t\th = 3*h + 1\r\n\t\t}\r\n\r\n\t\tfor h >= 1 {\r\n\t\t\t// 对间隔为h的子数组进行插入排序\r\n\t\t\tfor i := h; i < len(a); i++ {\r\n\t\t\t\tfor j := i; j >= h && this.less(a[j], a[j-h], compare); j -= h {\r\n\t\t\t\t\tthis.exch(a, j, j-h)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\th = h / 3\r\n\t\t}\r\n\t}\r\n\r\n这里，我们并**不讨论希尔排序的时间复杂度，因为这个问题至今还没有确定的答案**，但肯定的是，她是可以用于进行大规模数据的排序，在最坏情况下**时间复杂度可以达到O(NlogN*logN)**。","slug":"-2014-12-27-3-html","updated":1419689848000,"excerpt":"","_id":"t7rqm1fa4w4m09pq","comments":true,"photos":[],"link":""},{"date":1419696000000,"layout":"post","title":"经典算法巡礼(五) -- 排序之归并排序","categories":["8jwkgptl4juxqcvd"],"tags":["64673jg048ygbdcb"],"content":"<p><a href=\"http://en.wikipedia.org/wiki/Merge_sort\" target=\"_blank\" rel=\"external\">归并排序</a>是创建在<strong>归并操作</strong>上的一种有效排序算法。<strong>所谓归并操作，指的是将两个已经排序的序列合并成一个序列的操作</strong>。归并排序是<a href=\"http://en.wikipedia.org/wiki/Divide_and_conquer_algorithms\" target=\"_blank\" rel=\"external\"><strong>分治思想</strong></a>的典型示范。</p>\n<p>归并排序具体步骤如下：</p>\n<ol>\n<li>申请大小等于两个已排序序列之和的空间，该空间用来存放合并后的序列；</li>\n<li>设定两个指针，初始位置分别为两个已排序序列的起始位置；</li>\n<li>比较两个指针所指向的元素，选择较小的元素放入合并的空间中（若进行升序排序），并移动指针到下一个位置；</li>\n<li>重复步骤3直至其中某一指针到达序列尾；</li>\n<li>将另一序列剩下的元素直接复制到合并序列中。</li>\n</ol>\n<p>用<a href=\"https://golang.org/\" target=\"_blank\" rel=\"external\">golang</a>实现如下： </p>\n<pre><code>// <span class=\"built_in\">merge</span>方法实现归并排序中的归并操作，将两个已排序数组归并操作成一个已排序数组\nfunc (this *MergeSort) <span class=\"built_in\">merge</span>(<span class=\"operator\">a</span> []Comparable, compare Compare, lo int, <span class=\"keyword\">mid</span> int, hi int) {\n    i := lo\n    j := <span class=\"keyword\">mid</span> + <span class=\"number\">1</span>\n\n    arrayBak := make([]Comparable, <span class=\"built_in\">len</span>(<span class=\"operator\">a</span>))\n    copy(arrayBak, <span class=\"operator\">a</span>)\n\n    <span class=\"keyword\">for</span> k := lo; k &lt;= hi; k++ {\n        <span class=\"keyword\">if</span> i &gt; <span class=\"keyword\">mid</span> {\n            <span class=\"operator\">a</span>[k] = arrayBak[j]\n            j++\n        } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> j &gt; hi {\n            <span class=\"operator\">a</span>[k] = arrayBak[i]\n            i++\n        } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> this.less(arrayBak[i], arrayBak[j], compare) {\n            <span class=\"operator\">a</span>[k] = arrayBak[i]\n            i++\n        } <span class=\"keyword\">else</span> {\n            <span class=\"operator\">a</span>[k] = arrayBak[j]\n            j++\n        }\n    }\n}\n<span class=\"comment\">\n// Sort1采用自顶向下方法进行归并排序</span><span class=\"comment\">\n// Sort中参数类型Comparable为统一的可比较接口，若为整数数组排序，则Comparable为int即可</span><span class=\"comment\">\n// Sort中参数类型Compare为配合Comparable接口的比较方法，若为整数数组排序，则Compare即满足a int &lt; a int即可</span>\nfunc (this *MergeSort) sort1(<span class=\"operator\">a</span> []Comparable, compare Compare, lo int, hi int) {\n    <span class=\"keyword\">if</span> lo &gt;= hi {\n        <span class=\"constant\">return</span>\n    }\n\n    <span class=\"keyword\">mid</span> := (lo + hi) / <span class=\"number\">2</span>\n\n    this.sort1(<span class=\"operator\">a</span>, compare, lo, <span class=\"keyword\">mid</span>)\n    this.sort1(<span class=\"operator\">a</span>, compare, <span class=\"keyword\">mid</span>+<span class=\"number\">1</span>, hi)\n    this.<span class=\"built_in\">merge</span>(<span class=\"operator\">a</span>, compare, lo, <span class=\"keyword\">mid</span>, hi)\n}\n<span class=\"comment\">\n// Sort2采用自底向上方法进行归并排序，先从子数组为1开始归并操作，逐渐递增，直到归并成完整数组为止</span><span class=\"comment\">\n// Sort中参数类型Comparable为统一的可比较接口，若为整数数组排序，则Comparable为int即可</span><span class=\"comment\">\n// Sort中参数类型Compare为配合Comparable接口的比较方法，若为整数数组排序，则Compare即满足a int &lt; a int即可</span>\nfunc (this *MergeSort) sort2(<span class=\"operator\">a</span> []Comparable, compare Compare) {\n    <span class=\"keyword\">for</span> sz := <span class=\"number\">1</span>; sz &lt; <span class=\"built_in\">len</span>(<span class=\"operator\">a</span>); sz += sz {\n        <span class=\"keyword\">for</span> lo := <span class=\"number\">0</span>; lo &lt; <span class=\"built_in\">len</span>(<span class=\"operator\">a</span>)-sz; lo += sz + sz {\n            this.<span class=\"built_in\">merge</span>(<span class=\"operator\">a</span>, compare, lo, lo+sz-<span class=\"number\">1</span>, int(math.Min(float64(lo+sz+sz-<span class=\"number\">1</span>), float64(<span class=\"built_in\">len</span>(<span class=\"operator\">a</span>)-<span class=\"number\">1</span>))))\n        }\n    }\n}\n</code></pre><p>下面我们来考虑下归并排序的效率问题。首先我们假设数组有N个元素，而N的值为2^n，所以采用归并排序的过程，可以用如下图的树状图表示：</p>\n<p><img src=\"/img/2014-12-28-0.png\" alt=\"树状图\" title=\"树状图\"></p>\n<p>图中每一个结点都表示一个merge()方法归并而成的一个数组。这棵树正好有n层。对于0到n-1之间的任意k，自顶向下的第k层有2^k个子数组，每个子数组又包含有2^(n-k)元素，所以归并操作最多需要2^(n-k)次比较。因此，每层的比较操作次数为2^n次，所以n次总共需要n<em>2^n次比较操作。又由于N=2^n，所以归并排序整个数组最多需要n</em>2^n=NlogN次比较操作。当然，每次归并操作最少需要2^(n-k)/2次比较，所以归并排序整个数组的话，最小需要NlogN/2次比较操作。综合上述分析，<strong>归并排序需要NlogN/2至NlogN次比较操作</strong>，因此其<strong>时间复杂度是线性对数型的，即O(NlogN)</strong>。</p>\n<p>可见，<strong>归并排序是适合用于大规模数据排序</strong>的算法。但不要忘了，归并排序有个明显的缺陷，即她需要申请与排序数组相同大小的数组进行归并操作，在空间利用方面并不是十分理想，因此可能<strong>不适合用于空间不宽裕的场合</strong>。</p>\n","source":"_posts/2014-12-28-0.md","raw":"---\r\ndate: 2014-12-28\r\nlayout: post\r\ntitle: 经典算法巡礼(五) -- 排序之归并排序\r\npermalink: '/2014/12-28-0.html'\r\ncategories:\r\n- 算法\r\ntags:\r\n- 排序\r\n---\r\n\r\n\r\n[归并排序](http://en.wikipedia.org/wiki/Merge_sort)是创建在**归并操作**上的一种有效排序算法。**所谓归并操作，指的是将两个已经排序的序列合并成一个序列的操作**。归并排序是[**分治思想**](http://en.wikipedia.org/wiki/Divide_and_conquer_algorithms)的典型示范。\r\n\r\n归并排序具体步骤如下：\r\n\r\n1. 申请大小等于两个已排序序列之和的空间，该空间用来存放合并后的序列；\r\n2. 设定两个指针，初始位置分别为两个已排序序列的起始位置；\r\n3. 比较两个指针所指向的元素，选择较小的元素放入合并的空间中（若进行升序排序），并移动指针到下一个位置；\r\n4. 重复步骤3直至其中某一指针到达序列尾；\r\n5. 将另一序列剩下的元素直接复制到合并序列中。\r\n\r\n用[golang](https://golang.org/)实现如下： \r\n\r\n\t// merge方法实现归并排序中的归并操作，将两个已排序数组归并操作成一个已排序数组\r\n\tfunc (this *MergeSort) merge(a []Comparable, compare Compare, lo int, mid int, hi int) {\r\n\t\ti := lo\r\n\t\tj := mid + 1\r\n\r\n\t\tarrayBak := make([]Comparable, len(a))\r\n\t\tcopy(arrayBak, a)\r\n\r\n\t\tfor k := lo; k <= hi; k++ {\r\n\t\t\tif i > mid {\r\n\t\t\t\ta[k] = arrayBak[j]\r\n\t\t\t\tj++\r\n\t\t\t} else if j > hi {\r\n\t\t\t\ta[k] = arrayBak[i]\r\n\t\t\t\ti++\r\n\t\t\t} else if this.less(arrayBak[i], arrayBak[j], compare) {\r\n\t\t\t\ta[k] = arrayBak[i]\r\n\t\t\t\ti++\r\n\t\t\t} else {\r\n\t\t\t\ta[k] = arrayBak[j]\r\n\t\t\t\tj++\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// Sort1采用自顶向下方法进行归并排序\r\n\t// Sort中参数类型Comparable为统一的可比较接口，若为整数数组排序，则Comparable为int即可\r\n\t// Sort中参数类型Compare为配合Comparable接口的比较方法，若为整数数组排序，则Compare即满足a int < a int即可\r\n\tfunc (this *MergeSort) sort1(a []Comparable, compare Compare, lo int, hi int) {\r\n\t\tif lo >= hi {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\tmid := (lo + hi) / 2\r\n\r\n\t\tthis.sort1(a, compare, lo, mid)\r\n\t\tthis.sort1(a, compare, mid+1, hi)\r\n\t\tthis.merge(a, compare, lo, mid, hi)\r\n\t}\r\n\r\n\t// Sort2采用自底向上方法进行归并排序，先从子数组为1开始归并操作，逐渐递增，直到归并成完整数组为止\r\n\t// Sort中参数类型Comparable为统一的可比较接口，若为整数数组排序，则Comparable为int即可\r\n\t// Sort中参数类型Compare为配合Comparable接口的比较方法，若为整数数组排序，则Compare即满足a int < a int即可\r\n\tfunc (this *MergeSort) sort2(a []Comparable, compare Compare) {\r\n\t\tfor sz := 1; sz < len(a); sz += sz {\r\n\t\t\tfor lo := 0; lo < len(a)-sz; lo += sz + sz {\r\n\t\t\t\tthis.merge(a, compare, lo, lo+sz-1, int(math.Min(float64(lo+sz+sz-1), float64(len(a)-1))))\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n下面我们来考虑下归并排序的效率问题。首先我们假设数组有N个元素，而N的值为2^n，所以采用归并排序的过程，可以用如下图的树状图表示：\r\n\r\n![树状图](/img/2014-12-28-0.png \"树状图\")\r\n\r\n图中每一个结点都表示一个merge()方法归并而成的一个数组。这棵树正好有n层。对于0到n-1之间的任意k，自顶向下的第k层有2^k个子数组，每个子数组又包含有2^(n-k)元素，所以归并操作最多需要2^(n-k)次比较。因此，每层的比较操作次数为2^n次，所以n次总共需要n*2^n次比较操作。又由于N=2^n，所以归并排序整个数组最多需要n*2^n=NlogN次比较操作。当然，每次归并操作最少需要2^(n-k)/2次比较，所以归并排序整个数组的话，最小需要NlogN/2次比较操作。综合上述分析，**归并排序需要NlogN/2至NlogN次比较操作**，因此其**时间复杂度是线性对数型的，即O(NlogN)**。\r\n\r\n可见，**归并排序是适合用于大规模数据排序**的算法。但不要忘了，归并排序有个明显的缺陷，即她需要申请与排序数组相同大小的数组进行归并操作，在空间利用方面并不是十分理想，因此可能**不适合用于空间不宽裕的场合**。","slug":"-2014-12-28-0-html","updated":1422085062000,"excerpt":"","_id":"trtxql5lerzvm4og","comments":true,"photos":[],"link":""},{"date":1419696000000,"layout":"post","title":"经典算法巡礼(六) -- 排序之快速排序","categories":["8jwkgptl4juxqcvd"],"tags":["64673jg048ygbdcb"],"content":"<p><a href=\"http://zh.wikipedia.org/wiki/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F\" target=\"_blank\" rel=\"external\">快速排序</a>正如她的名字，她是一种排序效率相当高的算法，而且<strong>可能是应用最广泛</strong>的排序算法了。快速排序流行的原因是她<strong>实现简单，适用于各种不同的输入数据且在一般应用中比其他排序算法都要快</strong>。不仅如此，她与<a href=\"http://codingforever.cn/2014/12-28-0.html\" target=\"_blank\" rel=\"external\">归并排序</a>不同，她<strong>只需要很小的辅助空间就可以进行排序</strong>。</p>\n<p>快速排序也是<a href=\"http://en.wikipedia.org/wiki/Divide_and_conquer_algorithms\" target=\"_blank\" rel=\"external\"><strong>分治思想</strong></a>的典型应用。她与<a href=\"http://codingforever.cn/2014/12-28-0.html\" target=\"_blank\" rel=\"external\">归并排序</a>是互补的：归并排序将数组分成两个子数组分别排序，并将有序的子数组归并以将整个数组排序；而快速排序而是当两个子数组都有序时，整个数组也就自己有序了。前者的递归调用发生在处理整个数组之前，而后者的递归调用发生在处理整个之后。</p>\n<p>快速排序最主要的操作就是patition，即<strong>切分操作</strong>。选择数组中一元素，以该元素做为基准切分元素，姑且将其称为P，切分后使P之前的所有元素都小于P(排序成递增序列)，P之后的所有元素都大于P。然后对P切分成的两个子数组分别再一次进行切分操作。重复此过程直到不能切分为止，即整个数组排序完成。</p>\n<p>那么如何选择这个切分基准元素P呢？通常是随机取数组中任意值，所以快速排序的效率是和概率相关的，但实际使用过程中排序效率还是非常可观的。具体<a href=\"https://golang.org/\" target=\"_blank\" rel=\"external\">golang</a>实现如下： </p>\n<pre><code><span class=\"comment\">// partition方法即为快速排序中重要的切分操作，以首元素做为基准，将剩余元素从两端寻找，分别找到大于（小于）基准的元素并交换，重复此过程直到剩余元素全部遍历为止</span>\nfunc (<span class=\"keyword\">this</span> *QuickSort) partition(a []Comparable, compare Compare, lo <span class=\"keyword\">int</span>, hi <span class=\"keyword\">int</span>) <span class=\"keyword\">int</span> {\n    i := lo + <span class=\"number\">1</span>\n    j := hi\n    v := a[lo]\n    <span class=\"keyword\">for</span> <span class=\"keyword\">true</span> {\n        <span class=\"keyword\">for</span> <span class=\"keyword\">this</span>.less(a[i], v, compare) == <span class=\"keyword\">true</span> {\n            <span class=\"keyword\">if</span> i == hi {\n                <span class=\"keyword\">break</span>\n            }\n            i++\n        }\n        <span class=\"keyword\">for</span> <span class=\"keyword\">this</span>.less(a[j], v, compare) == <span class=\"keyword\">false</span> {\n            <span class=\"keyword\">if</span> j == lo {\n                <span class=\"keyword\">break</span>\n            }\n            j--\n        }\n        <span class=\"keyword\">if</span> i &gt;= j {\n            <span class=\"keyword\">break</span>\n        }\n        <span class=\"keyword\">this</span>.exch(a, i, j)\n        i++\n        j--\n    }\n    <span class=\"keyword\">this</span>.exch(a, lo, j)\n\n    <span class=\"keyword\">return</span> j\n}\n\n<span class=\"comment\">// Sort中参数类型Comparable为统一的可比较接口，若为整数数组排序，则Comparable为int即可</span>\n<span class=\"comment\">// Sort中参数类型Compare为配合Comparable接口的比较方法，若为整数数组排序，则Compare即满足a int &lt; a int即可</span>\nfunc (<span class=\"keyword\">this</span> *QuickSort) <span class=\"keyword\">Sort</span>(a []Comparable, compare Compare, lo <span class=\"keyword\">int</span>, hi <span class=\"keyword\">int</span>) {\n    <span class=\"keyword\">if</span> hi &lt;= lo {\n        <span class=\"keyword\">return</span>\n    }\n\n    p := <span class=\"keyword\">this</span>.partition(a, compare, lo, hi)\n    <span class=\"keyword\">this</span>.<span class=\"keyword\">Sort</span>(a, compare, lo, p-<span class=\"number\">1</span>)\n    <span class=\"keyword\">this</span>.<span class=\"keyword\">Sort</span>(a, compare, p+<span class=\"number\">1</span>, hi)\n}\n</code></pre><p>上述实现过程在切分操作时，只是简单取数组第一个元素做为切分基准元素。如此做法，<strong>排序效率则与输入序列相关了，因此可以在排序之前shuffee数组，如此一来就与概率相关了</strong>。</p>\n<p>分析快速排序的过程，可以得到每次patition时，需要N-1次比较操作（数组元素为N的情况下），同时又可得到此patition过程需要进行logN次。因此，整个快速排序需要<strong>(N-1)logN ~ NlogN</strong>次比较操作，也就是说其<strong>时间复杂度为O(NlogN)</strong>。因此，她也是<strong>可以应用于大规模数组的排序，而且也不需要<a href=\"http://codingforever.cn/2014/12-28-0.html\" target=\"_blank\" rel=\"external\">归并排序</a>大量的额外空间，同时也没有<a href=\"http://codingforever.cn/2014/12-27-3.html\" target=\"_blank\" rel=\"external\">希尔排序</a>的不确定性</strong>。</p>\n<p>当然，其实快速排序有一种方便的改进，即可在对有大量相同元素的数组排序时，效率大大提高。她是由<a href=\"http://en.wikipedia.org/wiki/Edsger_W._Dijkstra\" target=\"_blank\" rel=\"external\">Dijkstra</a>提出的“<strong>三向切分的快速排序</strong>“。具体实现如下：</p>\n<pre><code><span class=\"comment\">// Sort方法采用”三向切分的快速排序“法进行排序</span>\nfunc (<span class=\"keyword\">this</span> *QuickSort) <span class=\"keyword\">Sort</span>(a []Comparable, compare Compare, lo <span class=\"keyword\">int</span>, hi <span class=\"keyword\">int</span>) {\n    <span class=\"keyword\">if</span> hi &lt;= lo {\n        <span class=\"keyword\">return</span>\n    }\n\n    lt := lo\n    i := lo + <span class=\"number\">1</span>\n    gt := hi\n\n    v := a[lo]\n    <span class=\"keyword\">for</span> i &lt;= gt {\n        cmp := compare(v, a[i])\n        <span class=\"keyword\">if</span> cmp &lt; <span class=\"number\">0</span> {\n            <span class=\"keyword\">this</span>.exch(a, i, gt)\n            gt--\n        } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> cmp &gt; <span class=\"number\">0</span> {\n            <span class=\"keyword\">this</span>.exch(a, i, lt)\n            i++\n            lt++\n        } <span class=\"keyword\">else</span> {\n            i++\n        }\n    }\n    <span class=\"keyword\">this</span>.<span class=\"keyword\">Sort</span>(a, compare, lo, lt-<span class=\"number\">1</span>)\n    <span class=\"keyword\">this</span>.<span class=\"keyword\">Sort</span>(a, compare, gt+<span class=\"number\">1</span>, hi)\n}\n</code></pre><p>“三向切分的快速排序”中的切分方法过程如下：  </p>\n<p>她遍历数组一次，维护一个指针lt使得a[lo..lt-1]中的元素都小于v(即切分基准元素)，一个指针gt使得a[gt+1..hi]中的元素都大于v，一个指针i使得a[lt..i-1]全部等于v，而a[i..gt]中的元素都还未确定。正如上述代码中所示，等遍历完数组后，数组就分为三部分，a[lo..lt-1]为小于v的部分，a[gt+1..hi]为大于v的部分，而a[lt..gt]则为等于v的部分。然后，对不等于v的部分数组再次切分递归，直到不能切分为止。  </p>\n<p>而<strong>如果数组中有大量相同元素时，采用”三向切分“方法就不会对相同部分再次进行重复比较，大大提高排序性能。而当没有重复元素时，”三向切分“方法又等同时原始快速排序</strong>。因此，”三向切分的快速排序“通常被用于实际场合中进行快速排序。</p>\n","source":"_posts/2014-12-28-1.md","raw":"---\r\ndate: 2014-12-28\r\nlayout: post\r\ntitle: 经典算法巡礼(六) -- 排序之快速排序\r\npermalink: '/2014/12-28-1.html'\r\ncategories:\r\n- 算法\r\ntags:\r\n- 排序\r\n---\r\n\r\n[快速排序](http://zh.wikipedia.org/wiki/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F)正如她的名字，她是一种排序效率相当高的算法，而且**可能是应用最广泛**的排序算法了。快速排序流行的原因是她**实现简单，适用于各种不同的输入数据且在一般应用中比其他排序算法都要快**。不仅如此，她与[归并排序](http://codingforever.cn/2014/12-28-0.html)不同，她**只需要很小的辅助空间就可以进行排序**。\r\n\r\n快速排序也是[**分治思想**](http://en.wikipedia.org/wiki/Divide_and_conquer_algorithms)的典型应用。她与[归并排序](http://codingforever.cn/2014/12-28-0.html)是互补的：归并排序将数组分成两个子数组分别排序，并将有序的子数组归并以将整个数组排序；而快速排序而是当两个子数组都有序时，整个数组也就自己有序了。前者的递归调用发生在处理整个数组之前，而后者的递归调用发生在处理整个之后。\r\n\r\n快速排序最主要的操作就是patition，即**切分操作**。选择数组中一元素，以该元素做为基准切分元素，姑且将其称为P，切分后使P之前的所有元素都小于P(排序成递增序列)，P之后的所有元素都大于P。然后对P切分成的两个子数组分别再一次进行切分操作。重复此过程直到不能切分为止，即整个数组排序完成。\r\n\r\n那么如何选择这个切分基准元素P呢？通常是随机取数组中任意值，所以快速排序的效率是和概率相关的，但实际使用过程中排序效率还是非常可观的。具体[golang](https://golang.org/)实现如下： \r\n\r\n\t// partition方法即为快速排序中重要的切分操作，以首元素做为基准，将剩余元素从两端寻找，分别找到大于（小于）基准的元素并交换，重复此过程直到剩余元素全部遍历为止\r\n\tfunc (this *QuickSort) partition(a []Comparable, compare Compare, lo int, hi int) int {\r\n\t\ti := lo + 1\r\n\t\tj := hi\r\n\t\tv := a[lo]\r\n\t\tfor true {\r\n\t\t\tfor this.less(a[i], v, compare) == true {\r\n\t\t\t\tif i == hi {\r\n\t\t\t\t\tbreak\r\n\t\t\t\t}\r\n\t\t\t\ti++\r\n\t\t\t}\r\n\t\t\tfor this.less(a[j], v, compare) == false {\r\n\t\t\t\tif j == lo {\r\n\t\t\t\t\tbreak\r\n\t\t\t\t}\r\n\t\t\t\tj--\r\n\t\t\t}\r\n\t\t\tif i >= j {\r\n\t\t\t\tbreak\r\n\t\t\t}\r\n\t\t\tthis.exch(a, i, j)\r\n\t\t\ti++\r\n\t\t\tj--\r\n\t\t}\r\n\t\tthis.exch(a, lo, j)\r\n\r\n\t\treturn j\r\n\t}\r\n\r\n\t// Sort中参数类型Comparable为统一的可比较接口，若为整数数组排序，则Comparable为int即可\r\n\t// Sort中参数类型Compare为配合Comparable接口的比较方法，若为整数数组排序，则Compare即满足a int < a int即可\r\n\tfunc (this *QuickSort) Sort(a []Comparable, compare Compare, lo int, hi int) {\r\n\t\tif hi <= lo {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\tp := this.partition(a, compare, lo, hi)\r\n\t\tthis.Sort(a, compare, lo, p-1)\r\n\t\tthis.Sort(a, compare, p+1, hi)\r\n\t}\r\n\r\n上述实现过程在切分操作时，只是简单取数组第一个元素做为切分基准元素。如此做法，**排序效率则与输入序列相关了，因此可以在排序之前shuffee数组，如此一来就与概率相关了**。\r\n\r\n分析快速排序的过程，可以得到每次patition时，需要N-1次比较操作（数组元素为N的情况下），同时又可得到此patition过程需要进行logN次。因此，整个快速排序需要**(N-1)logN ~ NlogN**次比较操作，也就是说其**时间复杂度为O(NlogN)**。因此，她也是**可以应用于大规模数组的排序，而且也不需要[归并排序](http://codingforever.cn/2014/12-28-0.html)大量的额外空间，同时也没有[希尔排序](http://codingforever.cn/2014/12-27-3.html)的不确定性**。\r\n\r\n当然，其实快速排序有一种方便的改进，即可在对有大量相同元素的数组排序时，效率大大提高。她是由[Dijkstra](http://en.wikipedia.org/wiki/Edsger_W._Dijkstra)提出的“**三向切分的快速排序**“。具体实现如下：\r\n\r\n\t// Sort方法采用”三向切分的快速排序“法进行排序\r\n\tfunc (this *QuickSort) Sort(a []Comparable, compare Compare, lo int, hi int) {\r\n\t\tif hi <= lo {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\tlt := lo\r\n\t\ti := lo + 1\r\n\t\tgt := hi\r\n\r\n\t\tv := a[lo]\r\n\t\tfor i <= gt {\r\n\t\t\tcmp := compare(v, a[i])\r\n\t\t\tif cmp < 0 {\r\n\t\t\t\tthis.exch(a, i, gt)\r\n\t\t\t\tgt--\r\n\t\t\t} else if cmp > 0 {\r\n\t\t\t\tthis.exch(a, i, lt)\r\n\t\t\t\ti++\r\n\t\t\t\tlt++\r\n\t\t\t} else {\r\n\t\t\t\ti++\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.Sort(a, compare, lo, lt-1)\r\n\t\tthis.Sort(a, compare, gt+1, hi)\r\n\t}\r\n\r\n\"三向切分的快速排序\"中的切分方法过程如下：  \r\n\r\n她遍历数组一次，维护一个指针lt使得a[lo..lt-1]中的元素都小于v(即切分基准元素)，一个指针gt使得a[gt+1..hi]中的元素都大于v，一个指针i使得a[lt..i-1]全部等于v，而a[i..gt]中的元素都还未确定。正如上述代码中所示，等遍历完数组后，数组就分为三部分，a[lo..lt-1]为小于v的部分，a[gt+1..hi]为大于v的部分，而a[lt..gt]则为等于v的部分。然后，对不等于v的部分数组再次切分递归，直到不能切分为止。  \r\n\r\n而**如果数组中有大量相同元素时，采用”三向切分“方法就不会对相同部分再次进行重复比较，大大提高排序性能。而当没有重复元素时，”三向切分“方法又等同时原始快速排序**。因此，”三向切分的快速排序“通常被用于实际场合中进行快速排序。\r\n\r\n\r\n\r\n\r\n\r\n","slug":"-2014-12-28-1-html","updated":1419766479000,"excerpt":"","_id":"rqsn842mcr8t2ya6","comments":true,"photos":[],"link":""},{"date":1419696000000,"layout":"post","title":"经典算法巡礼(七) -- 排序之堆排序","categories":["8jwkgptl4juxqcvd"],"tags":["64673jg048ygbdcb"],"content":"<h2 id=\"一、优先队列\">一、优先队列</h2>\n<p>很多时候，我们需要处理有序的元素，但不一定要求它们全部有序，或是不一定要一次就将它们排序。比如你可能启动了若干个定时器，那么下一次处理定时器事件只需要考虑距离现在时间最近的定时器即可，定时器触发时间无须全部有序，只需要处理优化级最高的定时器即可。</p>\n<p>这种情况下，一个合适的数据结构应该支持两种操作：<strong>删除最小元素</strong>和<strong>插入元素</strong>。而且这两种操作的效率应该在可接受范围之内。这种数据类型叫<a href=\"http://zh.wikipedia.org/wiki/%E5%84%AA%E5%85%88%E4%BD%87%E5%88%97\" target=\"_blank\" rel=\"external\"><strong>优先队列</strong></a>。</p>\n<h2 id=\"二、堆的定义\">二、堆的定义</h2>\n<p><a href=\"http://zh.wikipedia.org/zh/%E4%BA%8C%E5%8F%89%E5%A0%86\" target=\"_blank\" rel=\"external\"><strong>二叉堆</strong></a>能够很好的实现<strong>优先队列</strong>的基本操作。在二叉堆中，每个元素都要保证大于等于它的孩子结点。相应的，这些孩子结点同样要大于等于它们的孩子结点，以此类推。当然，这样的二叉堆又称<strong>最大堆</strong>。与最大堆类似，若每个元素均小于等于它的孩子结点，则称<strong>最小堆</strong>。之前提到的定时器触发问题，它所适合的数据结构应该为最小堆。</p>\n<h2 id=\"三、二叉堆表示法\">三、二叉堆表示法</h2>\n<p>二叉堆是<a href=\"http://zh.wikipedia.org/zh/%E4%BA%8C%E5%8F%89%E6%A0%91\" target=\"_blank\" rel=\"external\">完全二叉树</a>，因此可以只用数组来表示二叉堆。具体方法是将二叉树的结点按照层级顺序放入数组中，根结点放在位置1，它的子结点放在位置2和3，而子结点的子结点则放在位置4，5，6，7，以此类推。而事实上，很容易就可以在数组中表示二叉树，即位置k的结点，它的子结点在数组中的位置则为2k和2k+1。</p>\n<h2 id=\"四、堆的操作\">四、堆的操作</h2>\n<p>在堆的有序化过程中，我们会碰到以下两种情况：</p>\n<ul>\n<li>当某个结点的优先级上升(或者在堆底中加入一个新的元素)时，我们需要<strong>由下至上</strong>恢复堆的有序性；</li>\n<li>当某个结点的优先级下降(比如根结点被替换为一个新的元素)时，我们需要<strong>由上至下</strong>恢复堆的有序列性。</li>\n</ul>\n<p>为了解决以上两个问题，就有了下面将要描述的<strong>上浮(swin)</strong>和<strong>下沉(sink)</strong>操作。</p>\n<p><strong>由下至上的有序化（上浮）</strong></p>\n<p>由于某结点的变化，造成了该结点比它的父结点更大（最大堆情况），从而影响了堆的有序性。比如堆中有新的元素加入堆底，而该新加入元素又比它的父结点更大，则需要将其与它的父结点交换位置，从而恢复它及其父结点的有序性。当然，这个过程会不停重复，直至堆中元素全部有序为止。整个过程就是之前所说的由下至上的上浮过程。具体<a href=\"https://golang.org/\" target=\"_blank\" rel=\"external\">golang</a>可参考如下：</p>\n<pre><code>func (<span class=\"keyword\">this</span> *HeapPQ) swim(idx <span class=\"keyword\">int</span>) {\n    <span class=\"keyword\">for</span> idx &gt; <span class=\"number\">1</span> &amp;&amp; <span class=\"keyword\">this</span>.less(idx/<span class=\"number\">2</span>, idx) == <span class=\"keyword\">true</span> {\n        <span class=\"keyword\">this</span>.exch(idx/<span class=\"number\">2</span>, idx)\n        idx /= <span class=\"number\">2</span>\n    }\n}\n</code></pre><p><strong>由上至下的有序化（下沉）</strong>  </p>\n<p>由于某结点的变化，造成了该结点比它的子结点更小（最大堆情况），从而影响了堆的有序性。比如删除堆中根结点的元素，并原先在堆底的元素放置于根结点位置。事实上这就是最大堆中取最大元素的操作。当然，为了保持堆的有序性，则对新的根结点进行下沉操作，若根结点比它的子结点中的任意一个小，则将根结点与此结点交换，同时将该子结点进行重复操作，直到堆恢复有序性为止。整个过程就是之前的说的由上至下的下沉过程。具体<a href=\"https://golang.org/\" target=\"_blank\" rel=\"external\">golang</a>可参考如下：</p>\n<pre><code>func (<span class=\"keyword\">this</span> *HeapPQ) sink(idx <span class=\"keyword\">int</span>) {\n    <span class=\"keyword\">for</span> <span class=\"number\">2</span>*idx &lt;= <span class=\"keyword\">this</span>.<span class=\"keyword\">Size</span>() {\n        child := <span class=\"number\">2</span> * idx\n        <span class=\"keyword\">if</span> child &lt; <span class=\"keyword\">this</span>.<span class=\"keyword\">Size</span>() &amp;&amp; <span class=\"keyword\">this</span>.less(child, child+<span class=\"number\">1</span>) == <span class=\"keyword\">true</span> {\n            child++\n        }\n        <span class=\"keyword\">if</span> <span class=\"keyword\">this</span>.less(idx, child) != <span class=\"keyword\">true</span> {\n            <span class=\"keyword\">break</span>\n        }\n        <span class=\"keyword\">this</span>.exch(idx, child)\n        idx = child\n    }\n}\n</code></pre><h2 id=\"五、堆排序\">五、堆排序</h2>\n<p>堆排序可以分为两个阶段：</p>\n<ul>\n<li><strong>堆的构造阶段</strong></li>\n<li><strong>下沉排序阶段</strong></li>\n</ul>\n<p>构造一个堆，可以用以下两种方法进行。第一种，从左至右遍历数组，用swin()保证扫描指针左侧的所有元素已经是一棵堆有序的完全树即可。第二种，事实上是更聪明更高效的方法。就是<strong>从右至左用sink()函数构造子堆</strong>。开始时我们只需要扫描数组中的一半元素，所以是更高效的方法。</p>\n<p>第二个阶段，即下沉排序阶段，我们可以将堆中最大元素删除，然后放入堆缩小后数组空出的位置。</p>\n<p>整个过程用代码表述如下：</p>\n<pre><code><span class=\"keyword\">func</span> (this *HeapSort) sink(a []Comparable, i <span class=\"typename\">int</span>, j <span class=\"typename\">int</span>, compare Compare) {\n    b := a[i:j]\n    b = <span class=\"built_in\">append</span>(<span class=\"built_in\">make</span>([]Comparable,<span class=\"number\"> 1</span>), b...)\n    size := <span class=\"built_in\">len</span>(b) -<span class=\"number\"> 1</span>\n\n    <span class=\"keyword\">func</span>(idx <span class=\"typename\">int</span>) {\n        <span class=\"keyword\">for</span><span class=\"number\"> 2</span>*idx &lt;= size {\n            child :=<span class=\"number\"> 2</span> * idx\n            <span class=\"comment\">// fmt.Println(idx, child, size)</span>\n            <span class=\"keyword\">if</span> child &lt; size &amp;&amp; compare(b[child], b[child<span class=\"number\">+1</span>]) &lt;<span class=\"number\"> 0</span> {\n                child++\n            }\n            <span class=\"keyword\">if</span> compare(b[idx], b[child]) &lt;<span class=\"number\"> 0</span> {\n                this.exch(b, idx, child)\n                idx = child\n                <span class=\"keyword\">continue</span>\n            }\n            <span class=\"keyword\">break</span>\n        }\n    }<span class=\"number\">(1</span>)\n\n    <span class=\"built_in\">copy</span>(a[i:j], b<span class=\"number\">[1</span>:])\n}\n\n<span class=\"comment\">// Sort中参数类型Comparable为统一的可比较接口，若为整数数组排序，则Comparable为int即可</span>\n<span class=\"comment\">// Sort中参数类型Compare为配合Comparable接口的比较方法，若为整数数组排序，则Compare即满足a int &lt; a int即可</span>\n<span class=\"keyword\">func</span> (this *HeapSort) Sort(a []Comparable, compare Compare) {\n    n := <span class=\"built_in\">len</span>(a)\n\n    <span class=\"comment\">// 堆构造</span>\n    <span class=\"keyword\">for</span> i := n /<span class=\"number\"> 2</span>; i &gt;=<span class=\"number\"> 0</span>; i-- {\n        this.sink(a, i, n, compare)\n    }\n\n    <span class=\"comment\">// 堆排序的下沉阶段</span>\n    <span class=\"keyword\">for</span> i := n -<span class=\"number\"> 1</span>; i &gt;<span class=\"number\"> 1</span>; {\n        this.exch(a,<span class=\"number\"> 0</span>, i)\n        i--\n        this.sink(a,<span class=\"number\"> 0</span>, i, compare)\n    }\n}\n</code></pre><p>至于堆排序的效率，在sink()函数中，比较操作最多进行2logN次，所以排序整个数组最多需要N<em>2logN次比较操作，因此<em>*堆排序的时间复杂度为O(NlogN)</em></em>，所以可以用于大规模数据的排序。</p>\n<p><strong>堆排序是能够同时最优地利用空间和时间的方法，即使在最坏的情况下，它也能保证使用~2NlogN次比较和恒定的额外空间</strong>。但现代系统的许多应用很少使用它，因为<strong>堆排序无法有效利用缓存</strong>。数组元素很少和相邻的其他元素进行比较，因此缓存未命中的次数要远远高于大多数比较都在相邻元素间进行的算法，如快速排序，归并排序，甚至是希尔排序（希尔排序算是没有多少相信元素间的比较的算法了）。</p>\n<p>但是，<strong>用堆实现优先队列在现代应用程序中却起着重要的作用，因为它能在插入操作和删除最大元素操作保证对数级别的运行时间（logN）</strong>。</p>\n","source":"_posts/2014-12-28-2.md","raw":"---\r\ndate: 2014-12-28\r\nlayout: post\r\ntitle: 经典算法巡礼(七) -- 排序之堆排序\r\npermalink: '/2014/12-28-2.html'\r\ncategories:\r\n- 算法\r\ntags:\r\n- 排序\r\n---\r\n\r\n一、优先队列\r\n-----------\r\n很多时候，我们需要处理有序的元素，但不一定要求它们全部有序，或是不一定要一次就将它们排序。比如你可能启动了若干个定时器，那么下一次处理定时器事件只需要考虑距离现在时间最近的定时器即可，定时器触发时间无须全部有序，只需要处理优化级最高的定时器即可。\r\n\r\n这种情况下，一个合适的数据结构应该支持两种操作：**删除最小元素**和**插入元素**。而且这两种操作的效率应该在可接受范围之内。这种数据类型叫[**优先队列**](http://zh.wikipedia.org/wiki/%E5%84%AA%E5%85%88%E4%BD%87%E5%88%97)。\r\n\r\n二、堆的定义\r\n-----------\r\n[**二叉堆**](http://zh.wikipedia.org/zh/%E4%BA%8C%E5%8F%89%E5%A0%86)能够很好的实现**优先队列**的基本操作。在二叉堆中，每个元素都要保证大于等于它的孩子结点。相应的，这些孩子结点同样要大于等于它们的孩子结点，以此类推。当然，这样的二叉堆又称**最大堆**。与最大堆类似，若每个元素均小于等于它的孩子结点，则称**最小堆**。之前提到的定时器触发问题，它所适合的数据结构应该为最小堆。\r\n\r\n三、二叉堆表示法\r\n-----------\r\n二叉堆是[完全二叉树](http://zh.wikipedia.org/zh/%E4%BA%8C%E5%8F%89%E6%A0%91)，因此可以只用数组来表示二叉堆。具体方法是将二叉树的结点按照层级顺序放入数组中，根结点放在位置1，它的子结点放在位置2和3，而子结点的子结点则放在位置4，5，6，7，以此类推。而事实上，很容易就可以在数组中表示二叉树，即位置k的结点，它的子结点在数组中的位置则为2k和2k+1。\r\n\r\n四、堆的操作\r\n------------\r\n在堆的有序化过程中，我们会碰到以下两种情况：\r\n\r\n* 当某个结点的优先级上升(或者在堆底中加入一个新的元素)时，我们需要**由下至上**恢复堆的有序性；\r\n* 当某个结点的优先级下降(比如根结点被替换为一个新的元素)时，我们需要**由上至下**恢复堆的有序列性。\r\n\r\n为了解决以上两个问题，就有了下面将要描述的**上浮(swin)**和**下沉(sink)**操作。\r\n\r\n**由下至上的有序化（上浮）**\r\n\r\n由于某结点的变化，造成了该结点比它的父结点更大（最大堆情况），从而影响了堆的有序性。比如堆中有新的元素加入堆底，而该新加入元素又比它的父结点更大，则需要将其与它的父结点交换位置，从而恢复它及其父结点的有序性。当然，这个过程会不停重复，直至堆中元素全部有序为止。整个过程就是之前所说的由下至上的上浮过程。具体[golang](https://golang.org/)可参考如下：\r\n\r\n\tfunc (this *HeapPQ) swim(idx int) {\r\n\t\tfor idx > 1 && this.less(idx/2, idx) == true {\r\n\t\t\tthis.exch(idx/2, idx)\r\n\t\t\tidx /= 2\r\n\t\t}\r\n\t}\r\n\r\n**由上至下的有序化（下沉）**  \r\n\r\n由于某结点的变化，造成了该结点比它的子结点更小（最大堆情况），从而影响了堆的有序性。比如删除堆中根结点的元素，并原先在堆底的元素放置于根结点位置。事实上这就是最大堆中取最大元素的操作。当然，为了保持堆的有序性，则对新的根结点进行下沉操作，若根结点比它的子结点中的任意一个小，则将根结点与此结点交换，同时将该子结点进行重复操作，直到堆恢复有序性为止。整个过程就是之前的说的由上至下的下沉过程。具体[golang](https://golang.org/)可参考如下：\r\n\r\n\tfunc (this *HeapPQ) sink(idx int) {\r\n\t\tfor 2*idx <= this.Size() {\r\n\t\t\tchild := 2 * idx\r\n\t\t\tif child < this.Size() && this.less(child, child+1) == true {\r\n\t\t\t\tchild++\r\n\t\t\t}\r\n\t\t\tif this.less(idx, child) != true {\r\n\t\t\t\tbreak\r\n\t\t\t}\r\n\t\t\tthis.exch(idx, child)\r\n\t\t\tidx = child\r\n\t\t}\r\n\t}\r\n\r\n五、堆排序\r\n------------\r\n堆排序可以分为两个阶段：\r\n\r\n* **堆的构造阶段**\r\n* **下沉排序阶段**\r\n\r\n构造一个堆，可以用以下两种方法进行。第一种，从左至右遍历数组，用swin()保证扫描指针左侧的所有元素已经是一棵堆有序的完全树即可。第二种，事实上是更聪明更高效的方法。就是**从右至左用sink()函数构造子堆**。开始时我们只需要扫描数组中的一半元素，所以是更高效的方法。\r\n\r\n第二个阶段，即下沉排序阶段，我们可以将堆中最大元素删除，然后放入堆缩小后数组空出的位置。\r\n\r\n整个过程用代码表述如下：\r\n\r\n\tfunc (this *HeapSort) sink(a []Comparable, i int, j int, compare Compare) {\r\n\t\tb := a[i:j]\r\n\t\tb = append(make([]Comparable, 1), b...)\r\n\t\tsize := len(b) - 1\r\n\r\n\t\tfunc(idx int) {\r\n\t\t\tfor 2*idx <= size {\r\n\t\t\t\tchild := 2 * idx\r\n\t\t\t\t// fmt.Println(idx, child, size)\r\n\t\t\t\tif child < size && compare(b[child], b[child+1]) < 0 {\r\n\t\t\t\t\tchild++\r\n\t\t\t\t}\r\n\t\t\t\tif compare(b[idx], b[child]) < 0 {\r\n\t\t\t\t\tthis.exch(b, idx, child)\r\n\t\t\t\t\tidx = child\r\n\t\t\t\t\tcontinue\r\n\t\t\t\t}\r\n\t\t\t\tbreak\r\n\t\t\t}\r\n\t\t}(1)\r\n\r\n\t\tcopy(a[i:j], b[1:])\r\n\t}\r\n\r\n\t// Sort中参数类型Comparable为统一的可比较接口，若为整数数组排序，则Comparable为int即可\r\n\t// Sort中参数类型Compare为配合Comparable接口的比较方法，若为整数数组排序，则Compare即满足a int < a int即可\r\n\tfunc (this *HeapSort) Sort(a []Comparable, compare Compare) {\r\n\t\tn := len(a)\r\n\r\n\t\t// 堆构造\r\n\t\tfor i := n / 2; i >= 0; i-- {\r\n\t\t\tthis.sink(a, i, n, compare)\r\n\t\t}\r\n\r\n\t\t// 堆排序的下沉阶段\r\n\t\tfor i := n - 1; i > 1; {\r\n\t\t\tthis.exch(a, 0, i)\r\n\t\t\ti--\r\n\t\t\tthis.sink(a, 0, i, compare)\r\n\t\t}\r\n\t}\r\n\r\n至于堆排序的效率，在sink()函数中，比较操作最多进行2logN次，所以排序整个数组最多需要N*2logN次比较操作，因此**堆排序的时间复杂度为O(NlogN)**，所以可以用于大规模数据的排序。\r\n\r\n**堆排序是能够同时最优地利用空间和时间的方法，即使在最坏的情况下，它也能保证使用~2NlogN次比较和恒定的额外空间**。但现代系统的许多应用很少使用它，因为**堆排序无法有效利用缓存**。数组元素很少和相邻的其他元素进行比较，因此缓存未命中的次数要远远高于大多数比较都在相邻元素间进行的算法，如快速排序，归并排序，甚至是希尔排序（希尔排序算是没有多少相信元素间的比较的算法了）。\r\n\r\n但是，**用堆实现优先队列在现代应用程序中却起着重要的作用，因为它能在插入操作和删除最大元素操作保证对数级别的运行时间（logN）**。\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","slug":"-2014-12-28-2-html","updated":1419774781000,"excerpt":"","_id":"veaufuijauraob65","comments":true,"photos":[],"link":""},{"date":1421856000000,"layout":"post","title":"构建高性能服务器 -- 指标篇","categories":["35dfvdhzm65go8n5"],"tags":["896a48ftk42dc3bz"],"content":"<h1 id=\"理想与现实\">理想与现实</h1>\n<p>人们总是希望花最少的钱，办最多的事。对于服务器的构建也是如此，我们总是希望花最少的人力，最少的硬件设备条件，撑起最大的并发。当然理想总是那么的丰满，现实总是那么的骨感。虽说如此，但是我们不能没有理想，万一实现了呢？所以我们还是怀着敬畏的心，在构建高性能服务器的征途上奋力前行。</p>\n<hr>\n<h1 id=\"性能指标_\">性能指标 </h1>\n<p>服务器的性能指标很多，而且<strong>相互之间还有着关联</strong>。</p>\n<h2 id=\"1_吞吐率_\">1 吞吐率    </h2>\n<p>如何判定服务器的性能状况呢？通常我们采用吞吐率来量化这个指标。所谓吞吐率，就是单位时间内服务器处理的请求数。注意，吞吐率有时候还用于描述其他指标，如单位时间内的通信数据量等。</p>\n<p>当然，对于量化服务器性能这个指标，我们牢记，<strong>吞吐率就是单位时间内服务器处理的请求数，单位是reqs/s，有时也作rps</strong>，别无他意。</p>\n<h2 id=\"2_CPU使用率，内存使用率，I/O_Wait率_\">2 CPU使用率，内存使用率，I/O Wait率  </h2>\n<p>当然，服务器进程的CPU使用率，内存使用率，I/O Wait率也同样是评价服务器性能状况的重要指标。<strong>当CPU使用率较低，即CPU未跑满时（这里均是在压测情况下），说明服务器的瓶颈不在CPU上。同样，当内存使用率不高时，则说明服务器的瓶颈不在内存不够上</strong>。而至于I/O Wait率则不能简单的评价了。I/O Wait，它是指CPU空闲并且等待I/O操作完成的时间比例。但是，I/O Wait往往不能真实地代表I/O操作的情况或者工作量，它的设计出发点是用来衡量CPU性能的。假设有一任务需要花费10毫秒的I/O操作时间和10毫秒的CPU时间，那么I/O Wait率则为50%，这时并不意味着I/O操作的繁忙程度为50%。同样，I/O Wait为0%时，I/O操作也可能很繁忙。所以我们如果关心服务器的I/O情况的话，可以进行磁盘I/O测试或者查看网络I/O流量等。事实上，<strong>从I/O Wait率上，我们可以猜测服务器进程是I/O密集型的还是CPU密集型的</strong>。</p>\n<h2 id=\"3_系统负载\">3 系统负载</h2>\n<p>在进程调度器维护的运行队列中，任何时刻至少存在一个进程，那就是正在运行的进程。而当运行队列中有不止一个进程的时候，就说明此时CPU比较忙碌，其他进程还在等待正在运行的进程释放CPU的执行权限。</p>\n<p>所以系统负载也是影响服务器性能的指标之一。<strong>系统负载，即当然系统中等待CPU处理的进程数</strong>，所以系统负载越高，服务器进程得到CPU时间片愈发困难，从而影响服务器性能的下降。</p>\n<h2 id=\"4_进程上下文切换\">4 进程上下文切换</h2>\n<p>我们知道，操作系统中运行着不止一个进程，而进程数通常又是远远大于CPU核心数。所以进程不得不面对一个事实：<strong>轮流使用CPU进行运算</strong>。而当进程之间轮流占有CPU资源时，就会出现CPU上下文切换的过程，理所当然，这个过程不是免费的，也具有一定的开销。</p>\n<p>所以服务器进程上下文切换也会影响服务器的性能。<strong>当服务器CPU上下文切换频繁时，切换上下文的消耗则不能忽视</strong>。所以，适时查看服务器进程上下文切换频率也同样有助于构建高性能的服务器。</p>\n<h2 id=\"5_系统调用数\">5 系统调用数</h2>\n<p><strong>进程有用户态和内核态两种运行模式</strong>，进程可以在这两种运行模式之间切换。进程通常运行在用户态下，而进行需要对硬件外设进行操作时，如读取硬盘文件，发送网络数据等，进程就需要切换至内核态运行。</p>\n<p><strong>事实上这两种模式的切换对高级语言开发者来说是透明的，开发者只需要在需要的时候调用系统调用即可</strong>。内核提供了一系列系统调用函数，如read(), send()等。所以<strong>系统调用数从另一方面反应了用户态和内核态之间的切换数</strong>。</p>\n<p>当然，用户态和内核态之间的切换也是需要开销的，所以构建高性能服务器的过程中，对系统调用数的统计亦不能忽视。</p>\n<hr>\n<h1 id=\"如何测试\">如何测试</h1>\n<h2 id=\"1_吞吐率\">1 吞吐率</h2>\n<p>通常，我们关心的是服务器的最大吞吐率，即每秒最多能处理多少个请求，事实上就是平常我们所说的服务器压力测试。当然，压力测试工具有好多种，如<a href=\"http://en.wikipedia.org/wiki/Apache_JMeter\" target=\"_blank\" rel=\"external\">JMeter</a>，<a href=\"http://en.wikipedia.org/wiki/HP_LoadRunner\" target=\"_blank\" rel=\"external\">LoadRunner</a>等。当然，还有Apache附带的<a href=\"http://en.wikipedia.org/wiki/ApacheBench\" target=\"_blank\" rel=\"external\">ab</a>工具。下面，我们以ab为例，简单测试下百度首页的情况。</p>\n<pre><code><span class=\"keyword\">ab</span> -c10 -n100 www.baidu.<span class=\"keyword\">com</span>\n</code></pre><p>相应的结果如下（部分）：</p>\n<pre><code>Concurrency Level:      <span class=\"number\">10</span>\nTime taken <span class=\"keyword\">for</span> tests:   <span class=\"number\">9.031</span> <span class=\"built_in\">seconds</span>\nComplete requests:      <span class=\"number\">100</span>\nFailed requests:        <span class=\"number\">97</span>\n   (Connect: <span class=\"number\">0</span>, Receive: <span class=\"number\">0</span>, Length: <span class=\"number\">97</span>, Exceptions: <span class=\"number\">0</span>)\nTotal transferred:      <span class=\"number\">8730133</span> <span class=\"keyword\">bytes</span>\nHTML transferred:       <span class=\"number\">8645328</span> <span class=\"keyword\">bytes</span>\nRequests per <span class=\"keyword\">second</span>:    <span class=\"number\">11.07</span> [<span class=\"comment\">#/sec] (mean)</span>\nTime per request:       <span class=\"number\">903.139</span> [ms] (mean)\nTime per request:       <span class=\"number\">90.314</span> [ms] (mean, across all concurrent requests)\nTransfer rate:          <span class=\"number\">943.99</span> [Kbytes/<span class=\"built_in\">sec</span>] received\n</code></pre><p>从上述测试中可以得到，我们对百度首页利用ab进行简单的压力测试（总共100次请求且并发数为10）总共花了9.031秒，那平均每个请求处理时间为90.314毫秒，但是由于并发数为10，所以每个用户的平均等待时间为903.139毫秒。当然，我们这里不评价百度首页的性能情况。</p>\n<h2 id=\"2_CPU使用率，内存使用率，I/O_Wait率\">2 CPU使用率，内存使用率，I/O Wait率</h2>\n<p>我们查看服务器进程的CPU使用率，内存使用率，I/O Wait率可以直接使用linux的<strong>top命令</strong>，结果如下所示：</p>\n<pre><code>top - <span class=\"number\">21</span>:<span class=\"number\">47</span>:<span class=\"number\">41</span> <span class=\"preprocessor\">up</span> <span class=\"number\">50</span> min,  <span class=\"number\">3</span> users,  load average: <span class=\"number\">0.01</span>, <span class=\"number\">0.02</span>, <span class=\"number\">0.05</span>\n<span class=\"label\">Tasks:</span> <span class=\"number\">379</span> total,   <span class=\"number\">1</span> running, <span class=\"number\">378</span> sleeping,   <span class=\"number\">0</span> stopped,   <span class=\"number\">0</span> zombie\n%<span class=\"built_in\">Cpu</span>(s):  <span class=\"number\">0.3</span> us,  <span class=\"number\">0.3</span> sy,  <span class=\"number\">0.0</span> ni, <span class=\"number\">99.3</span> id,  <span class=\"number\">0.0</span> wa,  <span class=\"number\">0.0</span> hi,  <span class=\"number\">0.0</span> <span class=\"literal\">si</span>,  <span class=\"number\">0.0</span> <span class=\"literal\">st</span>\nKiB Mem:   <span class=\"number\">2042180</span> total,  <span class=\"number\">1025404</span> used,  <span class=\"number\">1016776</span> free,    <span class=\"number\">48868</span> buffers\nKiB Swap:   <span class=\"number\">521212</span> total,        <span class=\"number\">0</span> used,   <span class=\"number\">521212</span> free.   <span class=\"number\">501296</span> cached Mem\n\n  PID USER      PR  NI    VIRT    RES    <span class=\"keyword\">SHR</span> S  %<span class=\"built_in\">CPU</span> %MEM     TIME+ COMMAND\n <span class=\"number\">2190</span> zhujief+  <span class=\"number\">20</span>   <span class=\"number\">0</span> <span class=\"number\">1171408</span>  <span class=\"number\">98036</span>  <span class=\"number\">63920</span> S   <span class=\"number\">0.7</span>  <span class=\"number\">4.8</span>   <span class=\"number\">0</span>:<span class=\"number\">31.79</span> compiz\n  <span class=\"number\">177</span> root      <span class=\"number\">20</span>   <span class=\"number\">0</span>       <span class=\"number\">0</span>      <span class=\"number\">0</span>      <span class=\"number\">0</span> S   <span class=\"number\">0.3</span>  <span class=\"number\">0.0</span>   <span class=\"number\">0</span>:<span class=\"number\">03.20</span> kworker/<span class=\"number\">1</span>:<span class=\"number\">1</span>\n <span class=\"number\">1436</span> root      <span class=\"number\">20</span>   <span class=\"number\">0</span>  <span class=\"number\">319448</span>  <span class=\"number\">62368</span>  <span class=\"number\">22940</span> S   <span class=\"number\">0.3</span>  <span class=\"number\">3.1</span>   <span class=\"number\">0</span>:<span class=\"number\">14.96</span> Xorg\n</code></pre><p>从top命令的结果中可以得到诸多有用的信息，如当前compiz进程的CPU使用率为0.7%，内存使用率为4.8%，具体使用为98036Kb物理内存。同样也可以看到I/O Wait率为0.0%，因为当前机器并没有跑任何I/O较为密集的程序。另外，iostat命令也可以查看I/O Wait情况。</p>\n<h2 id=\"3_系统负载-1\">3 系统负载</h2>\n<p>通过<strong>查看/proc/loadavg</strong>文件内容，可以了解到当前运行队列的情况，即系统负载情况。运行如下命令:</p>\n<pre><code>cat /<span class=\"keyword\">proc</span>/loadavg\n</code></pre><p>得到如下：</p>\n<pre><code>0.00 0.01 0.05 1/512 5082\n</code></pre><p>即在过去1分钟，5分钟，15分钟内平均系统负载为0.00，0.01，0.05，即平均分别有0.00，0.01，0.05个进程正在等待。而1/512表示当前总共有512个进程，但是当前运行队列中只有1个进程。最右边的5082为最后创建的进程的进程ID。</p>\n<h2 id=\"4_进程上下文切换-1\">4 进程上下文切换</h2>\n<p>利用<a href=\"http://nmon.sourceforge.net/pmwiki.php\" target=\"_blank\" rel=\"external\">nmon</a>工具可以查看进程上下文切换情况。</p>\n<pre><code>RunQueue         <span class=\"number\">1</span>       Load Average    CPU use since boot time              \nContextSwitch    <span class=\"number\">168.3</span>     <span class=\"number\">1</span> mins  <span class=\"number\">0</span>. <span class=\"number\">00</span>   Uptime <span class=\"variable\">Days=</span>  <span class=\"number\">0</span> <span class=\"variable\">Hours=</span> <span class=\"number\">1</span> <span class=\"variable\">Mins=</span><span class=\"number\">59</span>   \nForks             <span class=\"number\">0.0</span>        <span class=\"number\">5</span> mins  <span class=\"number\">0.02</span>    Idle   <span class=\"variable\">Days=</span>  <span class=\"number\">0</span> <span class=\"variable\">Hours=</span> <span class=\"number\">3</span> <span class=\"variable\">Mins=</span><span class=\"number\">53</span>   \nInterrupts         <span class=\"number\">70.9</span>   <span class=\"number\">15</span> mins  <span class=\"number\">0.05</span>    Average CPU <span class=\"variable\">use=</span>-<span class=\"number\">95.54</span>%           \n</code></pre><p>从上面的结果可以看到，当前系统上下文切换速度为168.3/s。</p>\n<h2 id=\"5_系统调用数-1\">5 系统调用数</h2>\n<p>同样，在linux下我们可以利用相关工具查看进程的系统调用情况 — <a href=\"http://linux.die.net/man/1/strace\" target=\"_blank\" rel=\"external\">strace</a>。截取小段结果如下：</p>\n<pre><code><span class=\"function\"><span class=\"title\">recvmsg</span><span class=\"params\">(<span class=\"number\">5</span>, <span class=\"number\">0</span>x7fffe94c5540, <span class=\"number\">0</span>)</span>           = -1 EAGAIN <span class=\"params\">(<span class=\"variable\">Resource</span> temporarily unavailable)</span>\n<span class=\"title\">recvmsg</span><span class=\"params\">(<span class=\"number\">5</span>, <span class=\"number\">0</span>x7fffe94c5540, <span class=\"number\">0</span>)</span>           = -1 EAGAIN <span class=\"params\">(<span class=\"variable\">Resource</span> temporarily unavailable)</span>\n<span class=\"title\">poll</span><span class=\"params\">([<span class=\"tuple\">{fd=<span class=\"number\">5</span>, events=<span class=\"variable\">POLLIN</span>|<span class=\"variable\">POLLOUT</span>}</span>], <span class=\"number\">1</span>, <span class=\"number\">4294967295</span>)</span> = 1 <span class=\"params\">([<span class=\"tuple\">{fd=<span class=\"number\">5</span>, revents=<span class=\"variable\">POLLOUT</span>}</span>])</span>\n<span class=\"title\">writev</span><span class=\"params\">(<span class=\"number\">5</span>, [<span class=\"tuple\">{<span class=\"string\">\"\\213\\n\\2\\0\\327`\\340\\0\"</span>, <span class=\"number\">8</span>}</span>, <span class=\"tuple\">{<span class=\"variable\">NULL</span>, <span class=\"number\">0</span>}</span>, <span class=\"tuple\">{<span class=\"string\">\"\"</span>, <span class=\"number\">0</span>}</span>], <span class=\"number\">3</span>)</span> = 8</span>\n</code></pre><p>很明显，在截取的结果中，进程分别进行了recvmsg, poll, writev等系统调用，当然也就进行了用户态和内核态的切换。</p>\n","source":"_posts/2015-01-22-0.md","raw":"---\r\ndate: 2015-01-22\r\nlayout: post\r\ntitle: 构建高性能服务器 -- 指标篇\r\npermalink: '/2015/01-22-0.html'\r\ncategories:\r\n- 服务器编程\r\ntags:\r\n- 性能\r\n---\r\n\r\n理想与现实\r\n============\r\n人们总是希望花最少的钱，办最多的事。对于服务器的构建也是如此，我们总是希望花最少的人力，最少的硬件设备条件，撑起最大的并发。当然理想总是那么的丰满，现实总是那么的骨感。虽说如此，但是我们不能没有理想，万一实现了呢？所以我们还是怀着敬畏的心，在构建高性能服务器的征途上奋力前行。\r\n\r\n----------\r\n\r\n性能指标 \r\n============\r\n\r\n服务器的性能指标很多，而且**相互之间还有着关联**。\r\n\r\n1 吞吐率    \r\n--------\r\n\r\n如何判定服务器的性能状况呢？通常我们采用吞吐率来量化这个指标。所谓吞吐率，就是单位时间内服务器处理的请求数。注意，吞吐率有时候还用于描述其他指标，如单位时间内的通信数据量等。\r\n\r\n当然，对于量化服务器性能这个指标，我们牢记，**吞吐率就是单位时间内服务器处理的请求数，单位是reqs/s，有时也作rps**，别无他意。\r\n\r\n2 CPU使用率，内存使用率，I/O Wait率  \r\n----------\r\n\r\n当然，服务器进程的CPU使用率，内存使用率，I/O Wait率也同样是评价服务器性能状况的重要指标。**当CPU使用率较低，即CPU未跑满时（这里均是在压测情况下），说明服务器的瓶颈不在CPU上。同样，当内存使用率不高时，则说明服务器的瓶颈不在内存不够上**。而至于I/O Wait率则不能简单的评价了。I/O Wait，它是指CPU空闲并且等待I/O操作完成的时间比例。但是，I/O Wait往往不能真实地代表I/O操作的情况或者工作量，它的设计出发点是用来衡量CPU性能的。假设有一任务需要花费10毫秒的I/O操作时间和10毫秒的CPU时间，那么I/O Wait率则为50%，这时并不意味着I/O操作的繁忙程度为50%。同样，I/O Wait为0%时，I/O操作也可能很繁忙。所以我们如果关心服务器的I/O情况的话，可以进行磁盘I/O测试或者查看网络I/O流量等。事实上，**从I/O Wait率上，我们可以猜测服务器进程是I/O密集型的还是CPU密集型的**。\r\n\r\n3 系统负载\r\n-----------\r\n在进程调度器维护的运行队列中，任何时刻至少存在一个进程，那就是正在运行的进程。而当运行队列中有不止一个进程的时候，就说明此时CPU比较忙碌，其他进程还在等待正在运行的进程释放CPU的执行权限。\r\n\r\n所以系统负载也是影响服务器性能的指标之一。**系统负载，即当然系统中等待CPU处理的进程数**，所以系统负载越高，服务器进程得到CPU时间片愈发困难，从而影响服务器性能的下降。\r\n\r\n4 进程上下文切换\r\n----------\r\n我们知道，操作系统中运行着不止一个进程，而进程数通常又是远远大于CPU核心数。所以进程不得不面对一个事实：**轮流使用CPU进行运算**。而当进程之间轮流占有CPU资源时，就会出现CPU上下文切换的过程，理所当然，这个过程不是免费的，也具有一定的开销。\r\n\r\n所以服务器进程上下文切换也会影响服务器的性能。**当服务器CPU上下文切换频繁时，切换上下文的消耗则不能忽视**。所以，适时查看服务器进程上下文切换频率也同样有助于构建高性能的服务器。\r\n\r\n5 系统调用数\r\n----------\r\n**进程有用户态和内核态两种运行模式**，进程可以在这两种运行模式之间切换。进程通常运行在用户态下，而进行需要对硬件外设进行操作时，如读取硬盘文件，发送网络数据等，进程就需要切换至内核态运行。\r\n\r\n**事实上这两种模式的切换对高级语言开发者来说是透明的，开发者只需要在需要的时候调用系统调用即可**。内核提供了一系列系统调用函数，如read(), send()等。所以**系统调用数从另一方面反应了用户态和内核态之间的切换数**。\r\n\r\n当然，用户态和内核态之间的切换也是需要开销的，所以构建高性能服务器的过程中，对系统调用数的统计亦不能忽视。\r\n\r\n----------\r\n\r\n如何测试\r\n===============\r\n\r\n1 吞吐率\r\n----------\r\n通常，我们关心的是服务器的最大吞吐率，即每秒最多能处理多少个请求，事实上就是平常我们所说的服务器压力测试。当然，压力测试工具有好多种，如[JMeter](http://en.wikipedia.org/wiki/Apache_JMeter)，[LoadRunner](http://en.wikipedia.org/wiki/HP_LoadRunner)等。当然，还有Apache附带的[ab](http://en.wikipedia.org/wiki/ApacheBench)工具。下面，我们以ab为例，简单测试下百度首页的情况。\r\n\r\n\tab -c10 -n100 www.baidu.com\r\n\r\n相应的结果如下（部分）：\r\n\r\n\tConcurrency Level:      10\r\n\tTime taken for tests:   9.031 seconds\r\n\tComplete requests:      100\r\n\tFailed requests:        97\r\n\t   (Connect: 0, Receive: 0, Length: 97, Exceptions: 0)\r\n\tTotal transferred:      8730133 bytes\r\n\tHTML transferred:       8645328 bytes\r\n\tRequests per second:    11.07 [#/sec] (mean)\r\n\tTime per request:       903.139 [ms] (mean)\r\n\tTime per request:       90.314 [ms] (mean, across all concurrent requests)\r\n\tTransfer rate:          943.99 [Kbytes/sec] received\r\n\r\n从上述测试中可以得到，我们对百度首页利用ab进行简单的压力测试（总共100次请求且并发数为10）总共花了9.031秒，那平均每个请求处理时间为90.314毫秒，但是由于并发数为10，所以每个用户的平均等待时间为903.139毫秒。当然，我们这里不评价百度首页的性能情况。\r\n\r\n2 CPU使用率，内存使用率，I/O Wait率\r\n----------\r\n我们查看服务器进程的CPU使用率，内存使用率，I/O Wait率可以直接使用linux的**top命令**，结果如下所示：\r\n\r\n\ttop - 21:47:41 up 50 min,  3 users,  load average: 0.01, 0.02, 0.05\r\n\tTasks: 379 total,   1 running, 378 sleeping,   0 stopped,   0 zombie\r\n\t%Cpu(s):  0.3 us,  0.3 sy,  0.0 ni, 99.3 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st\r\n\tKiB Mem:   2042180 total,  1025404 used,  1016776 free,    48868 buffers\r\n\tKiB Swap:   521212 total,        0 used,   521212 free.   501296 cached Mem\r\n\r\n\t  PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND\r\n\t 2190 zhujief+  20   0 1171408  98036  63920 S   0.7  4.8   0:31.79 compiz\r\n\t  177 root      20   0       0      0      0 S   0.3  0.0   0:03.20 kworker/1:1\r\n\t 1436 root      20   0  319448  62368  22940 S   0.3  3.1   0:14.96 Xorg\r\n\r\n从top命令的结果中可以得到诸多有用的信息，如当前compiz进程的CPU使用率为0.7%，内存使用率为4.8%，具体使用为98036Kb物理内存。同样也可以看到I/O Wait率为0.0%，因为当前机器并没有跑任何I/O较为密集的程序。另外，iostat命令也可以查看I/O Wait情况。\r\n\r\n3 系统负载\r\n-----------\r\n通过**查看/proc/loadavg**文件内容，可以了解到当前运行队列的情况，即系统负载情况。运行如下命令:\r\n\r\n\tcat /proc/loadavg\r\n\r\n得到如下：\r\n\r\n\t0.00 0.01 0.05 1/512 5082\r\n\r\n即在过去1分钟，5分钟，15分钟内平均系统负载为0.00，0.01，0.05，即平均分别有0.00，0.01，0.05个进程正在等待。而1/512表示当前总共有512个进程，但是当前运行队列中只有1个进程。最右边的5082为最后创建的进程的进程ID。\r\n\r\n4 进程上下文切换\r\n----------\r\n利用[nmon](http://nmon.sourceforge.net/pmwiki.php)工具可以查看进程上下文切换情况。\r\n\r\n\tRunQueue \t\t1   \tLoad Average    CPU use since boot time              \r\n\tContextSwitch\t168.3 \t1 mins  0. 00   Uptime Days=  0 Hours= 1 Mins=59   \r\n\tForks \t\t\t0.0    \t5 mins  0.02    Idle   Days=  0 Hours= 3 Mins=53   \r\n\tInterrupts \t\t70.9   15 mins  0.05    Average CPU use=-95.54%           \r\n\r\n从上面的结果可以看到，当前系统上下文切换速度为168.3/s。\r\n\r\n\r\n5 系统调用数\r\n----------\r\n同样，在linux下我们可以利用相关工具查看进程的系统调用情况 -- [strace](http://linux.die.net/man/1/strace)。截取小段结果如下：\r\n\r\n\trecvmsg(5, 0x7fffe94c5540, 0)           = -1 EAGAIN (Resource temporarily unavailable)\r\n\trecvmsg(5, 0x7fffe94c5540, 0)           = -1 EAGAIN (Resource temporarily unavailable)\r\n\tpoll([{fd=5, events=POLLIN|POLLOUT}], 1, 4294967295) = 1 ([{fd=5, revents=POLLOUT}])\r\n\twritev(5, [{\"\\213\\n\\2\\0\\327`\\340\\0\", 8}, {NULL, 0}, {\"\", 0}], 3) = 8\r\n\r\n很明显，在截取的结果中，进程分别进行了recvmsg, poll, writev等系统调用，当然也就进行了用户态和内核态的切换。\r\n","slug":"-2015-01-22-0-html","updated":1421932034000,"excerpt":"","_id":"wg9cc8ctavtv30cd","comments":true,"photos":[],"link":""},{"date":1421942400000,"layout":"post","title":"构建高性能服务器 -- 缓存篇","categories":["35dfvdhzm65go8n5"],"tags":["896a48ftk42dc3bz"],"content":"<h2 id=\"引子\">引子</h2>\n<p>说到缓存，相信大家都不陌生。<strong>缓存的目的都在于避免重复的慢速计算，比如数据库访问</strong>。相对于慢速计算，缓存将会大大提高数据存取的速率，当然同时将会缩短用户每次请求处理的时间，从而提升服务器单位时间内的请求处理数，即吞吐率。</p>\n<h2 id=\"操作系统中的缓存\">操作系统中的缓存</h2>\n<p>事实上，我们使用的操作系统中都存在着大量的缓存机制，比如文件系统存在<strong>内核缓冲区</strong>。它位于物理内存的内核地址空间，除了使用<strong>O_DIRECT</strong>标记打开的文件以外，所有对磁盘文件的读写操作都要经过它，所以它相当于磁盘的缓存区域。</p>\n<p>这块内核缓冲区也称为<strong>页高速缓存</strong>，实际上它包括以下两部分组成：</p>\n<ul>\n<li>读缓存区</li>\n<li>写缓存区</li>\n</ul>\n<p>读缓存区保存着最近从磁盘上读取的数据，当下次读取相同数据时，可以直接从读缓存区直接读取数据，避免了从磁盘上进行慢速操作。</p>\n<p>写缓存区则保存着将要写入磁盘的数据，从而避免用户进程直接进行磁盘数据的写入而产生慢速操作等待。</p>\n<p>所以无论是读缓存区还是写缓存区，都有效避免用户进程直接进行慢速操作，即直接与磁盘进行数据交互 —— 读或者写。</p>\n<h2 id=\"服务器中的缓存\">服务器中的缓存</h2>\n<p>与操作系统中的缓存类似，我们构建高性能服务器时，也可以<strong>在服务器的业务逻辑层与数据层（数据一般存入数据库进行持久化）之间再加设一层缓存层</strong>。当然，缓存层的作用也就是避免业务逻辑层与数据层直接交互，从而产生慢速操作，进而影响到服务器的性能。</p>\n<p>当业务逻辑层需要读取数据层的相关数据时，向缓存层请求相应数据，若数据存在于缓存层，则直接从缓存层读取，若不存在，则向后端数据层读取，并同时向缓存层保存一份。当下次请求相同数据时，则无需向数据层请求，因为缓存层中已有相应数据。</p>\n<p>当业务逻辑层需要向数据层写入数据时，首先向缓存层请求数据写入，并快速响应写入成功，而缓存层再异步向数据层真正写入数据。如此做法可以减少用户请求等待时间，提高服务器并发性能。</p>\n<h2 id=\"分步式缓存系统\">分步式缓存系统</h2>\n<p>开源社区已有非常成熟的分布式缓存系统，比如说<a href=\"http://memcached.org/\" target=\"_blank\" rel=\"external\">memcached</a>, <a href=\"http://redis.io/\" target=\"_blank\" rel=\"external\">redis</a>等。它们都是属于<a href=\"http://en.wikipedia.org/wiki/NoSQL\" target=\"_blank\" rel=\"external\">NoSQL</a>范畴，都是以Key-Value形式进行存储的。</p>\n<p>我们以memcached为例。</p>\n<p>首先，memcached高效的最大原因就是其<strong>基于Key的Hash算法来存储数据结构，并且使用了非常高效的内存分配器（事先向操作系统请求了大片内存，再进行自我管理，避免大量内存申请与释放操作）</strong>，所以使数据项的查询时间复杂度达到O(1)。</p>\n<p>其次，<strong>memcached采用<a href=\"http://libevent.org/\" target=\"_blank\" rel=\"external\">libevent</a>作为其底层的网络事件库</strong>。而libevent又是业界较好的同类型开源库，所以从底层I/O网络模型上保障其可以进行高并发数据存取操作。</p>\n<p>再次，memcached是一种分步式缓存系统，所以<strong>在理论上可以无限扩容，即扩展服务器数量，提高服务器集群并发处理能力</strong>。而且，它采用<strong><a href=\"http://zh.wikipedia.org/zh/%E4%B8%80%E8%87%B4%E5%93%88%E5%B8%8C\" target=\"_blank\" rel=\"external\">一致性Hash</a></strong>方法，从而减少因缓存服务器扩容或者下线造成的数据缓存失效问题。</p>\n<p>BTW，memcached采用<strong>LRU(Least Recently Used)</strong>及时淘汰非热点数据，从而保障所缓存数据均为热点数据，最大效率使用机器内存。</p>\n","source":"_posts/2015-01-23-0.md","raw":"---\r\ndate: 2015-01-23\r\nlayout: post\r\ntitle: 构建高性能服务器 -- 缓存篇\r\npermalink: '/2015/01-23-0.html'\r\ncategories:\r\n- 服务器编程\r\ntags:\r\n- 性能\r\n---\r\n\r\n引子\r\n------\r\n说到缓存，相信大家都不陌生。**缓存的目的都在于避免重复的慢速计算，比如数据库访问**。相对于慢速计算，缓存将会大大提高数据存取的速率，当然同时将会缩短用户每次请求处理的时间，从而提升服务器单位时间内的请求处理数，即吞吐率。\r\n\r\n操作系统中的缓存\r\n--------\r\n事实上，我们使用的操作系统中都存在着大量的缓存机制，比如文件系统存在**内核缓冲区**。它位于物理内存的内核地址空间，除了使用**O_DIRECT**标记打开的文件以外，所有对磁盘文件的读写操作都要经过它，所以它相当于磁盘的缓存区域。\r\n\r\n这块内核缓冲区也称为**页高速缓存**，实际上它包括以下两部分组成：\r\n\r\n* 读缓存区\r\n* 写缓存区\r\n\r\n读缓存区保存着最近从磁盘上读取的数据，当下次读取相同数据时，可以直接从读缓存区直接读取数据，避免了从磁盘上进行慢速操作。\r\n\r\n写缓存区则保存着将要写入磁盘的数据，从而避免用户进程直接进行磁盘数据的写入而产生慢速操作等待。\r\n\r\n所以无论是读缓存区还是写缓存区，都有效避免用户进程直接进行慢速操作，即直接与磁盘进行数据交互 ---- 读或者写。\r\n\r\n服务器中的缓存\r\n-----------\r\n与操作系统中的缓存类似，我们构建高性能服务器时，也可以**在服务器的业务逻辑层与数据层（数据一般存入数据库进行持久化）之间再加设一层缓存层**。当然，缓存层的作用也就是避免业务逻辑层与数据层直接交互，从而产生慢速操作，进而影响到服务器的性能。\r\n\r\n当业务逻辑层需要读取数据层的相关数据时，向缓存层请求相应数据，若数据存在于缓存层，则直接从缓存层读取，若不存在，则向后端数据层读取，并同时向缓存层保存一份。当下次请求相同数据时，则无需向数据层请求，因为缓存层中已有相应数据。\r\n\r\n当业务逻辑层需要向数据层写入数据时，首先向缓存层请求数据写入，并快速响应写入成功，而缓存层再异步向数据层真正写入数据。如此做法可以减少用户请求等待时间，提高服务器并发性能。\r\n\r\n分步式缓存系统\r\n----------\r\n开源社区已有非常成熟的分布式缓存系统，比如说[memcached](http://memcached.org/), [redis](http://redis.io/)等。它们都是属于[NoSQL](http://en.wikipedia.org/wiki/NoSQL)范畴，都是以Key-Value形式进行存储的。\r\n\r\n我们以memcached为例。\r\n\r\n首先，memcached高效的最大原因就是其**基于Key的Hash算法来存储数据结构，并且使用了非常高效的内存分配器（事先向操作系统请求了大片内存，再进行自我管理，避免大量内存申请与释放操作）**，所以使数据项的查询时间复杂度达到O(1)。\r\n\r\n其次，**memcached采用[libevent](http://libevent.org/)作为其底层的网络事件库**。而libevent又是业界较好的同类型开源库，所以从底层I/O网络模型上保障其可以进行高并发数据存取操作。\r\n\r\n再次，memcached是一种分步式缓存系统，所以**在理论上可以无限扩容，即扩展服务器数量，提高服务器集群并发处理能力**。而且，它采用**[一致性Hash](http://zh.wikipedia.org/zh/%E4%B8%80%E8%87%B4%E5%93%88%E5%B8%8C)**方法，从而减少因缓存服务器扩容或者下线造成的数据缓存失效问题。\r\n\r\nBTW，memcached采用**LRU(Least Recently Used)**及时淘汰非热点数据，从而保障所缓存数据均为热点数据，最大效率使用机器内存。","slug":"-2015-01-23-0-html","updated":1422019263000,"excerpt":"","_id":"x6d4hdfpdsof0shh","comments":true,"photos":[],"link":""},{"date":1278086400000,"layout":"post","title":"优化程序性能","categories":["hmzns96sockjtdsf"],"tags":["eyhtmoggscycl638","6ttj1beno39qbqo2","896a48ftk42dc3bz"],"content":"<p>编写高效程序需要两个活动：第一，我们必须选择一组最好的算法和数据结构；第二，我们必须编写出编译器能够有效优化以转换成高效可执行代码的源 代码。这里，我们主要讲述后者。</p>\n<p>首先，我们討論一下为什么要编写高效程序。不难想象，如果本来要用１０天运行完的程序，经过优化只需要１天就可运行完，这是一件多么令人振奋的 事啊。时间就是金钱呐。那么，什么时候才有必要优化。什么？优化不是无论什么时候都有必要的吗？太不可思议了！当然，作为一个程序员，我们必做在实现与维 护程序的简单性与它的运行速度之间做出权衡折衷。对于一个只会运行一次以产生一组数据点的程序，以一种尽量减少编程工作量并保证正确性来编写程序就更为重 要了。考虑一下，比如一个只用一次的算法，编写时间加上运行时间不超过一天，然而我们花上三天来优化这个算法让它只要一个小时就能出結果。乍一看多好的优 化啊，三天变成一小时！等等，让我们来算一算。不优化编写加运行时候只要一天，而优化后呢？三天加一小时！当然，如果这个算法反复执行的话，我们对它的优 化就值得肯定了。</p>\n<p>好了，说了这么多，切入正题，怎样才能在优码级别上进行优化呢？做那些编译器不能帮你做的优化。这里，我们先讲个例子。考虑一个简单向量数据结构。向量由两个存储器块表示。头部是一个声明如下的结构：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span>{</div><div class=\"line\">    <span class=\"keyword\">int</span> len;</div><div class=\"line\">    data_t* data;</div><div class=\"line\">}vec_rec, *vec_ptr;</div></pre></td></tr></table></figure>\n\n<p>这个声明用数据类型data_t作为基本元素的数据类型。可以用int,float,double类型来评价我们代码的性能，这里我们使用float。代码如下：</p>\n<pre><code><span class=\"keyword\">typedef</span> <span class=\"built_in\">float</span> data_t;\n</code></pre><p>除了头以外，我们还分配一个len长度的data_t类型对象的数组，以存放实际的向量元素。代码如下：</p>\n<pre><code>vec_ptr new_vec(<span class=\"type\">int</span> len)\n{\n    vec_ptr <span class=\"literal\">result</span> = (vec_ptr)malloc(sizeof(vec_rec));\n    <span class=\"keyword\">if</span>(!<span class=\"literal\">result</span>)\n        <span class=\"keyword\">return</span> <span class=\"type\">NULL</span>;\n    <span class=\"literal\">result</span>-&gt;len = len;\n    <span class=\"keyword\">if</span>(len &gt; <span class=\"number\">0</span>){\n        data_t* data = (data_t*)calloc(len, sizeof(data_t));\n        <span class=\"keyword\">if</span>(!data){\n            free((<span class=\"type\">void</span>*)<span class=\"literal\">result</span>);\n            <span class=\"keyword\">return</span> <span class=\"type\">NULL</span>;\n        }\n        <span class=\"literal\">result</span>-&gt;data = data;\n    }\n    <span class=\"keyword\">else</span>\n        <span class=\"literal\">result</span>-&gt;data = <span class=\"type\">NULL</span>;\n    <span class=\"keyword\">return</span> <span class=\"literal\">result</span>;\n}\n</code></pre><p>当然，还有另外的操作，如取data_t类型对象数组中的元素，得数组的长度等。</p>\n<pre><code><span class=\"keyword\">int</span> get_vec_elment(vec_ptr v, <span class=\"keyword\">int</span> <span class=\"keyword\">index</span>, data_t* dest)\n{\n    <span class=\"keyword\">if</span>(<span class=\"keyword\">index</span> &lt; <span class=\"number\">0</span> || <span class=\"keyword\">index</span> &gt; <span class=\"number\">0</span>)\n        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;\n    *dest = v-&gt;data[<span class=\"keyword\">index</span>];\n    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;\n}\n\n<span class=\"keyword\">int</span> vec_length(vec_ptr v)\n{\n    <span class=\"keyword\">return</span> v-&gt;len;\n}\n</code></pre><p>作为一个优化示例，必须有操作。这里我们将操作定义为把data_t类型对象数组中的元素根据某种运算合并成一个值。通过使用编译时常数IDENT和OPER定义：</p>\n<pre><code><span class=\"preprocessor\">#<span class=\"keyword\">define</span> INENT 1</span>\n<span class=\"preprocessor\">#<span class=\"keyword\">define</span> OPER *</span>\n</code></pre><p>最后，我们进行操作，函数如下：</p>\n<pre><code><span class=\"keyword\">void</span> combine1(vec_ptr v, data_t* dest)\n{\n    int i;\n\n    *dest = INENT;\n    <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; vec_length(v); i++){\n        data_t <span class=\"keyword\">val</span>;\n        get_vec_elment(v, i, &amp;<span class=\"keyword\">val</span>);\n        *dest = *dest OPER <span class=\"keyword\">val</span>;\n    }\n}\n</code></pre><p>这里就是将所有的元素通过乘法合并成一个元素。假设元素数组有１０亿个。默认地，编译器产生的代码没有经过任何的优化，所以，我们这个程序的运 行时间是相当的长。还是先说明下我的实验环境吧。我是在eclipse+Mingw下运行的，CPU为T5670　1.8GHz。那么这样的代码花了我多长时间呢？答案是12.680秒!天呐，那不是很慢嘛！这个嘛，要得益于我们高速发展的硬件设备了。但是，现在只是１０亿个，要是更多呢？操作只是简单的相乘，要是更复杂呢？不敢想象。。。</p>\n<p>至此，我们先来讨论第一个优化：消除循环的低效率 。观察combine1函数，我们发现，在for(i = 0; i &lt; vec_length(v); i++)中，我们调用函数vec_length()作为测试条件。想象一下上C语言课程时候对循环的讨论，每次循环迭代时都必须对测试条件进行求值。哇， 那我们运行１０亿次乘法不是要调用１０亿次vec_length()函数，但是，vec_length()的返回值在这１０亿次中根本不会变化!没错，我 们对一个不会变的结果运行计算了１０亿次！事实上１０亿减１次是根本不需要的！你想到了什么？没错，我们可以优化。正如在前面所说，我们要消除循环的低效率。</p>\n<p>我们编写combie2版本，它在开始时调用vec_length()函数，并将结果赋值给局部变量length,然后在for循环中使用这个变量。果不其然，我们提高了程序的性能，运行完只花了10.012秒。这里列出combine2的代码：</p>\n<pre><code>void combine2(vec_ptr v, data_t* dest)\n{\n    <span class=\"built_in\">int</span> i;\n    <span class=\"built_in\">int</span> len = vec_length(v);\n\n    *dest = INENT;\n    <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; len; i++){\n        data_t <span class=\"keyword\">val</span>;\n        get_vec_elment(v, i, &amp;<span class=\"keyword\">val</span>);\n        *dest = *dest OPER <span class=\"keyword\">val</span>;\n    }\n}\n</code></pre><p>这个优化是一类常见的、称为代码移动的优化实例。这类优化包括识别出在循环里执行多次，但结果不会变化的计算，因而我们可以将计算移动到循环体外，这样这个计算就不会被执行多次。</p>\n<p>下面，我们对第二个优化进行讨论：减少过程调用 。过程调用可能会带来相当大的开销。如combine2中的get_vec_elment()函数。每次迭代循环，我们都要调用 get_vec_elment()函数以获得下一个元素。仔细观察代码，我们发现完全可以避免这个过程调用，因而也不需要进行边界检查，对程序来说是一个 良好的优化。我们可以进行如下 的改变：</p>\n<pre><code><span class=\"title\">data_t</span>* get_vec_start(vec_ptr v)\n{\n    return v-&gt;<span class=\"typedef\"><span class=\"keyword\">data</span>;</span>\n}\n\n<span class=\"title\">void</span> combine3(vec_ptr v, data_t* dest)\n{\n    int i;\n    int len = vec_length(v);\n    data_t* <span class=\"typedef\"><span class=\"keyword\">data</span> = get_vec_start<span class=\"container\">(<span class=\"title\">v</span>)</span>;</span>\n\n    *dest = <span class=\"type\">INENT</span>;\n    for(i = <span class=\"number\">0</span>; i &lt; len; i++){\n        *dest = *dest <span class=\"type\">OPER</span> <span class=\"typedef\"><span class=\"keyword\">data</span>[i];</span>\n    }\n}\n</code></pre><p>相比之前，我们在进行循环体之前先取得元素数组的起始位置，然后我们每次循环时用数组得到元素，而省去了对get+vec_elment的过程调用，减少了一些运行时间。改善后的时间是6.36秒。</p>\n<p>下面，我们再次进入下一个优化阶段：消除不必要的存储器引用 。我们知道，操作系统中对数据的读取与存储，寄存器快于存储器。然而，我们发现combine3中，每次循环中， <em>dest = </em>dest OPER data[i]语句先是对<em>dest进行读取，然后进行计算，再存到</em>dest中，这些是在存储器上进行的。但是，我们这一次存的数据就是我们下一次循环 读的数据，这样在存储器上操作不是很费时间？没错，所以，我们要消除不必要的存储器引用，将这个数据存到寄存器中。我们引入一个临时变量：</p>\n<pre><code>void combine4(vec_ptr v, data_t* dest)\n{\n    int i;\n    int <span class=\"variable\">len =</span> vec_length(v);\n    data_t* <span class=\"variable\">data =</span> get_vec_start(v);\n    data_t <span class=\"variable\">tmp =</span> INENT;\n\n    for(<span class=\"variable\">i =</span> <span class=\"number\">0</span>; i &lt; len; i++){\n        <span class=\"variable\">tmp =</span> tmp OPER data[i];\n    }\n    *<span class=\"variable\">dest =</span> tmp;\n}\n</code></pre><p>经过如此改变之后，我们程序的性能又有所提高，只需要6.227秒。</p>\n<p>最后，我们再一次来回顾一下我们如何提高程序的性能。一、消除循环的低效率。二、减少过程调用。三、消除不必要的存储器引用。这里，有人会问，编译器不是 自己有优化的嘛。没错，现代的各种编译器都有能力不等的优化。但是，作为一个合格的程序员，把程序优化的工作交给编译器固然有益处，可编译器也不是万能的 啊。一部分的优化能是做不到的，而且，作为优化，最重要的是不能改变程序原来的执行结果。编译器当碰到能决定是否会改变你的程序结果的时候，他往往选择不 优化以保证结果的正确性，这个时候就需要我们手动来进行程序的优化了。所以，掌握这个技能还是很有必要的。</p>\n<p>另外，这是我第一次写Blog，当然文笔很生疏啦，请读者见谅！不管怎么样，这是我学习过程的一个总结，请批评指正。</p>\n","source":"_posts/2010-07-03-0.md","raw":"---\r\ndate: 2010-07-03\r\nlayout: post\r\ntitle: 优化程序性能\r\npermalink: '/2010/07-03-0.html'\r\ncategories:\r\n- c/c++\r\ntags:\r\n- 设计\r\n- 代码质量\r\n- 性能\r\n---\r\n\r\n\r\n编写高效程序需要两个活动：第一，我们必须选择一组最好的算法和数据结构；第二，我们必须编写出编译器能够有效优化以转换成高效可执行代码的源 代码。这里，我们主要讲述后者。\r\n\r\n首先，我们討論一下为什么要编写高效程序。不难想象，如果本来要用１０天运行完的程序，经过优化只需要１天就可运行完，这是一件多么令人振奋的 事啊。时间就是金钱呐。那么，什么时候才有必要优化。什么？优化不是无论什么时候都有必要的吗？太不可思议了！当然，作为一个程序员，我们必做在实现与维 护程序的简单性与它的运行速度之间做出权衡折衷。对于一个只会运行一次以产生一组数据点的程序，以一种尽量减少编程工作量并保证正确性来编写程序就更为重 要了。考虑一下，比如一个只用一次的算法，编写时间加上运行时间不超过一天，然而我们花上三天来优化这个算法让它只要一个小时就能出結果。乍一看多好的优 化啊，三天变成一小时！等等，让我们来算一算。不优化编写加运行时候只要一天，而优化后呢？三天加一小时！当然，如果这个算法反复执行的话，我们对它的优 化就值得肯定了。\r\n\r\n好了，说了这么多，切入正题，怎样才能在优码级别上进行优化呢？做那些编译器不能帮你做的优化。这里，我们先讲个例子。考虑一个简单向量数据结构。向量由两个存储器块表示。头部是一个声明如下的结构：\r\n\r\n```c++\r\n\ttypedef struct{\r\n\t    int len;\r\n\t    data_t* data;\r\n\t}vec_rec, *vec_ptr;\r\n```\r\n\r\n这个声明用数据类型data_t作为基本元素的数据类型。可以用int,float,double类型来评价我们代码的性能，这里我们使用float。代码如下：\r\n\r\n\ttypedef float data_t;\r\n\r\n除了头以外，我们还分配一个len长度的data_t类型对象的数组，以存放实际的向量元素。代码如下：\r\n\r\n\tvec_ptr new_vec(int len)\r\n\t{\r\n\t    vec_ptr result = (vec_ptr)malloc(sizeof(vec_rec));\r\n\t    if(!result)\r\n\t        return NULL;\r\n\t    result->len = len;\r\n\t    if(len > 0){\r\n\t        data_t* data = (data_t*)calloc(len, sizeof(data_t));\r\n\t        if(!data){\r\n\t            free((void*)result);\r\n\t            return NULL;\r\n\t        }\r\n\t        result->data = data;\r\n\t    }\r\n\t    else\r\n\t        result->data = NULL;\r\n\t    return result;\r\n\t}\r\n\r\n当然，还有另外的操作，如取data_t类型对象数组中的元素，得数组的长度等。\r\n\r\n\tint get_vec_elment(vec_ptr v, int index, data_t* dest)\r\n\t{\r\n\t    if(index < 0 || index > 0)\r\n\t        return 0;\r\n\t    *dest = v->data[index];\r\n\t    return 1;\r\n\t}\r\n\t \r\n\tint vec_length(vec_ptr v)\r\n\t{\r\n\t    return v->len;\r\n\t}\r\n\r\n作为一个优化示例，必须有操作。这里我们将操作定义为把data_t类型对象数组中的元素根据某种运算合并成一个值。通过使用编译时常数IDENT和OPER定义：\r\n\r\n\t#define INENT 1\r\n\t#define OPER *\r\n\r\n最后，我们进行操作，函数如下：\r\n\r\n\tvoid combine1(vec_ptr v, data_t* dest)\r\n\t{\r\n\t    int i;\r\n\t \r\n\t    *dest = INENT;\r\n\t    for(i = 0; i < vec_length(v); i++){\r\n\t        data_t val;\r\n\t        get_vec_elment(v, i, &val);\r\n\t        *dest = *dest OPER val;\r\n\t    }\r\n\t}\r\n\r\n这里就是将所有的元素通过乘法合并成一个元素。假设元素数组有１０亿个。默认地，编译器产生的代码没有经过任何的优化，所以，我们这个程序的运 行时间是相当的长。还是先说明下我的实验环境吧。我是在eclipse+Mingw下运行的，CPU为T5670　1.8GHz。那么这样的代码花了我多长时间呢？答案是12.680秒!天呐，那不是很慢嘛！这个嘛，要得益于我们高速发展的硬件设备了。但是，现在只是１０亿个，要是更多呢？操作只是简单的相乘，要是更复杂呢？不敢想象。。。\r\n\r\n至此，我们先来讨论第一个优化：消除循环的低效率 。观察combine1函数，我们发现，在for(i = 0; i < vec_length(v); i++)中，我们调用函数vec_length()作为测试条件。想象一下上C语言课程时候对循环的讨论，每次循环迭代时都必须对测试条件进行求值。哇， 那我们运行１０亿次乘法不是要调用１０亿次vec_length()函数，但是，vec_length()的返回值在这１０亿次中根本不会变化!没错，我 们对一个不会变的结果运行计算了１０亿次！事实上１０亿减１次是根本不需要的！你想到了什么？没错，我们可以优化。正如在前面所说，我们要消除循环的低效率。\r\n\r\n我们编写combie2版本，它在开始时调用vec_length()函数，并将结果赋值给局部变量length,然后在for循环中使用这个变量。果不其然，我们提高了程序的性能，运行完只花了10.012秒。这里列出combine2的代码：\r\n\r\n\tvoid combine2(vec_ptr v, data_t* dest)\r\n\t{\r\n\t    int i;\r\n\t    int len = vec_length(v);\r\n\t \r\n\t    *dest = INENT;\r\n\t    for(i = 0; i < len; i++){\r\n\t        data_t val;\r\n\t        get_vec_elment(v, i, &val);\r\n\t        *dest = *dest OPER val;\r\n\t    }\r\n\t}\r\n \r\n这个优化是一类常见的、称为代码移动的优化实例。这类优化包括识别出在循环里执行多次，但结果不会变化的计算，因而我们可以将计算移动到循环体外，这样这个计算就不会被执行多次。\r\n \r\n下面，我们对第二个优化进行讨论：减少过程调用 。过程调用可能会带来相当大的开销。如combine2中的get_vec_elment()函数。每次迭代循环，我们都要调用 get_vec_elment()函数以获得下一个元素。仔细观察代码，我们发现完全可以避免这个过程调用，因而也不需要进行边界检查，对程序来说是一个 良好的优化。我们可以进行如下 的改变：\r\n\r\n\tdata_t* get_vec_start(vec_ptr v)\r\n\t{\r\n\t    return v->data;\r\n\t}\r\n\t \r\n\tvoid combine3(vec_ptr v, data_t* dest)\r\n\t{\r\n\t    int i;\r\n\t    int len = vec_length(v);\r\n\t    data_t* data = get_vec_start(v);\r\n\t \r\n\t    *dest = INENT;\r\n\t    for(i = 0; i < len; i++){\r\n\t        *dest = *dest OPER data[i];\r\n\t    }\r\n\t}\r\n\r\n相比之前，我们在进行循环体之前先取得元素数组的起始位置，然后我们每次循环时用数组得到元素，而省去了对get+vec_elment的过程调用，减少了一些运行时间。改善后的时间是6.36秒。\r\n\r\n下面，我们再次进入下一个优化阶段：消除不必要的存储器引用 。我们知道，操作系统中对数据的读取与存储，寄存器快于存储器。然而，我们发现combine3中，每次循环中， *dest = *dest OPER data[i]语句先是对*dest进行读取，然后进行计算，再存到*dest中，这些是在存储器上进行的。但是，我们这一次存的数据就是我们下一次循环 读的数据，这样在存储器上操作不是很费时间？没错，所以，我们要消除不必要的存储器引用，将这个数据存到寄存器中。我们引入一个临时变量：\r\n\r\n\tvoid combine4(vec_ptr v, data_t* dest)\r\n\t{\r\n\t    int i;\r\n\t    int len = vec_length(v);\r\n\t    data_t* data = get_vec_start(v);\r\n\t    data_t tmp = INENT;\r\n\t \r\n\t    for(i = 0; i < len; i++){\r\n\t        tmp = tmp OPER data[i];\r\n\t    }\r\n\t    *dest = tmp;\r\n\t}\r\n\t\r\n经过如此改变之后，我们程序的性能又有所提高，只需要6.227秒。\r\n\r\n最后，我们再一次来回顾一下我们如何提高程序的性能。一、消除循环的低效率。二、减少过程调用。三、消除不必要的存储器引用。这里，有人会问，编译器不是 自己有优化的嘛。没错，现代的各种编译器都有能力不等的优化。但是，作为一个合格的程序员，把程序优化的工作交给编译器固然有益处，可编译器也不是万能的 啊。一部分的优化能是做不到的，而且，作为优化，最重要的是不能改变程序原来的执行结果。编译器当碰到能决定是否会改变你的程序结果的时候，他往往选择不 优化以保证结果的正确性，这个时候就需要我们手动来进行程序的优化了。所以，掌握这个技能还是很有必要的。\r\n\r\n另外，这是我第一次写Blog，当然文笔很生疏啦，请读者见谅！不管怎么样，这是我学习过程的一个总结，请批评指正。","slug":"-2010-07-03-0-html","updated":1422085763000,"excerpt":"","_id":"4woysr9ynri2vrve","comments":true,"photos":[],"link":""},{"date":1280678400000,"layout":"post","title":"《高效能人士的七个习惯》读后","categories":["5uqjpmh62j3bpyf3"],"tags":[],"content":"<p>偶然在<a href=\"http://mindhacks.cn/\" target=\"_blank\" rel=\"external\">刘未鹏</a>大牛的博客里看到<a href=\"http://book.douban.com/subject/1048007/\" target=\"_blank\" rel=\"external\">《高效能人士的七个习惯》</a> 一书，便有兴趣一读。遂去图书馆借书一册，每晚睡觉前阅读几页，断断续续将其读完，颇有心得，与大家其享之。</p>\n<p>《高效能人士的七个习惯》，英文原名《The habits of highly effective people》。effective一词，可以认为是<a href=\"http://en.wikipedia.org/wiki/Effectiveness\" target=\"_blank\" rel=\"external\">getting the right things done</a>。 但是，我觉得理解为getting the right things done rightly ，也就是说<strong>正确地做正确的事</strong> 。书中列举了effective人士的七个习惯，从<strong>依赖到独立，再从独立到互赖</strong>，完成到一个effective people的完全蜕变。</p>\n<p>习惯一：<strong>积极主动(be proactive)</strong> 。关于积极主动，可以算是老生长谈了。但凡是教人如何做事的书籍均会提到这样的词。确实，我们做做事情，如果缺乏积极主动，那么将一事无成。有句老话叫“天上不会掉馅饼”，没有积极主动，想想守株待兔的结局吧。</p>\n<p>习惯二：<strong>以终为始(begin with the end in mind)</strong>。任何事情的完成，都会经历两个阶段，一个为在你大脑里构思完成，另一个便是真正事实上完成。所以，我们必须一直抱着要完成的心态去做每一件事，切忌只将事情停留在你的大脑里。抛弃“我想……”，用“我要……”来代替，然后以完成它作为目标，直至事情的圆满结束。</p>\n<p>习惯三：<strong>要事第一(put first things first)</strong>。<a href=\"http://www.lixiaolai.com/\" target=\"_blank\" rel=\"external\">笑来老师</a> 在他的博客里提到过，他辅导过一个女孩，见面时问她今天有什么事要处理。那女孩说给我两分钟时间，然后从包里拿出一本记事本，今天要处理的事全部都记在上 面。笑来老师认为这个女孩不错，会是个人才，因为她做事很有条理，而不是一团糟。后来，那女孩被耶鲁大学录取了。这里，我觉得这个女孩把要处理的事都记载 下来（尽管很多人会不屑），当然我并不觉得她的记忆力不好，是为了把事情按重要程度区别开来，以至于要事永远放在第一。</p>\n<p>习惯四：<strong>双赢思维(think win/win)</strong>。很多人认为双方竞争只有两个结果，已胜彼败，或者是已败彼胜。殊不知，还有<a href=\"http://en.wikipedia.org/wiki/Win_%26_Win\" target=\"_blank\" rel=\"external\">双嬴</a>的可能。同一个团队，为了个人的竞争，勾心斗角不断，整个团队的效率就会停滞不前。很多公司的招聘，都会加上一个条件，要求有“团队合作精神”。先不论这样的招聘要求有没有实际的意义，但是企业的出发点还是好的，就是双嬴思维，双嬴才是目标。</p>\n<p>习惯五：<strong>知彼解已(seek first to understand, then to be understood)</strong>。想要别人了解你，那么首先要了解别人。我们看这个世界，都是带着有色眼镜观察。看别人的事，总会多少带一点个人色彩。同样一个小沈阳，你把他捧成星，我 却认为他是俗。更熟悉的说法就是，一千个读者就有一千个哈姆雷特。所以，评价别人的时候，摘掉我们的眼镜，用心真正去聆听别人，真正设身处地去了解别人， 这样，才能嬴得别人。</p>\n<p>习惯六：<strong>统合综效(synergize)</strong>。我们时常会听说1+1&gt;2的事，这就是统合综效的成果。如果我们没有做到统合综效，那整个团队无异于一盘散沙，你要往东走，我却要向西行，无论如何也达不到1+1&gt;2，反而1+1&lt;2；</p>\n<p>习惯七：<strong>不断更新(sharpen the saw)</strong>。我们处在一个高速发展的时代，如果不更新自己，很快就会被社会淘汰。中国有句老话，“活到老，学到老”。我们伟大的毛主席也说，“流水不腐，户枢不蠹”。只有经常更新自己，才能跟上时代的步伐，也才能迈向新的成长之路。</p>\n<p>这七个习惯都不是我们罕见的道理，但是谨记<strong>知易行难</strong>，如果真正做到了，那就恭喜了，你成为effecive people的一员了。</p>\n","source":"_posts/2010-08-02-0.md","raw":"---\r\ndate: 2010-08-02\r\nlayout: post\r\ntitle: 《高效能人士的七个习惯》读后\r\npermalink: '/2010/08-02-0.html'\r\ncategories:\r\n- 杂感\r\ntags:\r\n---\r\n\r\n\r\n偶然在[刘未鹏](http://mindhacks.cn/)大牛的博客里看到[《高效能人士的七个习惯》](http://book.douban.com/subject/1048007/) 一书，便有兴趣一读。遂去图书馆借书一册，每晚睡觉前阅读几页，断断续续将其读完，颇有心得，与大家其享之。\r\n\r\n《高效能人士的七个习惯》，英文原名《The habits of highly effective people》。effective一词，可以认为是[getting the right things done](http://en.wikipedia.org/wiki/Effectiveness)。 但是，我觉得理解为getting the right things done rightly ，也就是说**正确地做正确的事** 。书中列举了effective人士的七个习惯，从**依赖到独立，再从独立到互赖**，完成到一个effective people的完全蜕变。\r\n\r\n习惯一：**积极主动(be proactive)** 。关于积极主动，可以算是老生长谈了。但凡是教人如何做事的书籍均会提到这样的词。确实，我们做做事情，如果缺乏积极主动，那么将一事无成。有句老话叫“天上不会掉馅饼”，没有积极主动，想想守株待兔的结局吧。\r\n\r\n习惯二：**以终为始(begin with the end in mind)**。任何事情的完成，都会经历两个阶段，一个为在你大脑里构思完成，另一个便是真正事实上完成。所以，我们必须一直抱着要完成的心态去做每一件事，切忌只将事情停留在你的大脑里。抛弃“我想……”，用“我要……”来代替，然后以完成它作为目标，直至事情的圆满结束。\r\n\r\n习惯三：**要事第一(put first things first)**。[笑来老师](http://www.lixiaolai.com/) 在他的博客里提到过，他辅导过一个女孩，见面时问她今天有什么事要处理。那女孩说给我两分钟时间，然后从包里拿出一本记事本，今天要处理的事全部都记在上 面。笑来老师认为这个女孩不错，会是个人才，因为她做事很有条理，而不是一团糟。后来，那女孩被耶鲁大学录取了。这里，我觉得这个女孩把要处理的事都记载 下来（尽管很多人会不屑），当然我并不觉得她的记忆力不好，是为了把事情按重要程度区别开来，以至于要事永远放在第一。\r\n\r\n习惯四：**双赢思维(think win/win)**。很多人认为双方竞争只有两个结果，已胜彼败，或者是已败彼胜。殊不知，还有[双嬴](http://en.wikipedia.org/wiki/Win_%26_Win)的可能。同一个团队，为了个人的竞争，勾心斗角不断，整个团队的效率就会停滞不前。很多公司的招聘，都会加上一个条件，要求有“团队合作精神”。先不论这样的招聘要求有没有实际的意义，但是企业的出发点还是好的，就是双嬴思维，双嬴才是目标。\r\n\r\n习惯五：**知彼解已(seek first to understand, then to be understood)**。想要别人了解你，那么首先要了解别人。我们看这个世界，都是带着有色眼镜观察。看别人的事，总会多少带一点个人色彩。同样一个小沈阳，你把他捧成星，我 却认为他是俗。更熟悉的说法就是，一千个读者就有一千个哈姆雷特。所以，评价别人的时候，摘掉我们的眼镜，用心真正去聆听别人，真正设身处地去了解别人， 这样，才能嬴得别人。\r\n\r\n习惯六：**统合综效(synergize)**。我们时常会听说1+1>2的事，这就是统合综效的成果。如果我们没有做到统合综效，那整个团队无异于一盘散沙，你要往东走，我却要向西行，无论如何也达不到1+1>2，反而1+1<2；\r\n\r\n习惯七：**不断更新(sharpen the saw)**。我们处在一个高速发展的时代，如果不更新自己，很快就会被社会淘汰。中国有句老话，“活到老，学到老”。我们伟大的毛主席也说，“流水不腐，户枢不蠹”。只有经常更新自己，才能跟上时代的步伐，也才能迈向新的成长之路。\r\n\r\n这七个习惯都不是我们罕见的道理，但是谨记**知易行难**，如果真正做到了，那就恭喜了，你成为effecive people的一员了。","slug":"-2010-08-02-0-html","updated":1419145978000,"excerpt":"","_id":"tqouple0vranta4y","comments":true,"photos":[],"link":""}],"Tag":[{"name":"设计","_id":"eyhtmoggscycl638","posts":["oojrioc85lvie065","74tmv6rjwspbfthv","dbsdar2k0vjhghok","gvsx4ycd5x8avk0d","az8s67h1s0epl5pw","xa27dwvt7dihr5z1","4woysr9ynri2vrve"]},{"name":"面向对象","_id":"v05jjt7gz3zyzrsd","posts":["oojrioc85lvie065","5bwoyzieku6pckfy"]},{"name":"代码质量","_id":"6ttj1beno39qbqo2","posts":["74tmv6rjwspbfthv","dbsdar2k0vjhghok","4woysr9ynri2vrve"]},{"name":"面试题","_id":"t5iizbepdikhme90","posts":["qttdfts7zx56yxnt","r4nkpasjc54aioz9","ocfi8fe0ex3sqqgz","ihpxsh4esyt3fc11"]},{"name":"基础","_id":"jvobuhawh5ip821o","posts":["cpxqfrmcn9u9ee4f"]},{"name":"排序","_id":"64673jg048ygbdcb","posts":["r4nkpasjc54aioz9","5i05thmr7dltojdg","j2elszw2ui6ii3m6","2unx7rlf3unad7pe","t7rqm1fa4w4m09pq","trtxql5lerzvm4og","rqsn842mcr8t2ya6","veaufuijauraob65"]},{"name":"高阶函数","_id":"8zwe66puqwnkc3ll","posts":["kay6zd8pjphfm8sz"]},{"name":"openGL","_id":"oe66b35huw7v2drm","posts":["wvsvofwpj7noh1o8","zaudx5zik6ej9rdq","3vnyaifveqdp0tx4","kce2wwsnwx6zzbc6"]},{"name":"网络I/O","_id":"p203pmw1debposhm","posts":["uq6cghl8it3qc3fl"]},{"name":"元编程","_id":"h69hdiekkpvpaizu","posts":["qcy06vx1vsr2dvxr"]},{"name":"内存管理","_id":"5f03qmnxcygbefny","posts":["qcy06vx1vsr2dvxr"]},{"name":"小技巧","_id":"bb6h8yibk35esu2a","posts":["zy1lplodx9wtciw4"]},{"name":"性能","_id":"896a48ftk42dc3bz","posts":["64o7getbynp33mvl","wg9cc8ctavtv30cd","x6d4hdfpdsof0shh","4woysr9ynri2vrve"]},{"name":"pprof","_id":"i6bn89xm1x5dsn4q","posts":["64o7getbynp33mvl"]},{"name":"union-find","_id":"acpvv0jmps70bh8p","posts":["tqu8qrc2igkrkc7u","epd6clafna760k2x","wm3xhgckychaxe59","auk648ncwkswxa2a"]}]}